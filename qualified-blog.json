[{"prettyDate":"Mar 9, 2023","title":"Andela and Qualified Join Forces","href":"https://www.qualified.io/blog/posts/andela-and-qualified-join-forces","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/5kKKhNjrNLV0d1hZWBm072/9026eb8d9e4d1645441eda84edb23db1/Andela___s_Evolution_Continues.png?w=100&q=1","length":"2 min read","excerpt":"We're excited to announce that Andela and Qualified are joining forces!\n","collection":"Qualified","slug":"andela-and-qualified-join-forces","author":"Jake Hoffner","htmlContent":"<p>Qualified Community,</p>\n<p>We are thrilled to announce that Qualified has joined forces with one of the largest global talent marketplaces, <a href=\"https://andela.com/\">Andela</a>. Andela’s mission of connecting Brilliance with Opportunity becomes even more powerful today by establishing a global standard for technical acumen and quality with Qualified’s industry-leading technical assessment platform.</p>\n<p>In 2015, Qualified was born from the Codewars coding challenge platform. Recognizing that the core technology behind Codewars could be used by companies in a hiring context, Codewars co-founder Nathan Doctor and I pivoted to building a developer assessment platform. This idea is what would become Qualified, and we are grateful to all who supported us throughout this journey.</p>\n<p>For the past 8 years, we’ve empowered clients to assess talent at scale, finding the best possible fit for development roles. We pride ourselves on providing real-world assessment challenges to ensure that developers are tested on problems seen on the job. We plan on continuing this work and expanding upon it with the support of Andela to create the strongest role assessment, skill certification, and vetting processes in the market.</p>\n<p>For Qualified customers, we will accelerate our roadmap and expand our capabilities to be able to assess skills across a broader range of technical areas for you and Andela’s more than 400 global customers. You will also now have access to one of the premiere end-to-end platforms for accessing over 250,000 digital talent from around the globe, powered by Qualified assessments.</p>\n<p>The roadmap and support for Qualified will only improve with all members of Qualified joining Andela. When you are looking at new models for growing your technology team, keep Andela and our network of 225,000 technologists from developers, engineers, and data scientists to salesforce and design experts in mind. Click <a href=\"https://client.andela.com/register?utm_medium=email&amp;utm_source=blast&amp;utm_campaign=brand-GLOBAL-march9-jake-email-qualified-acquisition&amp;utm_content=client-portal-sign-up&amp;utm_term=\">here</a> to start looking at our talent today. You will find a <a href=\"https://andela.com/insights/andelas-evolution-continues-welcome-qualified-and-codewars/?utm_medium=email&amp;utm_source=blast&amp;utm_campaign=brand-GLOBAL-march9-jake-acquisition-email&amp;utm_content=jeremy-blog&amp;utm_term=\">blog</a> with more information on the acquisition.</p>\n<p>If you have any questions, please feel free to reach out to our team <a href=\"/cdn-cgi/l/email-protection#30405142445e5542435859404370515e54555c511e535f5d\"><span class=\"__cf_email__\" data-cfemail=\"23534251574d4651504b4a535063424d47464f420d404c4e\">[email&nbsp;protected]</span></a></p>\n<p><em>Jake Hoffner, Qualified &amp; Codewars Co-Founder and CEO, Andela Head of Talent Product</em></p>\n","tags":null,"body":"Qualified Community,\n\nWe are thrilled to announce that Qualified has joined forces with one of the largest global talent marketplaces, [Andela](https://andela.com/). Andela’s mission of connecting Brilliance with Opportunity becomes even more powerful today by establishing a global standard for technical acumen and quality with Qualified’s industry-leading technical assessment platform.\n\nIn 2015, Qualified was born from the Codewars coding challenge platform. Recognizing that the core technology behind Codewars could be used by companies in a hiring context, Codewars co-founder Nathan Doctor and I pivoted to building a developer assessment platform. This idea is what would become Qualified, and we are grateful to all who supported us throughout this journey.\n\nFor the past 8 years, we’ve empowered clients to assess talent at scale, finding the best possible fit for development roles. We pride ourselves on providing real-world assessment challenges to ensure that developers are tested on problems seen on the job. We plan on continuing this work and expanding upon it with the support of Andela to create the strongest role assessment, skill certification, and vetting processes in the market.\n\nFor Qualified customers, we will accelerate our roadmap and expand our capabilities to be able to assess skills across a broader range of technical areas for you and Andela’s more than 400 global customers. You will also now have access to one of the premiere end-to-end platforms for accessing over 250,000 digital talent from around the globe, powered by Qualified assessments.\n\nThe roadmap and support for Qualified will only improve with all members of Qualified joining Andela. When you are looking at new models for growing your technology team, keep Andela and our network of 225,000 technologists from developers, engineers, and data scientists to salesforce and design experts in mind. Click [here](https://client.andela.com/register?utm_medium=email&utm_source=blast&utm_campaign=brand-GLOBAL-march9-jake-email-qualified-acquisition&utm_content=client-portal-sign-up&utm_term=) to start looking at our talent today. You will find a [blog](https://andela.com/insights/andelas-evolution-continues-welcome-qualified-and-codewars/?utm_medium=email&utm_source=blast&utm_campaign=brand-GLOBAL-march9-jake-acquisition-email&utm_content=jeremy-blog&utm_term=) with more information on the acquisition.\n\nIf you have any questions, please feel free to reach out to our team partnerships@andela.com\n\n*Jake Hoffner, Qualified & Codewars Co-Founder and CEO, Andela Head of Talent Product*\n","richBody":null,"description":"We're excited to announce that Andela and Qualified are joining forces!","hideHero":true,"publishDate":"2023-03-09T00:00-06:00"},{"prettyDate":"Feb 1, 2023","title":"ATS Integration: Qualified + Recruitee","href":"https://www.qualified.io/blog/posts/ats-integration-qualified-recruitee","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/5doeMcnMhTDqNUaKagpHUl/9192a619216e361a4377fbc4c686f0d1/440px-Recruitee-logo-v2.png?w=100&q=1","length":"2 min read","excerpt":"Qualified now offers an ATS integration with the modern hiring software, Recruitee.\n","collection":"Qualified","slug":"ats-integration-qualified-recruitee","author":"Ellen Weaver","htmlContent":"<p>We're excited to announce Qualified's newest ATS integration with <a href=\"https://recruitee.com\">Recruitee</a>!\n<img src=\"//images.ctfassets.net/4ol5sgskowtw/5doeMcnMhTDqNUaKagpHUl/9192a619216e361a4377fbc4c686f0d1/440px-Recruitee-logo-v2.png\" alt=\"440px-Recruitee-logo-v2\">\nThe modern ATS and collaborative hiring software now seamlessly integrates with Qualified's developer assessment platform, making your hiring process that much easier. Once your integration is set up, you'll be able to invite candidates to take assessments and then view results directly from their Recruitee candidate profiles! Keep reading for a demo on how to get started.</p>\n<h2>Implementation: A step by step guide</h2>\n<h3>Step 1: Generate your API key</h3>\n<p>You'll first need to generate a new API key for your Recruitee integration on Qualified. To do this, log in to your <strong>Qualified Account</strong>. Then open up your <strong>Account Settings</strong> and navigate to <strong>Integrations</strong>. <strong>Find Recruitee</strong> and click <strong>Generate New API Key</strong>. Then, copy the API key to your clipboard.\n<img src=\"//images.ctfassets.net/4ol5sgskowtw/5iTAwG63wEGwJTfX8AnV1k/8fbdad8b65e3763d538cac6033f67157/generate-key.png\" alt=\"generate-key\"></p>\n<h3>Step 2: Set up the integration in Recruitee</h3>\n<p>Now it's time to switch over to your Recruitee account. Once you're logged in to your <strong>Recruitee Account</strong>, navigate to your <strong>Profile Settings</strong>, find <strong>Apps and Plugins</strong>, and select__ Integrations__. Then, choose <strong>Integrate Now</strong> for <a href=\"http://Qualified.io\">Qualified.io</a>.\n<img src=\"//images.ctfassets.net/4ol5sgskowtw/2vYBUifs8o4uLgDhdiILHh/fac73b1694de248951b16af61eb5226a/integrate-qualified.png\" alt=\"integrate-qualified\"></p>\n<h3>Step 3: Finalize the Qualified + Recruitee integration</h3>\n<p>Lastly, enter the API key you generated in step 1 and click <strong>Integrate</strong>.\n<img src=\"//images.ctfassets.net/4ol5sgskowtw/27qZI4bflwhprc60I5COzS/2e386e4be7ad71dbf1e2a7069f826181/integrate-enter-key.png\" alt=\"integrate-enter-key\">\n<em>Note: There's one API Key issued per Qualified team. As such, there's a one-to-one relationship between Qualified teams and Recruitee companies.</em></p>\n<h2>Inviting Candidates to Take Qualified Assessments</h2>\n<p>Once you've enabled the Qualified integration for your organization, you're ready to invite candidates on Recruitee to take Qualified assessments directly from their profile. 🎉 Here's how.</p>\n<p>Simply scroll to the bottom of the candidate's profile and click on <strong>Send Test</strong> within the <a href=\"http://Qualified.io\">Qualified.io</a> container.\n<img src=\"//images.ctfassets.net/4ol5sgskowtw/5DuNyC9zr9gQkcKW3DFefZ/64b203e49979a8247092457c228d5bfd/Sent_Test.png\" alt=\"Sent Test Recruitee\">\nAnother option is to click on the <strong>More</strong> button in the upper right corner of the candidate's profile and choose <strong>Send Qualified Assessments</strong> from the drop down menu.</p>\n<p>Either option will bring up a menu to verify the candidate's information and to select which Qualified assessment to invite the candidate to complete. Once you've completed each field and chosen an assessment, simply click <strong>Send</strong>.</p>\n<h2>View Qualified Assessment Results on Recruitee</h2>\n<p>Once a candidate submits their assessment, their results will show up directly on their Recruitee profile page. A Qualified badge will show their assessment score out of 100. To view their full results, click on <strong>Open</strong>. You'll then be taken to the candidate's results page on Qualified.\n<img src=\"//images.ctfassets.net/4ol5sgskowtw/1SB9Y9fKKv1DnqG5FkjJPJ/b6a0efa534a13fd1e2141123b152adca/image.png\" alt=\"Sample Recruitee Profile\"></p>\n<h2>Conclusion</h2>\n<p>That's it! Now you're ready to send assessments and view results all within Recruitee's candidate profiles. If you have any further questions about <a href=\"http://Qualified.io\">Qualified.io</a>'s integration with the Recruitee ATS, please contact your sales representative.</p>\n","tags":"ATS;Integration;Recruitee;Qualified","body":"We're excited to announce Qualified's newest ATS integration with [Recruitee](https://recruitee.com)! \n![440px-Recruitee-logo-v2](//images.ctfassets.net/4ol5sgskowtw/5doeMcnMhTDqNUaKagpHUl/9192a619216e361a4377fbc4c686f0d1/440px-Recruitee-logo-v2.png)\nThe modern ATS and collaborative hiring software now seamlessly integrates with Qualified's developer assessment platform, making your hiring process that much easier. Once your integration is set up, you'll be able to invite candidates to take assessments and then view results directly from their Recruitee candidate profiles! Keep reading for a demo on how to get started.\n\n## Implementation: A step by step guide\n### Step 1: Generate your API key\nYou'll first need to generate a new API key for your Recruitee integration on Qualified. To do this, log in to your __Qualified Account__. Then open up your __Account Settings__ and navigate to __Integrations__. __Find Recruitee__ and click __Generate New API Key__. Then, copy the API key to your clipboard.\n![generate-key](//images.ctfassets.net/4ol5sgskowtw/5iTAwG63wEGwJTfX8AnV1k/8fbdad8b65e3763d538cac6033f67157/generate-key.png)\n### Step 2: Set up the integration in Recruitee\nNow it's time to switch over to your Recruitee account. Once you're logged in to your __Recruitee Account__, navigate to your __Profile Settings__, find __Apps and Plugins__, and select__ Integrations__. Then, choose __Integrate Now__ for Qualified.io.\n![integrate-qualified](//images.ctfassets.net/4ol5sgskowtw/2vYBUifs8o4uLgDhdiILHh/fac73b1694de248951b16af61eb5226a/integrate-qualified.png)\n### Step 3: Finalize the Qualified + Recruitee integration\nLastly, enter the API key you generated in step 1 and click __Integrate__.\n![integrate-enter-key](//images.ctfassets.net/4ol5sgskowtw/27qZI4bflwhprc60I5COzS/2e386e4be7ad71dbf1e2a7069f826181/integrate-enter-key.png)\n*Note: There's one API Key issued per Qualified team. As such, there's a one-to-one relationship between Qualified teams and Recruitee companies.*\n## Inviting Candidates to Take Qualified Assessments\nOnce you've enabled the Qualified integration for your organization, you're ready to invite candidates on Recruitee to take Qualified assessments directly from their profile. 🎉 Here's how.\n\nSimply scroll to the bottom of the candidate's profile and click on __Send Test__ within the Qualified.io container. \n![Sent Test Recruitee](//images.ctfassets.net/4ol5sgskowtw/5DuNyC9zr9gQkcKW3DFefZ/64b203e49979a8247092457c228d5bfd/Sent_Test.png)\nAnother option is to click on the __More__ button in the upper right corner of the candidate's profile and choose __Send Qualified Assessments__ from the drop down menu.\n\nEither option will bring up a menu to verify the candidate's information and to select which Qualified assessment to invite the candidate to complete. Once you've completed each field and chosen an assessment, simply click __Send__. \n## View Qualified Assessment Results on Recruitee\nOnce a candidate submits their assessment, their results will show up directly on their Recruitee profile page. A Qualified badge will show their assessment score out of 100. To view their full results, click on __Open__. You'll then be taken to the candidate's results page on Qualified.\n![Sample Recruitee Profile](//images.ctfassets.net/4ol5sgskowtw/1SB9Y9fKKv1DnqG5FkjJPJ/b6a0efa534a13fd1e2141123b152adca/image.png)\n## Conclusion\nThat's it! Now you're ready to send assessments and view results all within Recruitee's candidate profiles. If you have any further questions about Qualified.io's integration with the Recruitee ATS, please contact your sales representative. ","richBody":null,"description":"Qualified now offers an ATS integration with the modern hiring software, Recruitee.","hideHero":true,"publishDate":"2023-02-01T00:00-06:00"},{"prettyDate":"Jan 12, 2023","title":"Announcement: Qualified now Integrates with Lever","href":"https://www.qualified.io/blog/posts/lever-integration","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/60V2zVd53m6g5cHWmR0DHP/1c9d3b635b10f5f24fcb104669fc1a22/Untitled__Presentation__169__.png?w=100&q=1","length":"3 min read","excerpt":"Qualified now integrates with Lever for a more streamlined hiring process.\n","collection":"Qualified","slug":"lever-integration","author":"Ellen Weaver","htmlContent":"<p>We're excited to announce Qualified's integration with Lever's ATS!</p>\n<p>Your hiring process just got better. Qualified's new Lever integration enriches the experience of Lever's dynamite talent relationship management systems. Qualified's Lever integration automates sending candidate assessment invitations based on Lever's Trigger Stages and Tags System.</p>\n<p>While candidates progress through the assessment pipeline, tags automatically update with language like \"Invited\", \"Started\", and \"Submitted\" to best track progress. Instead of toggling between sites, candidates' assessment results automatically populate into Lever's Candidate Notes for a streamlined experience. All of your candidate information, all in one place. Take a closer look at how  you can get started today.</p>\n<h2>Initial Setup</h2>\n<p>Through <a href=\"https://www.lever.co/partners/\">Lever's Partner Program</a>, when you assign a special tag to a job opening or candidate, you will be able to automatically:</p>\n<ul>\n<li>Send assessment invitations to candidates based on their tag</li>\n<li>Update candidates' tags based on their assessment progress</li>\n<li>Receive assessment results directly to Candidate Notes.</li>\n</ul>\n<p><em>Note: If your Qualified subscription does not currently include ATS integration features, contact Qualified's sales team for assistance.</em></p>\n<h3>Step 1: Link your Lever Account</h3>\n<p>If your Qualified subscription includes ATS integration features, simply navigate to the <a href=\"https://www.qualified.io/hire/account/integrations\">Integrations Page</a> within your Qualified account and locate the Lever section.</p>\n<h3>Step 2: Log in to Lever</h3>\n<p>Click on \"Log in to Lever\". You will be redirected to Lever to enter your log in credentials. Logging in connects your Lever account with Qualified. Once logged in, you will be redirected back to the Integrations page on Qualified.</p>\n<h3>Step 3: Activate Trigger Stage</h3>\n<p>Once back to the Integrations page on Qualified, click on the \"Add Trigger Stage\" button.\n<img src=\"//images.ctfassets.net/4ol5sgskowtw/23dwIEHedqCGOtAcqy3b3y/0787903eeababcc19fe49e0dcd99b3c3/Lever_Add_Trigger.png\" alt=\"Lever Activate Trigger State\">\nOn the pop-up that opens, you can choose which stage from your Lever account you want as a \"Trigger Stage.\" Once candidates transition to the chosen Trigger Stage, an assessment invitation will be automatically sent based on their tags.\n<img src=\"//images.ctfassets.net/4ol5sgskowtw/1k9NZSEQVckZ29uuitUSl0/04f92b251213ce15c2ee95c6257a7690/Lever_Trigger_Dialouge.png\" alt=\"Lever Select Trigger Stage\">\n<em>Note: you can only choose from Stages that already exist on your Lever Account.</em></p>\n<h3>Step 4: Enable Webhook</h3>\n<p>Lastly, return to your Lever account and locate the \"Webhooks\" tab in the \"Integrations + API\" section of your account settings. A new webhook directing you to Qualified should exist under \"Candidate Stage Change\". Enable \"Candidate Stage Change\" and your set up is complete.\n<img src=\"//images.ctfassets.net/4ol5sgskowtw/3h3xefoBfL7gzsful9bNi5/20d617551b2c0bc5fd0f108887000c63/Lever_Enable_Webhook.png\" alt=\"Lever Enable Webhook\"></p>\n<h2>Inviting a Candidate to Take an Assessment</h2>\n<p>Once you've successfully linked your Qualified and Lever accounts, selected your Trigger Stage, and enabled the webhook, you're ready to send assessments! Let's walk through how to send your first assessment through Lever.\n<em>Note: If you haven't completed one or more of the aforementioned steps, please revisit \"Initial Setup\" before sending assessments.</em></p>\n<h3>Step 1: Verify Assessment Tag</h3>\n<p>Pay close attention to the Assessment Title you invite candidates to take. You can see the Assessment Title here:\n<img src=\"//images.ctfassets.net/4ol5sgskowtw/6GXdvRUD2EjUfd4354wns3/d2b5f328ede9f5c44574116c491e1d44/Lever_Pay_Attention_to_Assessment.png\" alt=\"Lever Assessment Title\">\nTo invite candidates to take this assessment, add the assessment title as a tag on either 1) the specific candidate or 2) a specific job.\npublished\n<img src=\"//images.ctfassets.net/4ol5sgskowtw/7ubXJkFIpDTyVHEDOQWQ08/ec6de500199976eeabe8ca8f060abd40/Lever_Candidate_Tags.png\" alt=\"Lever Candidate Tags\"></p>\n<h3>Step 2: Transition Candidate to Trigger Stage</h3>\n<p>Once the tag is set, transition the candidates to the trigger stage you selected during the initial integration setup. Candidates should be invited and the tag should change from \"Assessment Title\" to \"Assessment Title - Invited\".\n*Note: only new candidates will be sent an invitation. Existing candidates will be skipped. *</p>\n<h3>Step 3: Tags Update Automatically</h3>\n<p>When a candidate begins the assessment, the assessment tag will change to \"Assessment Title - Started\". Once the assessment is submitted, the tag will change once again to \"Assessment Title - Submitted\". Assessment results will then populated into the Candidate Notes.</p>\n<p>For more information on how to integrate Qualified into Lever, check out our <a href=\"https://docs.qualified.io/integrations/ats-integrations/lever/#inviting-a-candidate-to-take-an-assessment\">docs</a> or contact your Qualified sales associate.</p>\n","tags":"Lever;Integration","body":"We're excited to announce Qualified's integration with Lever's ATS!\n\nYour hiring process just got better. Qualified's new Lever integration enriches the experience of Lever's dynamite talent relationship management systems. Qualified's Lever integration automates sending candidate assessment invitations based on Lever's Trigger Stages and Tags System.\n\nWhile candidates progress through the assessment pipeline, tags automatically update with language like \"Invited\", \"Started\", and \"Submitted\" to best track progress. Instead of toggling between sites, candidates' assessment results automatically populate into Lever's Candidate Notes for a streamlined experience. All of your candidate information, all in one place. Take a closer look at how  you can get started today.\n\n## Initial Setup\nThrough [Lever's Partner Program](https://www.lever.co/partners/), when you assign a special tag to a job opening or candidate, you will be able to automatically:\n- Send assessment invitations to candidates based on their tag\n- Update candidates' tags based on their assessment progress\n- Receive assessment results directly to Candidate Notes.\n\n*Note: If your Qualified subscription does not currently include ATS integration features, contact Qualified's sales team for assistance.*\n\n### Step 1: Link your Lever Account\nIf your Qualified subscription includes ATS integration features, simply navigate to the [Integrations Page](https://www.qualified.io/hire/account/integrations) within your Qualified account and locate the Lever section.\n### Step 2: Log in to Lever\nClick on \"Log in to Lever\". You will be redirected to Lever to enter your log in credentials. Logging in connects your Lever account with Qualified. Once logged in, you will be redirected back to the Integrations page on Qualified.\n### Step 3: Activate Trigger Stage\nOnce back to the Integrations page on Qualified, click on the \"Add Trigger Stage\" button.\n![Lever Activate Trigger State](//images.ctfassets.net/4ol5sgskowtw/23dwIEHedqCGOtAcqy3b3y/0787903eeababcc19fe49e0dcd99b3c3/Lever_Add_Trigger.png)\nOn the pop-up that opens, you can choose which stage from your Lever account you want as a \"Trigger Stage.\" Once candidates transition to the chosen Trigger Stage, an assessment invitation will be automatically sent based on their tags.\n![Lever Select Trigger Stage](//images.ctfassets.net/4ol5sgskowtw/1k9NZSEQVckZ29uuitUSl0/04f92b251213ce15c2ee95c6257a7690/Lever_Trigger_Dialouge.png)\n*Note: you can only choose from Stages that already exist on your Lever Account.*\n### Step 4: Enable Webhook\nLastly, return to your Lever account and locate the \"Webhooks\" tab in the \"Integrations + API\" section of your account settings. A new webhook directing you to Qualified should exist under \"Candidate Stage Change\". Enable \"Candidate Stage Change\" and your set up is complete.\n![Lever Enable Webhook](//images.ctfassets.net/4ol5sgskowtw/3h3xefoBfL7gzsful9bNi5/20d617551b2c0bc5fd0f108887000c63/Lever_Enable_Webhook.png)\n## Inviting a Candidate to Take an Assessment\nOnce you've successfully linked your Qualified and Lever accounts, selected your Trigger Stage, and enabled the webhook, you're ready to send assessments! Let's walk through how to send your first assessment through Lever.\n*Note: If you haven't completed one or more of the aforementioned steps, please revisit \"Initial Setup\" before sending assessments.*\n### Step 1: Verify Assessment Tag\nPay close attention to the Assessment Title you invite candidates to take. You can see the Assessment Title here:\n![Lever Assessment Title](//images.ctfassets.net/4ol5sgskowtw/6GXdvRUD2EjUfd4354wns3/d2b5f328ede9f5c44574116c491e1d44/Lever_Pay_Attention_to_Assessment.png)\nTo invite candidates to take this assessment, add the assessment title as a tag on either 1) the specific candidate or 2) a specific job.\npublished\n![Lever Candidate Tags](//images.ctfassets.net/4ol5sgskowtw/7ubXJkFIpDTyVHEDOQWQ08/ec6de500199976eeabe8ca8f060abd40/Lever_Candidate_Tags.png)\n### Step 2: Transition Candidate to Trigger Stage\nOnce the tag is set, transition the candidates to the trigger stage you selected during the initial integration setup. Candidates should be invited and the tag should change from \"Assessment Title\" to \"Assessment Title - Invited\". \n*Note: only new candidates will be sent an invitation. Existing candidates will be skipped. *\n### Step 3: Tags Update Automatically\nWhen a candidate begins the assessment, the assessment tag will change to \"Assessment Title - Started\". Once the assessment is submitted, the tag will change once again to \"Assessment Title - Submitted\". Assessment results will then populated into the Candidate Notes.\n\nFor more information on how to integrate Qualified into Lever, check out our [docs](https://docs.qualified.io/integrations/ats-integrations/lever/#inviting-a-candidate-to-take-an-assessment) or contact your Qualified sales associate. \n","richBody":null,"description":"Qualified now integrates with Lever for a more streamlined hiring process.","hideHero":true,"publishDate":"2023-01-12T00:00-06:00"},{"prettyDate":"Oct 19, 2022","title":"Why Dev Team Communication Matters During the Onboarding Process","href":"https://www.qualified.io/blog/posts/why-dev-team-communication-matters-during-the-onboarding-process","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/1YTxDIxCYGQbiE6UFrM2FB/5d36bf5e0b06c27ce66a6e59f0341b06/Onboarding_Communication.jpeg?w=100&q=1","length":"","excerpt":"Increase employee retention and job satisfaction by starting out on the right foot. Is your developer onboarding process a positive experience for all?\n","collection":"Work Culture","slug":"why-dev-team-communication-matters-during-the-onboarding-process","author":"Tanhaz Kamaly","htmlContent":"<p>On average, one-third of employees quit within the first <a href=\"https://www.apollotechnical.com/employee-retention-statistics/#:~:text=Employee%20retention%20is%20a%20big,)%20months%2C%20according%20to%20statistics.\">six months</a>.</p><p>A positive on-boarding experience, however, leads to most employees staying with a company for at least <a href=\"https://www.apollotechnical.com/employee-retention-statistics/#:~:text=Employee%20retention%20is%20a%20big,)%20months%2C%20according%20to%20statistics.\">three years</a>. </p><p>The Great Resignation isn't an alarmist fad to be shrugged off, nor does it fall within the \"people nowadays just don't want to work\" narrative. These Great Resignators quitting their jobs <a href=\"https://observer.com/2022/10/the-great-resignation-is-far-from-over-as-unemployed-americans-who-quit-their-jobs-reaches-30-year-high/\">don't stay unemployed</a> -- they find something that they think is better.</p><p>What, then, as an employer can you do to increase retention and keep new hires happy? It (literally) starts with the onboarding process. We all know the basics of onboarding. Setting up accounts, scheduling get-to-know-you meetings, providing acclimation assignments, so on and so forth. At the heart of seemingly standard procedures during onboarding is communication. For employees that are more willing to quit than ever, you need to be prepared for heavy scrutiny and less tolerance for poor organizational management and communication. </p><p>When it comes to communication, you reap what you sow. Leadership sets the standard. If a poor standard is provided, don't be surprised when your employees leave. When communication during onboarding comes off as unclear, inattentive, and unorganized, then the new hire's first impression of the company is tainted and trust is lost. That's why effective communication during your dev's onboarding transition is crucial for their success...and the company's success, too. </p><p>Take a few moments to revisit your onboarding style, your team's communication strategy during onboarding, and consider the impression they may make on a new hire. </p><h2>Evaluate your team's communication process</h2><p>What's working and what's not?</p><p>On the first day of your new developer’s career with your company, start things off right by including them in all communications. This includes everything from email chains, internal messaging, <a href=\"https://www.dialpad.com/uk/guides/call-center-workforce-management/\">call center WFM</a> platform communications, and weekly team update meetings.&nbsp;&nbsp;</p><p>During the onboarding process, the new developer should also receive daily support from their assigned mentor, with co-workers on hand to explain specific company tasks.&nbsp;</p><p>Effective communication means regularly scheduled updates to answer your new hire’s&nbsp; questions and address their concerns. Businesses often hold weekly updates as stand-up or scrum style meetings - where the whole team feeds back on the previous week’s accomplishments, communicates any roadblocks to current development tasks on the <a href=\"https://www.openlegacy.com/solutions/platform/sap-integration\">SAP cloud platform integration suite</a>, and discusses what next week looks like. Establish regular pair coding exercises early on so that your new hire meets the rest of the team quickly.&nbsp;&nbsp;</p><p>As well as whole team meetings, it’s a good idea to use regular one-on-one meetings to check in on your new hires. The start of a successful <a href=\"https://www.codewars.com/post/how-to-begin-a-new-career-as-a-software-engineer\">new software engineer career</a> requires letting your new developer know how they are doing from the beginning, as their skills and career progresses, and to give valuable feedback.&nbsp;</p><p>When looking at your team's communication process, keep in mind that effective communication breeds effective team work. What does this look like within your team? What do you do well? What could be improved?</p><h3>How can effective communication improve effective teamwork?</h3><p>Effective communication in the workplace makes every employee feel included, supported, and respected, regardless of their individual <a href=\"https://www.zentao.pm/blog/4-workplace-communication-styles-and-how-to-navigate-them-1263.html\">workplace communication styles</a>. Communication in work teams enables everyone to be educated on issues that affect their own work, and builds camaraderie, boost morale and trust, and improves employee retention rates.&nbsp;</p><p>Especially in a remote setting, it’s essential that all your employees, but particularly new hires, have their psychological needs met. This means accepting, validating, and understanding their points of view and work efforts. Healthy work relationships create a more stable work environment, and will probably reduce your hiring costs.&nbsp;</p><h2>Create an 'Open' Company Ethos</h2><p>For software development teams, a workplace with diverse team members from different backgrounds, life experiences, and perspectives enable them to respond in an agile way to problems and change. Companies can only benefit from this if a strong culture of workplace communication is in place. Creating a company ethos of openness and encouraging team members to share their ideas helps businesses to make better decisions and drive innovative solutions. Innovation is unlikely to happen in a business lacking open communication.&nbsp;</p><p>Successful self-organizing software development teams thrive on good communication. A good solution for many businesses is to have an open channel from the dev team room, so the whole team can continually communicate with each other.&nbsp;</p><h3>Incorporating Openness into Onboarding</h3><h4>Learning&nbsp;</h4><p>Strive to make your new developer feel welcomed and include opportunities for meaningful interactions with their new teammates. Take the time to learn more about your new employee by asking questions about their working style:</p><ul><li><p>What type of work excites you?</p></li><li><p>How do you like to receive feedback?</p></li><li><p>What’s your preferred method of recognition?</p></li><li><p>How can I support you to do your best work?</p></li><li><p>Do you have a preference on how you schedule your days?</p></li></ul><h4>Initial tasks</h4><p>Depending on which <a href=\"https://www.codewars.com/post/10-different-types-of-software-engineers-a-comprehensive-guide\">type of software engineer</a> you’ve recruited for, the tasks for the initial onboarding week will vary.&nbsp;</p><p>But typically, from day one, or even before day one, the new dev should be introduced to the person they can reach out to when they have technical questions, introduce them to the wider team, and explain initial projects.&nbsp;</p><p>During onboarding week, companies often ask the current dev team to integrate new recruits into their new development workflow by delegating a simple task to complete. This strategy quickly helps the new hire gain a sense of achievement and contribute to production while learning the workflow.</p><p>Tasks can include coding a new algorithm for a feature, rebuilding a dashboard, or updating an existing feature. These initial tasks should have a clear scope and be well-defined to help the new hire avoid frustration in their first week on the job. If you work with a solution like a <a href=\"https://processbliss.com/process-improvement-strategies-for-growth/\">Process Bliss process improvement strategy</a> to document onboarding processes, you can easily tick off tasks and learnings your new hire has completed as you go.&nbsp;</p><h4>Company culture</h4><p>As well as getting involved with dev work, the initial onboarding week is a great opportunity to connect your new hire with others in the company. Consider how your business could do this - perhaps virtual coffee breaks where employees are paired randomly for a quick chat? In a large company, these kinds of communications are invaluable as they help employees in different teams to connect - where they otherwise probably wouldn’t have talked at all.&nbsp;&nbsp;</p><p>Why not introduce regular team get-togethers? These sessions can revolve around demos of coming soon features, hack day, or anything you can think of. Hack days are great for allowing software engineers to take a break from regular sprint-based work cycles, and work on something creative as a team.&nbsp;</p><p>Plan get-togethers that everyone can join, including any remote team members, especially if they are new developers. These events create an opportunity for everyone to share their talents and learnings. A mix of culture-building activities and all team get-togethers will help to promote team spirit and personal relationships at your business, which is a crucial element of helping new developers fit into your team culture.&nbsp;</p><h4>Onboarding logistics</h4><p>Do your best to onboard remote developers as if they were on-site. All onboarding processes can be done digitally, using standard telecommunication tools like a <a href=\"https://www.dialpad.com/uk/features/call-recording/\">call recording service</a>,</p><p>video chat, and online file sharing for sending onboarding documents.&nbsp;&nbsp;</p><p>Becoming part of the team means learning about your business - so during the initial onboarding week, provide your new hire with an introductory course or recommended reading to introduce the company’s history, mission, values, and long-term goals. When remote developers have a clear understanding of the company and its goals, they will feel like they are part of the team. It’s important to help remote developers feel a sense of purpose within the company. If you achieve this, they are more likely to be motivated, loyal, and have overall stronger performance.</p><p>Onboarding is an ongoing process that helps you retain your new developers long-term. Remember that the process will be a lot of information for your new hire to take in, so make sure to check in every week for the first month at least.&nbsp;</p><h2>Tips for onboarding remote developers</h2><p>With more and more businesses adopting remote working practices, we’ve shared some tips on optimizing the process of onboarding remote developers:</p><ul><li><p>Clarify communication expectations from the beginning.</p></li><li><p>If budget allows, provide your new employee with an allowance to purchase the equipment they need to do their best work.&nbsp;</p></li><li><p>Help set boundaries - for example, if your team has flexible working hours, your new hire might receive emails outside of working hours. Address this by reminding them to only respond to emails during work hours. Use tools like </p><p><a href=\"https://www.dialpad.com/uk/features/call-forwarding/\">phone call forwarding</a></p><p> to set out of office responses.&nbsp;</p></li></ul><h2>Keep the communication channels open</h2><p>Communication is essential in agile software development. Through scrum meetings, <a href=\"https://www.zentao.pm/\">information management software</a>, instant messaging, and pair programming, a remote working setup can work exceptionally well - as long as the onboarding process started in the right way. Remember - culture fit will likely be one of the most important deciding factors as to whether your new hire ultimately becomes a successful long-term member of your team.</p><h2>TL;DR</h2><p>The saying is cliche, but evergreen: Communication is key.</p><p>Because it's becoming more and more difficult to retain employees, companies need to ask themselves, 'What can we do to meet the needs of our employees?' The onboarding process is essentially an employee's first impression of their new company, new colleagues, and new culture. It's up to you to make a good (and lasting) impression. You can do this by:</p><ol><li><p>Evaluate your team's communication process</p><ol><li><p>When looking at your team's communication process, keep in mind that effective communication breeds effective team work. What does this look like within your team? What do you do well? What could be improved?</p></li><li><p>Hold regular meetings and schedule one-on-ones to ensure your team (and new hires) are on the same page.</p></li></ol></li><li><p>Create an 'Open' Company Ethos</p><ol><li><p>Be sure to not just preach \"openness\". Practice it from start to finish. This means incorporating that ethos into a new hire's learning phase and initial task. For remote companies, this means creating an onboarding process that feels connective, as if everything were happening on site. </p></li><li><p>Check in with your new hires often. The onboarding process can be overwhelming. In order to seem like they 'have it together', new hires may not be eager to admit when they're struggling.</p></li></ol></li></ol><p></p>","tags":null,"body":"","richBody":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"On average, one-third of employees quit within the first \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.apollotechnical.com/employee-retention-statistics/#:~:text=Employee%20retention%20is%20a%20big,)%20months%2C%20according%20to%20statistics.\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"six months\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\".\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"A positive on-boarding experience, however, leads to most employees staying with a company for at least \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.apollotechnical.com/employee-retention-statistics/#:~:text=Employee%20retention%20is%20a%20big,)%20months%2C%20according%20to%20statistics.\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"three years\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\". \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"The Great Resignation isn't an alarmist fad to be shrugged off, nor does it fall within the \\\"people nowadays just don't want to work\\\" narrative. These Great Resignators quitting their jobs \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://observer.com/2022/10/the-great-resignation-is-far-from-over-as-unemployed-americans-who-quit-their-jobs-reaches-30-year-high/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"don't stay unemployed\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" -- they find something that they think is better.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"What, then, as an employer can you do to increase retention and keep new hires happy? It (literally) starts with the onboarding process. We all know the basics of onboarding. Setting up accounts, scheduling get-to-know-you meetings, providing acclimation assignments, so on and so forth. At the heart of seemingly standard procedures during onboarding is communication. For employees that are more willing to quit than ever, you need to be prepared for heavy scrutiny and less tolerance for poor organizational management and communication. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"When it comes to communication, you reap what you sow. Leadership sets the standard. If a poor standard is provided, don't be surprised when your employees leave. When communication during onboarding comes off as unclear, inattentive, and unorganized, then the new hire's first impression of the company is tainted and trust is lost. That's why effective communication during your dev's onboarding transition is crucial for their success...and the company's success, too. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Take a few moments to revisit your onboarding style, your team's communication strategy during onboarding, and consider the impression they may make on a new hire. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Evaluate your team's communication process\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"What's working and what's not?\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"On the first day of your new developer’s career with your company, start things off right by including them in all communications. This includes everything from email chains, internal messaging, \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.dialpad.com/uk/guides/call-center-workforce-management/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"call center WFM\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" platform communications, and weekly team update meetings.  \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"During the onboarding process, the new developer should also receive daily support from their assigned mentor, with co-workers on hand to explain specific company tasks. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Effective communication means regularly scheduled updates to answer your new hire’s  questions and address their concerns. Businesses often hold weekly updates as stand-up or scrum style meetings - where the whole team feeds back on the previous week’s accomplishments, communicates any roadblocks to current development tasks on the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.openlegacy.com/solutions/platform/sap-integration\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"SAP cloud platform integration suite\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", and discusses what next week looks like. Establish regular pair coding exercises early on so that your new hire meets the rest of the team quickly.  \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"As well as whole team meetings, it’s a good idea to use regular one-on-one meetings to check in on your new hires. The start of a successful \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.codewars.com/post/how-to-begin-a-new-career-as-a-software-engineer\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"new software engineer career\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" requires letting your new developer know how they are doing from the beginning, as their skills and career progresses, and to give valuable feedback. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"When looking at your team's communication process, keep in mind that effective communication breeds effective team work. What does this look like within your team? What do you do well? What could be improved?\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"How can effective communication improve effective teamwork?\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Effective communication in the workplace makes every employee feel included, supported, and respected, regardless of their individual \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.zentao.pm/blog/4-workplace-communication-styles-and-how-to-navigate-them-1263.html\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"workplace communication styles\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\". Communication in work teams enables everyone to be educated on issues that affect their own work, and builds camaraderie, boost morale and trust, and improves employee retention rates. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"metadata\":{\"tags\":[]},\"sys\":{\"space\":{\"sys\":{\"type\":\"Link\",\"linkType\":\"Space\",\"id\":\"4ol5sgskowtw\"}},\"id\":\"6WV7T6HRbR0YSWC1yTts5a\",\"type\":\"Asset\",\"createdAt\":\"2022-10-19T14:57:47.209Z\",\"updatedAt\":\"2022-10-19T14:57:47.209Z\",\"environment\":{\"sys\":{\"id\":\"master\",\"type\":\"Link\",\"linkType\":\"Environment\"}},\"revision\":1,\"locale\":\"en-US\"},\"fields\":{\"title\":\"DialPad1\",\"description\":\"Free to use image sourced from Pexels \",\"file\":{\"url\":\"//images.ctfassets.net/4ol5sgskowtw/6WV7T6HRbR0YSWC1yTts5a/09d2be40751cbd927e9d56fb41f8fc5b/DialPad1.png\",\"details\":{\"size\":2004530,\"image\":{\"width\":1600,\"height\":1068}},\"fileName\":\"DialPad1.png\",\"contentType\":\"image/png\"}}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Especially in a remote setting, it’s essential that all your employees, but particularly new hires, have their psychological needs met. This means accepting, validating, and understanding their points of view and work efforts. Healthy work relationships create a more stable work environment, and will probably reduce your hiring costs. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Create an 'Open' Company Ethos\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"For software development teams, a workplace with diverse team members from different backgrounds, life experiences, and perspectives enable them to respond in an agile way to problems and change. Companies can only benefit from this if a strong culture of workplace communication is in place. Creating a company ethos of openness and encouraging team members to share their ideas helps businesses to make better decisions and drive innovative solutions. Innovation is unlikely to happen in a business lacking open communication. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Successful self-organizing software development teams thrive on good communication. A good solution for many businesses is to have an open channel from the dev team room, so the whole team can continually communicate with each other. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Incorporating Openness into Onboarding\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-4\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Learning \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Strive to make your new developer feel welcomed and include opportunities for meaningful interactions with their new teammates. Take the time to learn more about your new employee by asking questions about their working style:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"What type of work excites you?\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"How do you like to receive feedback?\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"What’s your preferred method of recognition?\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"How can I support you to do your best work?\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Do you have a preference on how you schedule your days?\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"heading-4\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Initial tasks\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Depending on which \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.codewars.com/post/10-different-types-of-software-engineers-a-comprehensive-guide\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"type of software engineer\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" you’ve recruited for, the tasks for the initial onboarding week will vary. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"But typically, from day one, or even before day one, the new dev should be introduced to the person they can reach out to when they have technical questions, introduce them to the wider team, and explain initial projects. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"During onboarding week, companies often ask the current dev team to integrate new recruits into their new development workflow by delegating a simple task to complete. This strategy quickly helps the new hire gain a sense of achievement and contribute to production while learning the workflow.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Tasks can include coding a new algorithm for a feature, rebuilding a dashboard, or updating an existing feature. These initial tasks should have a clear scope and be well-defined to help the new hire avoid frustration in their first week on the job. If you work with a solution like a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://processbliss.com/process-improvement-strategies-for-growth/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Process Bliss process improvement strategy\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" to document onboarding processes, you can easily tick off tasks and learnings your new hire has completed as you go. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-4\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Company culture\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"As well as getting involved with dev work, the initial onboarding week is a great opportunity to connect your new hire with others in the company. Consider how your business could do this - perhaps virtual coffee breaks where employees are paired randomly for a quick chat? In a large company, these kinds of communications are invaluable as they help employees in different teams to connect - where they otherwise probably wouldn’t have talked at all.  \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Why not introduce regular team get-togethers? These sessions can revolve around demos of coming soon features, hack day, or anything you can think of. Hack days are great for allowing software engineers to take a break from regular sprint-based work cycles, and work on something creative as a team. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"metadata\":{\"tags\":[]},\"sys\":{\"space\":{\"sys\":{\"type\":\"Link\",\"linkType\":\"Space\",\"id\":\"4ol5sgskowtw\"}},\"id\":\"oISp8MLvx0zmainlO5OWP\",\"type\":\"Asset\",\"createdAt\":\"2022-10-19T15:00:26.561Z\",\"updatedAt\":\"2022-10-19T15:00:26.561Z\",\"environment\":{\"sys\":{\"id\":\"master\",\"type\":\"Link\",\"linkType\":\"Environment\"}},\"revision\":1,\"locale\":\"en-US\"},\"fields\":{\"title\":\"DailPad2\",\"description\":\"\",\"file\":{\"url\":\"//images.ctfassets.net/4ol5sgskowtw/oISp8MLvx0zmainlO5OWP/61115b6522b533068abd96139d258b1c/DailPad2.png\",\"details\":{\"size\":1777983,\"image\":{\"width\":1600,\"height\":1067}},\"fileName\":\"DailPad2.png\",\"contentType\":\"image/png\"}}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Plan get-togethers that everyone can join, including any remote team members, especially if they are new developers. These events create an opportunity for everyone to share their talents and learnings. A mix of culture-building activities and all team get-togethers will help to promote team spirit and personal relationships at your business, which is a crucial element of helping new developers fit into your team culture. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-4\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Onboarding logistics\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Do your best to onboard remote developers as if they were on-site. All onboarding processes can be done digitally, using standard telecommunication tools like a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.dialpad.com/uk/features/call-recording/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"call recording service\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\",\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"video chat, and online file sharing for sending onboarding documents.  \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Becoming part of the team means learning about your business - so during the initial onboarding week, provide your new hire with an introductory course or recommended reading to introduce the company’s history, mission, values, and long-term goals. When remote developers have a clear understanding of the company and its goals, they will feel like they are part of the team. It’s important to help remote developers feel a sense of purpose within the company. If you achieve this, they are more likely to be motivated, loyal, and have overall stronger performance.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Onboarding is an ongoing process that helps you retain your new developers long-term. Remember that the process will be a lot of information for your new hire to take in, so make sure to check in every week for the first month at least. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Tips for onboarding remote developers\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"With more and more businesses adopting remote working practices, we’ve shared some tips on optimizing the process of onboarding remote developers:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Clarify communication expectations from the beginning.\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"If budget allows, provide your new employee with an allowance to purchase the equipment they need to do their best work. \",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Help set boundaries - for example, if your team has flexible working hours, your new hire might receive emails outside of working hours. Address this by reminding them to only respond to emails during work hours. Use tools like \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.dialpad.com/uk/features/call-forwarding/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"phone call forwarding\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\" to set out of office responses. \",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Keep the communication channels open\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Communication is essential in agile software development. Through scrum meetings, \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.zentao.pm/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"information management software\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", instant messaging, and pair programming, a remote working setup can work exceptionally well - as long as the onboarding process started in the right way. Remember - culture fit will likely be one of the most important deciding factors as to whether your new hire ultimately becomes a successful long-term member of your team.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"TL;DR\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"The saying is cliche, but evergreen: Communication is key.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Because it's becoming more and more difficult to retain employees, companies need to ask themselves, 'What can we do to meet the needs of our employees?' The onboarding process is essentially an employee's first impression of their new company, new colleagues, and new culture. It's up to you to make a good (and lasting) impression. You can do this by:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"ordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Evaluate your team's communication process\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"ordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"When looking at your team's communication process, keep in mind that effective communication breeds effective team work. What does this look like within your team? What do you do well? What could be improved?\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Hold regular meetings and schedule one-on-ones to ensure your team (and new hires) are on the same page.\",\"marks\":[],\"data\":{}}]}]}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Create an 'Open' Company Ethos\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"ordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Be sure to not just preach \\\"openness\\\". Practice it from start to finish. This means incorporating that ethos into a new hire's learning phase and initial task. For remote companies, this means creating an onboarding process that feels connective, as if everything were happening on site. \",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Check in with your new hires often. The onboarding process can be overwhelming. In order to seem like they 'have it together', new hires may not be eager to admit when they're struggling.\",\"marks\":[],\"data\":{}}]}]}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]}]}","description":"Increase employee retention and job satisfaction by starting out on the right foot. Is your developer onboarding process a positive experience for all? ","hideHero":false,"publishDate":"2022-10-19T00:00-05:00"},{"prettyDate":"Sep 29, 2022","title":"The Developer Interview Process is Flawed","href":"https://www.qualified.io/blog/posts/the-developer-interview-process-is-flawed","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/750d0tEsXaaFSwZg0SU0OO/27b0eeef3c6184c1271e027a3c457f11/AdobeStock_109843675.jpeg?w=100&q=1","length":"","excerpt":"Bias against interview anxiety is harmful in more ways than one. Creating a comfortable space for interviewees and checking your judgement at the door pays dividends.\n","collection":"Hiring","slug":"the-developer-interview-process-is-flawed","author":"Ellen Weaver","htmlContent":"<p>Years ago, I was once so anxious during a job interview that when the hiring manager asked the classic question <i>What are you weaknesses? </i>I froze, stuttered, and listed out all of my actual weaknesses like I was at confession. The fastidiously studied job description was no help to me now.</p><p>Now, I had prepared a cliché answer for a cliché question. I'm assuming it was something vaguely facetious that pointed to the burden of being a \"perfectionist\", but my interview-brain went offline. The hiring manager couldn't fault me for my honesty.</p><p>No, I didn't get a call back.</p><p>Turns out, I wasn't alone. <a href=\"https://www.jdp.com/blog/how-to-prepare-for-interviews-2020/#:~:text=It's%20no%20wonder%20an%20overwhelming,anxiety%20related%20to%20job%20interviews.\">93 percent</a> of people experience anxiety related to job interviews. It's a sympathetic statistic. The feeling of being on the other side of the desk (or Zoom call) proving your worth to a near-stranger, whose job is to determine your professional and financial future at said company, all while maintaining a confident and friendly disposition is nearly impossible. From the first to final interview, it's not a feeling easily shaken.</p><p>Interview anxiety is detrimental to not only the candidate but to the company, too. Companies pass over countless talented candidates because of the symptoms of anxiety, potentially missing out on a great hires. The developer interview process is flawed.</p><h2>Interview Anxiety Drains the Hiring Pool</h2><p>It's been documented <a href=\"https://psycnet.apa.org/record/2012-23271-001\">time</a> and <a href=\"https://psycnet.apa.org/record/2004-18860-002\">time</a> again that job candidates presenting high indicators of anxiety are less likely to receive job offers compared to their non-anxious competitors. </p><p>When experiencing anxiety, candidates' ability to interview to the best of their abilities run risk of being harmed. During interviews, anxiety can manifest in many ways. From shaky hands and a rapid heart beat to decreased confidence and forgetfulness,  anxiety during interviews is a hurdle that even the most experienced developers face. Sure, candidates can prep themselves by remembering the basics: hold eye contact, take deep breaths, keep engaged body language, have a career coach conduct a mock, maybe even throw in a power pose if that's your thing. In reality, though, that's not always enough.</p><p>It's easy to make a judgement on first impressions. Take the <a href=\"https://en.wikipedia.org/wiki/Halo_effect\">Halo Effect</a> for example. The Halo Effect is a cognitive bias that informs an entire value-assumption based on how a person presents themselves in a single area. Specifically, if a candidate appears at-ease, personable, and amicable, the interviewer may assign positive value to all areas of a candidate's performance, even if undeserving. </p><p>The inverse of this, Horn Effect, is when first impressions are negative, and this negatively informs every other aspect of the interview. For the sake of this argument, let's say a poor first impression during a job interview is caused by anxiety while interviewing, and the rest of the candidate's performance is negatively perceived. Doesn't seem very fair, does it?</p><p>I know we all like to think that certainly <i>our </i>judgement isn't so shallow. We have the empathy to look past interview jitters and mistakes made out of nervousness. But interviewing takes time, and time is money. Wasted time is wasted money. It's easy to discard a candidate based on ill-informed first impressions and use time efficiency as the scapegoat. Really, this hiring practice is encouraged.</p><p>A study out of Northern Illinois University's Department of Psychology set out to find the correlation between interview anxiety and job competency. As discussed earlier, candidates experiencing anxiety are less likely to get hired, but does that mean that anxious candidates would actually perform poorly on the job? </p><p>This study found that job interview anxiety was <i>not</i> indicative of a candidates' ability to perform a job, even though many companies, whether consciously or unconsciously, have treated it as such.</p><p>It seems obvious, right? By quelling anxiety among interviewees, the hiring pool suddenly expands. The question all interviewers and companies should ask themselves is, \"How can I make this process better?\" </p><p>It's the responsibility of the interviewer to set the tone of an interview, but as a hiring manager, how can you be sure you're creating an interview process that helps candidates thrive?</p><h2>Going Deeper: 'Psychologically Safe' Interviews</h2><p><a href=\"https://amycedmondson.com/psychological-safety/\">Psychological Safety</a> is typically understood as a workplace culture strategy to improve group learning, resulting in more <a href=\"https://rework.withgoogle.com/print/guides/5721312655835136/\">effective teams</a>. Its textbook definition is \"a shared belief held by members of a team that the team is safe for interpersonal risk taking.\" </p><p>When applied in professional contexts, it looks like a group of people that comfortably seek honest feedback, ask for help, share new information, admit error, and discuss new ideas without fear of disrupting status quo. It's a framework that encourages humans to be humans, not a perfect work-horses. Psychological safety sets out to quell the fear of interpersonal rejection.</p><p>In <a href=\"https://www.qualified.io/blog/posts/psychological-safety-the-top-indicator-for-effective-teams\">this article</a>, Qualified underscores the importance of facilitating psychological safety. It discusses that often times \"[A team member's] desire to save face is greater than their desire to take a risk. This threat rigidity reduces cognitive behavior in ways related to flexibility and responsiveness, resulting in a lack of willingness to engage in team activities like problem solving, ultimately hindering the team's collective learning.\"</p><p>Psychological safety isn't a process that can be replicated overnight. </p><p>Some teams never achieve it at all, so what does this have to do with interviewing? <i>Rejection</i> is the consequence all interviewees are trying to avoid. It's at the very heart of the anxieties experienced during job interviews. </p><p>For the interviewee, a fear of rejection manifests in agreeable, manicured answers that prevent 1) the candidate from showing authenticity during the job interview and 2) the interviewer from fully assessing the candidate.</p><p>It does, however, feel counterintuitive for an interviewer to be receptive of \"incorrect\" answers from an interviewee. The point of an interview is to sift out the wheat from the chaff and find the best candidate for the position, right? Rejection is inevitable. </p><p>The interviewee should come prepared and if they're the right fit, they'll do fine in the interview. To be fair, if I was interviewing a candidate and asked them \"What are your weaknesses\", and they out-right told me each and every weakness, I wouldn't have hired them either.</p><p>They key is to act with some compassion. If an interviewee slips up while answering interview questions, are you immediately forming a negative opinion or reacting coldly, or are you opening up a space for them to regain footing and thoughtfully reform their answer? </p><p>Creating a psychologically safe space is, after all, creating an environment that discourages perfection and encourages humanity. Psychologically safe interviews help candidates show their true potential by reducing interview anxiety, while simultaneously creating a larger hiring pool for companies.</p><h2>Reducing Anxiety Through Developer Assessments</h2><p>While Qualified's product is marketed towards the people that <i>do </i>the hiring, it's designed by developers with developers in mind. </p><p>While making hiring decisions, it's vital to take into account candidate experience. Software development is a career path that attracts introverts. Development is an industry that requires the ability to work independently for large chunks of time, and introverts thrive in these positions. This isn't a sweeping generalization. Not all programmers are introverts, of course not, but the hiring process for introverted candidates can feel a bit more treacherous...which comes with increased anxiety.</p><p>It's been <a href=\"https://hbr.org/1964/01/strategies-of-effective-interviewing\">studied</a> that to conduct successful interviews, the interviewer must allot some time for the interviewee to adjust to their new environment. The study goes on to say that, \"The situation is new for the interviewee; it may be his or her first experience of this kind. Unless there is a specified adaptation period, the interviewee may be unable to reduce his or her level of anxiety, with the resulting loss of the entire session. Part of this adaptive process is familiarization with the surroundings. It is an often overlooked truism that whenever an individual is placed in a strange situation, he (or she) becomes apprehensive.\" </p><p>Imagine a process where there is no need for an adjustment period, a process where developers can perform to their best of their abilities in the comfort of their homes. That's where Qualified comes in.</p><p>Qualified's developer assessments product levels the playing field for job candidates, especially those who's social prowess isn't as strong as extroverts. Our assessments replace on-site skills testing and lengthy white boarding sessions without losing insight to how developers work.</p><p>Qualified’s <a href=\"https://www.qualified.io/features\">suite of code review tools</a> automate assessment scoring, provide insightful benchmarking statistics, and check for code similarity to ensure original work. Pair-programming interviews and code playback recreates observing a developer in-person without the anxieties that come formal interviews.</p><p>Qualified's assessments allow candidates to work comfortably from their own home while proving their ability. It's an anxiety-reducing hiring tool that sets the stage for future team success.</p><h2>Conclusion</h2><p>Where it stands now, the job interview process is flawed and puts more importance on first impressions and status quo rather than taking the time to understand a candidates strengths. </p><p>By understanding how cognitive biases against anxiety restrict hiring pools, introducing an environment that reduces fear of rejection and encourages authenticity, and incorporating developer-friendly assessments, interviews can become truly indicative of how a person performs on the job and creates positive experiences all-around.</p><p>Interview anxiety will never go away, and candidates may continue to be too literal about their weaknesses, but creating a positive interview experience will benefit the candidate and your company.</p>","tags":null,"body":"","richBody":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Years ago, I was once so anxious during a job interview that when the hiring manager asked the classic question \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"What are you weaknesses? \",\"marks\":[{\"type\":\"italic\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"I froze, stuttered, and listed out all of my actual weaknesses like I was at confession. The fastidiously studied job description was no help to me now.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Now, I had prepared a cliché answer for a cliché question. I'm assuming it was something vaguely facetious that pointed to the burden of being a \\\"perfectionist\\\", but my interview-brain went offline. The hiring manager couldn't fault me for my honesty.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"No, I didn't get a call back.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Turns out, I wasn't alone. \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.jdp.com/blog/how-to-prepare-for-interviews-2020/#:~:text=It's%20no%20wonder%20an%20overwhelming,anxiety%20related%20to%20job%20interviews.\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"93 percent\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" of people experience anxiety related to job interviews. It's a sympathetic statistic. The feeling of being on the other side of the desk (or Zoom call) proving your worth to a near-stranger, whose job is to determine your professional and financial future at said company, all while maintaining a confident and friendly disposition is nearly impossible. From the first to final interview, it's not a feeling easily shaken.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Interview anxiety is detrimental to not only the candidate but to the company, too. Companies pass over countless talented candidates because of the symptoms of anxiety, potentially missing out on a great hires. The developer interview process is flawed.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Interview Anxiety Drains the Hiring Pool\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"metadata\":{\"tags\":[]},\"sys\":{\"space\":{\"sys\":{\"type\":\"Link\",\"linkType\":\"Space\",\"id\":\"4ol5sgskowtw\"}},\"id\":\"11gk6CLeB1q7MjbEvs0kto\",\"type\":\"Asset\",\"createdAt\":\"2022-09-29T18:32:17.007Z\",\"updatedAt\":\"2022-09-29T18:32:17.007Z\",\"environment\":{\"sys\":{\"id\":\"master\",\"type\":\"Link\",\"linkType\":\"Environment\"}},\"revision\":1,\"locale\":\"en-US\"},\"fields\":{\"title\":\"Hiring Pool\",\"description\":\"Hiring Pool Illustration\",\"file\":{\"url\":\"//images.ctfassets.net/4ol5sgskowtw/11gk6CLeB1q7MjbEvs0kto/3ed992ee2e5eeb7e2183ff6259e6d7c8/AdobeStock_109843675.jpeg\",\"details\":{\"size\":923967,\"image\":{\"width\":4582,\"height\":3273}},\"fileName\":\"AdobeStock_109843675.jpeg\",\"contentType\":\"image/jpeg\"}}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"It's been documented \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://psycnet.apa.org/record/2012-23271-001\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"time\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" and \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://psycnet.apa.org/record/2004-18860-002\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"time\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" again that job candidates presenting high indicators of anxiety are less likely to receive job offers compared to their non-anxious competitors. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"When experiencing anxiety, candidates' ability to interview to the best of their abilities run risk of being harmed. During interviews, anxiety can manifest in many ways. From shaky hands and a rapid heart beat to decreased confidence and forgetfulness,  anxiety during interviews is a hurdle that even the most experienced developers face. Sure, candidates can prep themselves by remembering the basics: hold eye contact, take deep breaths, keep engaged body language, have a career coach conduct a mock, maybe even throw in a power pose if that's your thing. In reality, though, that's not always enough.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"It's easy to make a judgement on first impressions. Take the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://en.wikipedia.org/wiki/Halo_effect\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Halo Effect\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" for example. The Halo Effect is a cognitive bias that informs an entire value-assumption based on how a person presents themselves in a single area. Specifically, if a candidate appears at-ease, personable, and amicable, the interviewer may assign positive value to all areas of a candidate's performance, even if undeserving. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"The inverse of this, Horn Effect, is when first impressions are negative, and this negatively informs every other aspect of the interview. For the sake of this argument, let's say a poor first impression during a job interview is caused by anxiety while interviewing, and the rest of the candidate's performance is negatively perceived. Doesn't seem very fair, does it?\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"I know we all like to think that certainly \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"our \",\"marks\":[{\"type\":\"italic\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"judgement isn't so shallow. We have the empathy to look past interview jitters and mistakes made out of nervousness. But interviewing takes time, and time is money. Wasted time is wasted money. It's easy to discard a candidate based on ill-informed first impressions and use time efficiency as the scapegoat. Really, this hiring practice is encouraged.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"A study out of Northern Illinois University's Department of Psychology set out to find the correlation between interview anxiety and job competency. As discussed earlier, candidates experiencing anxiety are less likely to get hired, but does that mean that anxious candidates would actually perform poorly on the job? \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"This study found that job interview anxiety was \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"not\",\"marks\":[{\"type\":\"italic\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" indicative of a candidates' ability to perform a job, even though many companies, whether consciously or unconsciously, have treated it as such.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"It seems obvious, right? By quelling anxiety among interviewees, the hiring pool suddenly expands. The question all interviewers and companies should ask themselves is, \\\"How can I make this process better?\\\" \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"It's the responsibility of the interviewer to set the tone of an interview, but as a hiring manager, how can you be sure you're creating an interview process that helps candidates thrive?\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Going Deeper: 'Psychologically Safe' Interviews\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"metadata\":{\"tags\":[]},\"sys\":{\"space\":{\"sys\":{\"type\":\"Link\",\"linkType\":\"Space\",\"id\":\"4ol5sgskowtw\"}},\"id\":\"AwTryuHtH4HBbM4kQ56uW\",\"type\":\"Asset\",\"createdAt\":\"2022-09-29T18:33:17.802Z\",\"updatedAt\":\"2022-09-29T18:33:17.802Z\",\"environment\":{\"sys\":{\"id\":\"master\",\"type\":\"Link\",\"linkType\":\"Environment\"}},\"revision\":1,\"locale\":\"en-US\"},\"fields\":{\"title\":\"Psychological Safety v2\",\"description\":\"Psychological Safety v2, Adobe Stock\",\"file\":{\"url\":\"//images.ctfassets.net/4ol5sgskowtw/AwTryuHtH4HBbM4kQ56uW/35bd694927a53f841262f0aaba8eba1d/AdobeStock_394944783.jpeg\",\"details\":{\"size\":5035496,\"image\":{\"width\":5000,\"height\":3750}},\"fileName\":\"AdobeStock_394944783.jpeg\",\"contentType\":\"image/jpeg\"}}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://amycedmondson.com/psychological-safety/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Psychological Safety\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" is typically understood as a workplace culture strategy to improve group learning, resulting in more \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://rework.withgoogle.com/print/guides/5721312655835136/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"effective teams\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\". Its textbook definition is \\\"a shared belief held by members of a team that the team is safe for interpersonal risk taking.\\\" \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"When applied in professional contexts, it looks like a group of people that comfortably seek honest feedback, ask for help, share new information, admit error, and discuss new ideas without fear of disrupting status quo. It's a framework that encourages humans to be humans, not a perfect work-horses. Psychological safety sets out to quell the fear of interpersonal rejection.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"In \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.qualified.io/blog/posts/psychological-safety-the-top-indicator-for-effective-teams\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"this article\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", Qualified underscores the importance of facilitating psychological safety. It discusses that often times \\\"[A team member's] desire to save face is greater than their desire to take a risk. This threat rigidity reduces cognitive behavior in ways related to flexibility and responsiveness, resulting in a lack of willingness to engage in team activities like problem solving, ultimately hindering the team's collective learning.\\\"\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Psychological safety isn't a process that can be replicated overnight. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Some teams never achieve it at all, so what does this have to do with interviewing? \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Rejection\",\"marks\":[{\"type\":\"italic\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" is the consequence all interviewees are trying to avoid. It's at the very heart of the anxieties experienced during job interviews. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"For the interviewee, a fear of rejection manifests in agreeable, manicured answers that prevent 1) the candidate from showing authenticity during the job interview and 2) the interviewer from fully assessing the candidate.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"It does, however, feel counterintuitive for an interviewer to be receptive of \\\"incorrect\\\" answers from an interviewee. The point of an interview is to sift out the wheat from the chaff and find the best candidate for the position, right? Rejection is inevitable. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"The interviewee should come prepared and if they're the right fit, they'll do fine in the interview. To be fair, if I was interviewing a candidate and asked them \\\"What are your weaknesses\\\", and they out-right told me each and every weakness, I wouldn't have hired them either.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"They key is to act with some compassion. If an interviewee slips up while answering interview questions, are you immediately forming a negative opinion or reacting coldly, or are you opening up a space for them to regain footing and thoughtfully reform their answer? \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Creating a psychologically safe space is, after all, creating an environment that discourages perfection and encourages humanity. Psychologically safe interviews help candidates show their true potential by reducing interview anxiety, while simultaneously creating a larger hiring pool for companies.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Reducing Anxiety Through Developer Assessments\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"metadata\":{\"tags\":[]},\"sys\":{\"space\":{\"sys\":{\"type\":\"Link\",\"linkType\":\"Space\",\"id\":\"4ol5sgskowtw\"}},\"id\":\"67DbnqPaJu0GaUPg9fqBJy\",\"type\":\"Asset\",\"createdAt\":\"2022-09-29T18:33:58.244Z\",\"updatedAt\":\"2022-09-29T18:33:58.244Z\",\"environment\":{\"sys\":{\"id\":\"master\",\"type\":\"Link\",\"linkType\":\"Environment\"}},\"revision\":1,\"locale\":\"en-US\"},\"fields\":{\"title\":\"Relaxed Dev\",\"description\":\"Relaxed Dev, Adobe Stock\",\"file\":{\"url\":\"//images.ctfassets.net/4ol5sgskowtw/67DbnqPaJu0GaUPg9fqBJy/3ab48b64a43d102ffd936bf996f36b28/AdobeStock_181982639.jpeg\",\"details\":{\"size\":849987,\"image\":{\"width\":4134,\"height\":3628}},\"fileName\":\"AdobeStock_181982639.jpeg\",\"contentType\":\"image/jpeg\"}}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"While Qualified's product is marketed towards the people that \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"do \",\"marks\":[{\"type\":\"italic\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"the hiring, it's designed by developers with developers in mind. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"While making hiring decisions, it's vital to take into account candidate experience. Software development is a career path that attracts introverts. Development is an industry that requires the ability to work independently for large chunks of time, and introverts thrive in these positions. This isn't a sweeping generalization. Not all programmers are introverts, of course not, but the hiring process for introverted candidates can feel a bit more treacherous...which comes with increased anxiety.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"It's been \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://hbr.org/1964/01/strategies-of-effective-interviewing\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"studied\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" that to conduct successful interviews, the interviewer must allot some time for the interviewee to adjust to their new environment. The study goes on to say that, \\\"The situation is new for the interviewee; it may be his or her first experience of this kind. Unless there is a specified adaptation period, the interviewee may be unable to reduce his or her level of anxiety, with the resulting loss of the entire session. Part of this adaptive process is familiarization with the surroundings. It is an often overlooked truism that whenever an individual is placed in a strange situation, he (or she) becomes apprehensive.\\\" \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Imagine a process where there is no need for an adjustment period, a process where developers can perform to their best of their abilities in the comfort of their homes. That's where Qualified comes in.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Qualified's developer assessments product levels the playing field for job candidates, especially those who's social prowess isn't as strong as extroverts. Our assessments replace on-site skills testing and lengthy white boarding sessions without losing insight to how developers work.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Qualified’s \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.qualified.io/features\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"suite of code review tools\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" automate assessment scoring, provide insightful benchmarking statistics, and check for code similarity to ensure original work. Pair-programming interviews and code playback recreates observing a developer in-person without the anxieties that come formal interviews.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Qualified's assessments allow candidates to work comfortably from their own home while proving their ability. It's an anxiety-reducing hiring tool that sets the stage for future team success.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Conclusion\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Where it stands now, the job interview process is flawed and puts more importance on first impressions and status quo rather than taking the time to understand a candidates strengths. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"By understanding how cognitive biases against anxiety restrict hiring pools, introducing an environment that reduces fear of rejection and encourages authenticity, and incorporating developer-friendly assessments, interviews can become truly indicative of how a person performs on the job and creates positive experiences all-around.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Interview anxiety will never go away, and candidates may continue to be too literal about their weaknesses, but creating a positive interview experience will benefit the candidate and your company.\",\"marks\":[],\"data\":{}}]}]}","description":"Bias against interview anxiety is harmful in more ways than one. Creating a comfortable space for interviewees and checking your judgement at the door pays dividends.","hideHero":false,"publishDate":"2022-09-29T00:00-05:00"},{"prettyDate":"Aug 24, 2022","title":"Psychological Safety: The top indicator for effective teams","href":"https://www.qualified.io/blog/posts/psychological-safety-the-top-indicator-for-effective-teams","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/1U8DX7RTtAzlhm5Et6Pb60/2e52c0019b3d2c944aed7197b9c3283f/AdobeStock_346764682.jpeg?w=100&q=1","length":"","excerpt":"Psychological safety: it's more than just a buzzword. Research cuts through the seemingly glib corporate speak to reveal what your team might actually be missing.\n","collection":"Work Culture","slug":"psychological-safety-the-top-indicator-for-effective-teams","author":"Ellen Weaver","htmlContent":"<p>Managers rarely have a cut and dry list of responsibilities. When rising through the ranks of software engineering, developers make the transition from software problem solving to people problem solving. On top of that, when working in a field that requires knowledge intensive work (like software development), successful performance depends on coalescing different ideas and experiences. That rarely happens naturally. Managers need to facilitate it.</p><p>The term 'psychological safety' feels like a buzzword that floats around leadership conferences. The corporate-speak that's been dominating About Us pages for years is getting another vocabulary word added to its seemingly endless list. </p><p>For some, psychological safety sounds like a made up term that feeds into the dwindling mental fortitude of today's workforce. For others, psychological safety is topping 'Must Have' lists when vetting potential employers. In <a href=\"https://www.jstor.org/stable/2666999#metadata_info_tab_contents\">academia</a>, it's \"a shared belief held by members of a team that the team is safe for interpersonal risk taking.” However, whether recognized by managers or not, psychological safety is a top indicator of team success in the workplace. </p><p>Creating a psychologically safe work culture isn't a stroke of luck or the product of a flashy benefits package. It's a human-oriented architecture built by managers to foster openness in the workplace. </p><p>As is the nature of the job, software developers work within a team. Studies show that collaborative <a href=\"https://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html\">group work </a>results in faster innovation, happier employees, and increased profitability. Dated operational beliefs lean solely on team structure for success, in part because of a cognitive bias that favors current routines over new alternatives. </p><p>These architectures are used because of believed advantages for efficiency and productivity. While proven true, what if managers could take team effectiveness a step further? Structural architecture plays a role in productivity, yes, but that structure is nothing without the <i>humans</i> that fill the roles. Psychological safety is what people need to excel at team work.</p><hr><h2>How does Psychological Safety work?</h2><p>Team psychological safety is a construct coined by <a href=\"https://www.hbs.edu/faculty/Pages/profile.aspx?facId=6451\">Amy Edmundson</a>, Novartis Professor of Leadership and Management at Harvard Business School, that examines the importance of openness and trust for improving team learning — and performance. </p><p>Like stated earlier, psychological safety is when the entire team believes that their teammates can be trusted with interpersonal risks without fear of judgement, rejection, or other socially negative consequences. This isn't a get out of jail free card for being an a**hole. It's a framework that encourages humans to be humans, to lean into errors, and share information freely for the benefit of the whole. </p><p>Psychological safety is effective because it plays directly into team learning behaviors, and team learning behaviors are a benchmark for how successful a team will be. Team learning behavior isn't a new idea in software development. Comparatively, it's extremely similar to the open source ethos that drives technological advancement. Team learning behaviors include practices like:</p><ul><li><p>seeking candid feedback</p></li><li><p>asking for help</p></li><li><p>sharing information freely</p></li><li><p>comfortability admitting error</p></li><li><p>openly discussing new ideas</p></li></ul><p>All of the above are integral parts of open source ideology and public learning. </p><p>Amy Edmundson conducted a <a href=\"https://www.jstor.org/stable/2666999#metadata_info_tab_contents\">study</a> to better understand how psychological safety affects team performance, amongst other things. She asserted that: \"Learning behavior in teams is positively associated with team performance\" and psychological safety influences positive learning behaviors. </p><p>How? When people sense an interpersonal threat, they're less likely to speak up in a group. Their desire to save face is greater than their desire to take a risk. This threat rigidity \"reduces cognitive behavior\" in ways related to flexibility and responsiveness, resulting in a lack of willingness to engage in team activities like problem solving, ultimately hindering the team's collective learning. </p><h3>Google's Project Aristotle</h3><p>Google conducted <a href=\"https://rework.withgoogle.com/print/guides/5721312655835136/\">Project Aristotle</a>, a study to determine what exactly goes into building an effective team. The <a href=\"https://www.goodreads.com/quotes/20103-the-whole-is-greater-than-the-sum-of-its-parts\">aptly named</a> study analyzed everything from employees' lunch time behaviors to the best managerial traits. Prior to the study, Google's People Division held on to cognitive biases like 'grouping the best people makes for the best teams', 'introverts match well with other introverts', 'if they're friends outside of work, they'll mesh great in a team'. With this study, they wanted to nail down maps of what kinds of people work well together and what their common behaviors are.</p><p>After Google's top researchers, analysts, and engineers analyzed countless academic studies, compared them to group diagrams, and data collected from 180+ teams at Google, Project Aristotle was unable to come to any conclusion. A manager in Google People Division, Abeer Dubey, <a href=\"https://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html\">said</a>, \"At Google, we're good at finding patterns. There weren't strong patterns here.\"</p><p>This prompted a change in framing. Instead of hyper-focusing on behaviors and individual traits, they shifted focus to identifying \"group norms\". <a href=\"https://www.jstor.org/stable/258231#:~:text=Group%20norms%20are%20the%20informal,behavior%20(Hackman%2C%201976).\">Group norms</a>, \"informal rules that groups adopt to regulate and regularize group members' behavior\", essentially overrides an individual's personal behavior in order to mesh within a group. </p><p>In doing so, Google stumbled upon magic.</p><p>Using 35 different statistical models with group norms in mind, Google identified five indicators for team effectiveness. The <a href=\"https://rework.withgoogle.com/print/guides/5721312655835136/\">most influential</a>, by far, was <b>psychological safety, </b>followed by dependability, structure and clarity, meaning, and impact. The teams that performed the highest all had something striking in common: they felt comfortable exchanging ideas and weren't preoccupied with the threat of rejection or conflict. Their environments encouraged psychological safety. </p><h3>Psychological Safety Dismantles Groupthink</h3><p>Psychological safety does not equate to cohesiveness within teams. Actually, it encourages something of the opposite. When groups of people value cohesion above all else, they prioritize maintaining a positive social environment instead of expressing differences. Often, this manifests as 'groupthink'. <a href=\"http://agcommtheory.pbworks.com/f/GroupThink.pdf\">Groupthink</a> is a common phenomenon that affects wide ranging groups — from governments to social circles. It stems from a need for unity at all costs because of an underlining fear of group rejection or a \"<a href=\"https://www.workplace.com/blog/groupthink\">damaging team consensus</a>\". </p><p>Psychological safety, on the other hand, encourages mutual respect and trust within team members to voice differencing opinions, ideas, and beliefs without consequences. Without the dynamic of psychological safety, teams run a higher risk of participating in group think...and group think is where innovation goes to die. </p><hr><h2>Introducing Psychological Safety to your team</h2><p>Psychological safety is tacit knowledge, inherently assumed but often overlooked. In theory, most companies set out to create a psychologically safe environment. However, the execution can often look like sitting a cat and dog together and saying, \"if you get along, you get a treat.\" Way easier said than done, right?</p><p>\"Creating psychological safety — the confidence that candor and vulnerability are welcome — in a workplace is truly challenging and takes an unusual degree of commitment and skill,\" <a href=\"https://hbr.org/2021/06/4-steps-to-boost-psychological-safety-at-your-workplace\">says Edmundson and Hugander</a>. \"The reason for this is simple: It’s natural for people to hold back ideas, be reluctant to ask questions, and shy away from disagreeing with the boss.\"</p><h3>Implementation Strategies</h3><p>While difficult, incorporating psychological safety to your teams is possible. <a href=\"https://hbr.org/2021/06/4-steps-to-boost-psychological-safety-at-your-workplace\">Four implementation strategies</a> to use with your team are:</p><p><b>1. Focus on performance</b></p><p>When introducing this concept, underscore the benefits psychological safety has on performance. It shouldn't be framed as \"helping people feel safe\" or \"becoming better listeners\", because that isn't the end goal. Those are just parts of the process. With this, encourage them to share stories of when vulnerability positively contributed to an outcome. </p><p><b>2. Train both individuals and teams</b></p><p>Like other team activities, individual members need to practice individual skills. As management, it's important you practice the skills to it takes to facilitate psychology safety within your team. Giving guidelines for team members to practice psychological safety, then periodically discuss as a group to help train.</p><p><b>3. Incorporate visualization</b></p><p>Ask team members to visualize examples of when they have practiced psychological safety behaviors like perspective sharing, candid speaking, and creating an engaging environment. Then, prompt them with a future example, and ask how they would act in said situation.</p><p><b>4. Normalize vulnerability related to work</b></p><p>A hurdle for many to overcome is associating vulnerability with harm or discomfort. Being vulnerable with others reduces anxiety. This is true in the workplace, too. Sharing vulnerabilities lessens anxiety, increases trust, and fosters open communication.</p><h3>Share Amy Edmundson's TedTalk</h3><p>Sharing Edmundson's <a href=\"https://youtu.be/LhoLuui9gX8\">TedTalk</a> on Psychological Safety is a great way to introduce the concept to your team. Afterwards, meet to discuss ideas of how psychological safety could work within your team.</p><h3>Google's Psychological Safety Toolkit</h3><p>Google's psychological safety tool kit is aimed at managers and executives to help create trusting and respectful teams. Download the <a href=\"https://rework.withgoogle.com/print/guides/5721312655835136/\">PDF</a> and try with your team.</p><hr><h2>Conclusion</h2><p>At the end of the day, a manager's job is to manage people, and people are more complicated than software. This goes beyond being a task leader. It also includes being a socio-emotional leader. One of the best way to make sure your team is optimally performing and practicing positive learning behavior is by incorporating psychological safety. A lot of buzzwords are more glib than effective, but this psychological safety isn't one of them.</p>","tags":null,"body":"","richBody":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Managers rarely have a cut and dry list of responsibilities. When rising through the ranks of software engineering, developers make the transition from software problem solving to people problem solving. On top of that, when working in a field that requires knowledge intensive work (like software development), successful performance depends on coalescing different ideas and experiences. That rarely happens naturally. Managers need to facilitate it.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"The term 'psychological safety' feels like a buzzword that floats around leadership conferences. The corporate-speak that's been dominating About Us pages for years is getting another vocabulary word added to its seemingly endless list. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"For some, psychological safety sounds like a made up term that feeds into the dwindling mental fortitude of today's workforce. For others, psychological safety is topping 'Must Have' lists when vetting potential employers. In \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.jstor.org/stable/2666999#metadata_info_tab_contents\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"academia\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", it's \\\"a shared belief held by members of a team that the team is safe for interpersonal risk taking.” However, whether recognized by managers or not, psychological safety is a top indicator of team success in the workplace. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Creating a psychologically safe work culture isn't a stroke of luck or the product of a flashy benefits package. It's a human-oriented architecture built by managers to foster openness in the workplace. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"As is the nature of the job, software developers work within a team. Studies show that collaborative \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"group work \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"results in faster innovation, happier employees, and increased profitability. Dated operational beliefs lean solely on team structure for success, in part because of a cognitive bias that favors current routines over new alternatives. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"These architectures are used because of believed advantages for efficiency and productivity. While proven true, what if managers could take team effectiveness a step further? Structural architecture plays a role in productivity, yes, but that structure is nothing without the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"humans\",\"marks\":[{\"type\":\"italic\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" that fill the roles. Psychological safety is what people need to excel at team work.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"hr\",\"data\":{},\"content\":[]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"How does Psychological Safety work?\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Team psychological safety is a construct coined by \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.hbs.edu/faculty/Pages/profile.aspx?facId=6451\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Amy Edmundson\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", Novartis Professor of Leadership and Management at Harvard Business School, that examines the importance of openness and trust for improving team learning — and performance. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Like stated earlier, psychological safety is when the entire team believes that their teammates can be trusted with interpersonal risks without fear of judgement, rejection, or other socially negative consequences. This isn't a get out of jail free card for being an a**hole. It's a framework that encourages humans to be humans, to lean into errors, and share information freely for the benefit of the whole. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Psychological safety is effective because it plays directly into team learning behaviors, and team learning behaviors are a benchmark for how successful a team will be. Team learning behavior isn't a new idea in software development. Comparatively, it's extremely similar to the open source ethos that drives technological advancement. Team learning behaviors include practices like:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"unordered-list\",\"data\":{},\"content\":[{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"seeking candid feedback\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"asking for help\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"sharing information freely\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"comfortability admitting error\",\"marks\":[],\"data\":{}}]}]},{\"nodeType\":\"list-item\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"openly discussing new ideas\",\"marks\":[],\"data\":{}}]}]}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"All of the above are integral parts of open source ideology and public learning. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Amy Edmundson conducted a \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.jstor.org/stable/2666999#metadata_info_tab_contents\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"study\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" to better understand how psychological safety affects team performance, amongst other things. She asserted that: \\\"Learning behavior in teams is positively associated with team performance\\\" and psychological safety influences positive learning behaviors. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"How? When people sense an interpersonal threat, they're less likely to speak up in a group. Their desire to save face is greater than their desire to take a risk. This threat rigidity \\\"reduces cognitive behavior\\\" in ways related to flexibility and responsiveness, resulting in a lack of willingness to engage in team activities like problem solving, ultimately hindering the team's collective learning. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Google's Project Aristotle\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Google conducted \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://rework.withgoogle.com/print/guides/5721312655835136/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Project Aristotle\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", a study to determine what exactly goes into building an effective team. The \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.goodreads.com/quotes/20103-the-whole-is-greater-than-the-sum-of-its-parts\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"aptly named\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" study analyzed everything from employees' lunch time behaviors to the best managerial traits. Prior to the study, Google's People Division held on to cognitive biases like 'grouping the best people makes for the best teams', 'introverts match well with other introverts', 'if they're friends outside of work, they'll mesh great in a team'. With this study, they wanted to nail down maps of what kinds of people work well together and what their common behaviors are.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"After Google's top researchers, analysts, and engineers analyzed countless academic studies, compared them to group diagrams, and data collected from 180+ teams at Google, Project Aristotle was unable to come to any conclusion. A manager in Google People Division, Abeer Dubey, \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.nytimes.com/2016/02/28/magazine/what-google-learned-from-its-quest-to-build-the-perfect-team.html\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"said\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", \\\"At Google, we're good at finding patterns. There weren't strong patterns here.\\\"\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"This prompted a change in framing. Instead of hyper-focusing on behaviors and individual traits, they shifted focus to identifying \\\"group norms\\\". \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.jstor.org/stable/258231#:~:text=Group%20norms%20are%20the%20informal,behavior%20(Hackman%2C%201976).\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Group norms\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", \\\"informal rules that groups adopt to regulate and regularize group members' behavior\\\", essentially overrides an individual's personal behavior in order to mesh within a group. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"In doing so, Google stumbled upon magic.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Using 35 different statistical models with group norms in mind, Google identified five indicators for team effectiveness. The \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://rework.withgoogle.com/print/guides/5721312655835136/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"most influential\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\", by far, was \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"psychological safety, \",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"followed by dependability, structure and clarity, meaning, and impact. The teams that performed the highest all had something striking in common: they felt comfortable exchanging ideas and weren't preoccupied with the threat of rejection or conflict. Their environments encouraged psychological safety. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Psychological Safety Dismantles Groupthink\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Psychological safety does not equate to cohesiveness within teams. Actually, it encourages something of the opposite. When groups of people value cohesion above all else, they prioritize maintaining a positive social environment instead of expressing differences. Often, this manifests as 'groupthink'. \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"http://agcommtheory.pbworks.com/f/GroupThink.pdf\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Groupthink\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" is a common phenomenon that affects wide ranging groups — from governments to social circles. It stems from a need for unity at all costs because of an underlining fear of group rejection or a \\\"\",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.workplace.com/blog/groupthink\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"damaging team consensus\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"\\\". \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Psychological safety, on the other hand, encourages mutual respect and trust within team members to voice differencing opinions, ideas, and beliefs without consequences. Without the dynamic of psychological safety, teams run a higher risk of participating in group think...and group think is where innovation goes to die. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"hr\",\"data\":{},\"content\":[]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Introducing Psychological Safety to your team\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Psychological safety is tacit knowledge, inherently assumed but often overlooked. In theory, most companies set out to create a psychologically safe environment. However, the execution can often look like sitting a cat and dog together and saying, \\\"if you get along, you get a treat.\\\" Way easier said than done, right?\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\\\"Creating psychological safety — the confidence that candor and vulnerability are welcome — in a workplace is truly challenging and takes an unusual degree of commitment and skill,\\\" \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://hbr.org/2021/06/4-steps-to-boost-psychological-safety-at-your-workplace\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"says Edmundson and Hugander\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\". \\\"The reason for this is simple: It’s natural for people to hold back ideas, be reluctant to ask questions, and shy away from disagreeing with the boss.\\\"\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Implementation Strategies\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"While difficult, incorporating psychological safety to your teams is possible. \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://hbr.org/2021/06/4-steps-to-boost-psychological-safety-at-your-workplace\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"Four implementation strategies\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" to use with your team are:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"1. Focus on performance\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"When introducing this concept, underscore the benefits psychological safety has on performance. It shouldn't be framed as \\\"helping people feel safe\\\" or \\\"becoming better listeners\\\", because that isn't the end goal. Those are just parts of the process. With this, encourage them to share stories of when vulnerability positively contributed to an outcome. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"2. Train both individuals and teams\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Like other team activities, individual members need to practice individual skills. As management, it's important you practice the skills to it takes to facilitate psychology safety within your team. Giving guidelines for team members to practice psychological safety, then periodically discuss as a group to help train.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"3. Incorporate visualization\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Ask team members to visualize examples of when they have practiced psychological safety behaviors like perspective sharing, candid speaking, and creating an engaging environment. Then, prompt them with a future example, and ask how they would act in said situation.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"4. Normalize vulnerability related to work\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"A hurdle for many to overcome is associating vulnerability with harm or discomfort. Being vulnerable with others reduces anxiety. This is true in the workplace, too. Sharing vulnerabilities lessens anxiety, increases trust, and fosters open communication.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Share Amy Edmundson's TedTalk\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Sharing Edmundson's \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://youtu.be/LhoLuui9gX8\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"TedTalk\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" on Psychological Safety is a great way to introduce the concept to your team. Afterwards, meet to discuss ideas of how psychological safety could work within your team.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Google's Psychological Safety Toolkit\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Google's psychological safety tool kit is aimed at managers and executives to help create trusting and respectful teams. Download the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://rework.withgoogle.com/print/guides/5721312655835136/\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"PDF\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" and try with your team.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"hr\",\"data\":{},\"content\":[]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Conclusion\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"At the end of the day, a manager's job is to manage people, and people are more complicated than software. This goes beyond being a task leader. It also includes being a socio-emotional leader. One of the best way to make sure your team is optimally performing and practicing positive learning behavior is by incorporating psychological safety. A lot of buzzwords are more glib than effective, but this psychological safety isn't one of them.\",\"marks\":[],\"data\":{}}]}]}","description":"Psychological safety: it's more than just a buzzword. Research cuts through the seemingly glib corporate speak to reveal what your team might actually be missing. ","hideHero":false,"publishDate":"2022-08-24T12:39-05:00"},{"prettyDate":"May 18, 2022","title":"Q&A Challenge Refresher","href":"https://www.qualified.io/blog/posts/q-and-a-challenge-refresher","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/Sclp2toIGdHOheYVFoqRE/1a6040c0a13cc2baf8572ad8ea31ea9a/pexels-ann-h-11082254-adjusted.jpg?w=100&q=1","length":"","excerpt":"We've recently introduced some new features to our already highly customizable Question & Answer challenges, and we thought it might be a great time to reintroduce Q&A challenges and highlight some of the great ways you can use them to assess candidates and students.\n","collection":"Qualified","slug":"q-and-a-challenge-refresher","author":"Phil DeJarnett","htmlContent":"<p>Here at Qualified, we've recently introduced some new features to our already highly customizable Question &amp; Answer challenges, and we thought it might be a great time to reintroduce Q&amp;A challenges and highlight some of the great ways you can use them to assess candidates and students.</p><h1><b>Q&amp;A vs Code Challenges</b></h1><p>We have two primary ways you can test candidates using Qualified Assessments.</p><p>Our primary challenge type is a <i>code challenge</i>, which is designed to represent a work sample and test a developers ability to perform in a realistic scenario, using code to solve problems.</p><p>We introduced Q&amp;A challenges as a way to expand on your ability to learn about candidates. Q&amp;A challenges feature multiple-choice and free-text questions, and allow your team to dig deeper into the developer's knowledge, learn more about them and their personality, and gather basic profile information.</p><p>Using both challenges together will expand your ability to <a href=\"https://www.qualified.io/blog/posts/reducing-time-and-effort-hiring-software-developers-with-evidence-based\"><u>gather valuable evidence</u></a> and make efficient and effective decisions.</p><p><a href=\"https://docs.qualified.io/creating-content/challenges/challenge-types/\"><u>Learn more about the different types of challenges and their uses in our content developer guides.</u></a></p><h1><b>Q&amp;A Challenge Basics</b></h1><p>The foundation of Q&amp;A challenges is a series of questions. We have two base types for questions, but each of these base types can be customized to fine-tune the answer to get a signal-rich answer.</p><h2><b>Multiple-Choice Questions</b></h2><p><a href=\"https://docs.qualified.io/creating-content/challenges/challenge-types/#multiple-choice-questions\"><u>Multiple-choice questions</u></a> are the easiest to build, and allow for instant, automated scoring. With our multiple choice format, you can create questions with a varied amount of correct answers, and even allow for some answers to be rated higher than others, or provide partial credit.</p><h3><b>TIP 1: Use Timed Questions to Prevent Researching</b></h3><p>One of our more powerful features is to enable per-question time limits, which forces the candidate to read and answer each question one-at-a-time, and also limits the amount of time they have to choose answers. <a href=\"https://www.qualified.io/blog/posts/a-small-trick-to-assess-a-developers-prior-knowledge\"><u>Learn more about how to use time-limits in this article.</u></a></p><h3><b>TIP 2: Use Custom Weighting to Allow Partial Credit</b></h3><p>You can apply custom weights to each answer, allowing for a more refined scoring process. You can use this to help determine job fit (by allowing some scoring for less-desirable skills), create knowledge-based questions that have \"partially-correct\" answers, and more. <a href=\"https://docs.qualified.io/creating-content/challenges/challenge-types/q-and-a-options/#weighted-choices\"><u>Learn more about how to use weighted choices in our docs here.</u></a></p><h2><b>Free-Text Questions</b></h2><p><a href=\"https://docs.qualified.io/creating-content/challenges/challenge-types/#free-text-questions\"><u>Free-text questions</u></a> allow candidates to type in an answer freely. Free-text can be trickier to score, but eliminate the possibility of simply guessing an answer. You can customize the appearance of a free-text question in several ways, and still validate the answer in an automated fashion.</p><h3><b>TIP 3: Select the Right Answer Format</b></h3><p>You can style the free-text question in many ways, from single short-answers to very-long-form essay answers by using a highlighted, language-specific code editor. Make sure you select the right format to help your candidate provide the kind of answer you expect. <a href=\"https://docs.qualified.io/creating-content/challenges/challenge-types/q-and-a-options/#answer-format\"><u>Learn more about free-text answer formats here.</u></a></p><h3><b>TIP 4: Validate Free-Text Answers Automatically</b></h3><p>One of the more time-consuming aspects to free-text questions with traditional quizzes is manually reviewing and validating each answer. We wanted to alleviate this, and added in a powerful validation matching toolkit. For each question, you can define a series of matchers that check to make sure certain phrases are either present, or ensure they are not used. You can even use regular expressions for complex validation. <a href=\"https://docs.qualified.io/creating-content/challenges/challenge-types/q-and-a-options/#validation-matchers\"><u>Learn how to apply validation matchers in our docs.</u></a></p><h1><b>Advanced Q&amp;A Features</b></h1><p>Beyond the question formats, there are&nbsp; several options you can use to change how your challenge works.</p><h2><b>Challenge Time Limits</b></h2><p>The entire challenge can have a time limit assigned, which prevents a candidate from researching every answer. Time limits can also help&nbsp; candidates &nbsp; keep track of tim, so they don't get too side-tracked with just one challenge.</p><p><a href=\"https://www.qualified.io/blog/posts/a-small-trick-to-assess-a-developers-prior-knowledge\"><u>You can use a single time-limit, or you can use per-question time limits. Both have their uses, and are detailed in this article.</u></a></p><h2><b>Randomize Question Order</b></h2><p>A relatively new feature, this allows you to shuffle the questions into a different order for each candidate. Once the candidate starts the challenge, their order is locked-in, so they will have a consistent experience even if they have to leave and return to the page.</p><p>When reviewing the candidate's answers, you will see the questions in the original order, but you have the option to see them in the order presented to the candidate. This could be helpful in case the order of the questions has affected the candidate's answers.</p><h2><b>Question Points &amp; Scoring</b></h2><p>Each question defaults to being worth a single point. If you want to increase the value of a question relative to other questions, you can change the number of points it's worth.</p><p>You can also disable partial credit for questions with multiple answers or validators. This means that the question is now all-or-nothing, no matter how many points it is worth.</p><h1><b>Q&amp;A Challenge Wrap-Up</b></h1><p>Hopefully you learned something new about Q&amp;A challenges in this article. If you are already using Q&amp;A challenges, you may want to take some of the information in this article and revisit your challenges to see if you can improve the evidence you are gathering.</p><p>If you are new to creating challenges, our <a href=\"https://docs.qualified.io/creating-content/\"><u>content creator docs provide detailed, guided lessons into how to develop your own assessments.</u></a> Inside you'll learn how to analyze your needs, build a plan, and build an assessment from existing challenges and custom challenges.</p>","tags":null,"body":"","richBody":"{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Here at Qualified, we've recently introduced some new features to our already highly customizable Question & Answer challenges, and we thought it might be a great time to reintroduce Q&A challenges and highlight some of the great ways you can use them to assess candidates and students.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Q&A vs Code Challenges\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-1\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"We have two primary ways you can test candidates using Qualified Assessments.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Our primary challenge type is a \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"code challenge\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\", which is designed to represent a work sample and test a developers ability to perform in a realistic scenario, using code to solve problems.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"We introduced Q&A challenges as a way to expand on your ability to learn about candidates. Q&A challenges feature multiple-choice and free-text questions, and allow your team to dig deeper into the developer's knowledge, learn more about them and their personality, and gather basic profile information.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Using both challenges together will expand your ability to \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.qualified.io/blog/posts/reducing-time-and-effort-hiring-software-developers-with-evidence-based\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"underline\"}],\"value\":\"gather valuable evidence\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" and make efficient and effective decisions.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://docs.qualified.io/creating-content/challenges/challenge-types/\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"underline\"}],\"value\":\"Learn more about the different types of challenges and their uses in our content developer guides.\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Q&A Challenge Basics\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-1\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"The foundation of Q&A challenges is a series of questions. We have two base types for questions, but each of these base types can be customized to fine-tune the answer to get a signal-rich answer.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Multiple-Choice Questions\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://docs.qualified.io/creating-content/challenges/challenge-types/#multiple-choice-questions\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"underline\"}],\"value\":\"Multiple-choice questions\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" are the easiest to build, and allow for instant, automated scoring. With our multiple choice format, you can create questions with a varied amount of correct answers, and even allow for some answers to be rated higher than others, or provide partial credit.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"TIP 1: Use Timed Questions to Prevent Researching\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-3\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"One of our more powerful features is to enable per-question time limits, which forces the candidate to read and answer each question one-at-a-time, and also limits the amount of time they have to choose answers. \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.qualified.io/blog/posts/a-small-trick-to-assess-a-developers-prior-knowledge\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"underline\"}],\"value\":\"Learn more about how to use time-limits in this article.\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"TIP 2: Use Custom Weighting to Allow Partial Credit\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-3\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"You can apply custom weights to each answer, allowing for a more refined scoring process. You can use this to help determine job fit (by allowing some scoring for less-desirable skills), create knowledge-based questions that have \\\"partially-correct\\\" answers, and more. \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://docs.qualified.io/creating-content/challenges/challenge-types/q-and-a-options/#weighted-choices\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"underline\"}],\"value\":\"Learn more about how to use weighted choices in our docs here.\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Free-Text Questions\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://docs.qualified.io/creating-content/challenges/challenge-types/#free-text-questions\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"underline\"}],\"value\":\"Free-text questions\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" allow candidates to type in an answer freely. Free-text can be trickier to score, but eliminate the possibility of simply guessing an answer. You can customize the appearance of a free-text question in several ways, and still validate the answer in an automated fashion.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"TIP 3: Select the Right Answer Format\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-3\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"You can style the free-text question in many ways, from single short-answers to very-long-form essay answers by using a highlighted, language-specific code editor. Make sure you select the right format to help your candidate provide the kind of answer you expect. \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://docs.qualified.io/creating-content/challenges/challenge-types/q-and-a-options/#answer-format\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"underline\"}],\"value\":\"Learn more about free-text answer formats here.\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"TIP 4: Validate Free-Text Answers Automatically\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-3\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"One of the more time-consuming aspects to free-text questions with traditional quizzes is manually reviewing and validating each answer. We wanted to alleviate this, and added in a powerful validation matching toolkit. For each question, you can define a series of matchers that check to make sure certain phrases are either present, or ensure they are not used. You can even use regular expressions for complex validation. \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://docs.qualified.io/creating-content/challenges/challenge-types/q-and-a-options/#validation-matchers\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"underline\"}],\"value\":\"Learn how to apply validation matchers in our docs.\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Advanced Q&A Features\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-1\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Beyond the question formats, there are  several options you can use to change how your challenge works.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Challenge Time Limits\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"The entire challenge can have a time limit assigned, which prevents a candidate from researching every answer. Time limits can also help  candidates   keep track of tim, so they don't get too side-tracked with just one challenge.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.qualified.io/blog/posts/a-small-trick-to-assess-a-developers-prior-knowledge\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"underline\"}],\"value\":\"You can use a single time-limit, or you can use per-question time limits. Both have their uses, and are detailed in this article.\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Randomize Question Order\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"A relatively new feature, this allows you to shuffle the questions into a different order for each candidate. Once the candidate starts the challenge, their order is locked-in, so they will have a consistent experience even if they have to leave and return to the page.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"When reviewing the candidate's answers, you will see the questions in the original order, but you have the option to see them in the order presented to the candidate. This could be helpful in case the order of the questions has affected the candidate's answers.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Question Points & Scoring\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Each question defaults to being worth a single point. If you want to increase the value of a question relative to other questions, you can change the number of points it's worth.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"You can also disable partial credit for questions with multiple answers or validators. This means that the question is now all-or-nothing, no matter how many points it is worth.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Q&A Challenge Wrap-Up\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-1\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Hopefully you learned something new about Q&A challenges in this article. If you are already using Q&A challenges, you may want to take some of the information in this article and revisit your challenges to see if you can improve the evidence you are gathering.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"If you are new to creating challenges, our \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://docs.qualified.io/creating-content/\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"underline\"}],\"value\":\"content creator docs provide detailed, guided lessons into how to develop your own assessments.\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" Inside you'll learn how to analyze your needs, build a plan, and build an assessment from existing challenges and custom challenges.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"document\"}","description":"We've recently introduced some new features to our already highly customizable Question & Answer challenges, and we thought it might be a great time to reintroduce Q&A challenges and highlight some of the great ways you can use them to assess candidates and students.","hideHero":null,"publishDate":"2022-05-18T00:00-04:00"},{"prettyDate":"Apr 22, 2022","title":"Interactive Pair Programming: Working Alongside Candidates & Students","href":"https://www.qualified.io/blog/posts/interactive-pair-programming-working-alongside-candidates-and-students","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/6y6e9AvpRzKEY49Ajs7niv/e766c9cee79ddf420c7115b2195935a7/pexels-christina-morillo-1181275-edited.jpg?w=100&q=1","length":"","excerpt":"Use interactive pair-programming to learn more about candidates and provide one-on-one support for students.\n","collection":"Qualified","slug":"interactive-pair-programming-working-alongside-candidates-and-students","author":"Phil DeJarnett","htmlContent":"<p>Online assessment platforms are fantastic for quickly evaluating students. They provide the tools necessary to <a href=\"https://www.qualified.io/blog/posts/reducing-time-and-effort-hiring-software-developers-with-evidence-based\"><u>gather evidence</u></a> and ensure objective results. They can even help guide subjective interpretations of those results with reviewing tools and rubrics.</p><p>When you want to move past objective evaluations and get more personal with a developer, one of the best ways you can accomplish this is through a pair-programming session.</p><p>Similar to an in-person interview with a whiteboard or in-person tutoring, a pair-programming session allows you to work together with a developer candidate or student while editing the same codebase in real-time no matter where they are in the world. Pair-programming comes with the benefit of working with real code in an editor, so you aren't asking the developer to work in an unnatural environment, like writing pseudocode on a whiteboard.</p><h1><b>Integrating Paired Technical Interviews Into Your Process</b></h1><p>When you are ready to move beyond standard assessments, your first question might be, \"How does Pair Programming fit into my process?\" To answer that, we must first look at your main goals, and see how pair-programming interviews can help you achieve those goals.</p><h2><b>Recruitment: Hiring Junior Developers</b></h2><p>When hiring junior developers, your goal should be to identify the candidate's ability to identify and solve problems in existing code bases. You'll also want to be more lenient in strict scores, so you can focus on the candidate's ability to learn and adapt. The automatically scored challenges you select will most likely handle the most obvious issues, ensuring you are working with a person who has basic coding skills and basic problem solving skills.</p><p>After this is where a pair programming interview should be used to identify junior development talent that might be easy to overlook.</p><h3><b>Code Review Assessment Results</b></h3><p>You can use a pair-programming session to look over a candidate's assessment results to gain additional insights. Use this time to discuss their solution, and possibly work with them on ways in which they might improve their solutions, just as you would with any other code review.</p><p>Insights from code review assessments gauge how well the candidate handles feedback, as well as explores their ability to improve their own code. You can also ask questions to probe their ability to improve code without giving specific recommendations.</p><h3><b>Pair Up to Solve a New Challenge</b></h3><p>Interactive pair programming is a great tool for understanding how your candidate solves new challenges. In this case, you can treat the experience as if you were helping a new hire get started in your codebase. Take on the role of the senior developer looking to onboard the candidate, and work together to solve a problem. This will give you a chance to gather opinions on the candidate's thought processes in real-time.</p><p>For both of the above experiences, make sure you target a fairly short interview experience, no more than 15 minutes, so you leave plenty of time for any other normal interview tasks.</p><h2><b>Recruitment: Hiring Senior Developers</b></h2><p>Hiring a senior developer is a very different experience. Hopefully any highly experienced developer is able to fully pass the automated unit tests. Once you've made sure the candidate has a solid background and is skilled at anything you can automate, a pair programming interview can really help expand the evidence you have to make a great hire.</p><h3><b>Review Code Together</b></h3><p>In a code pairing environment, introduce an existing codebase like a mock merge request. In this environment, you can work together to discuss the code, look for ways to improve it, and discuss if there are better solutions to the issue.</p><p>For the best experience, see if you can build on a challenge already provided to the candidate. This doesn't necessarily have to add to their solution, but would help get over the initial hurdles of understanding the codebase and understanding the business problem being solved.</p><h3><b>Hold a Mock Design Meeting</b></h3><p>Most senior developers will be involved in high-level engineering research and design at some point. By holding a mock design meeting with the candidate and several of their potential coworkers, you can observe how the candidate works in a team environment. Encourage them to speak up and work along.</p><p>You can use a pair-programming environment here to explore more specific ideas against a \"real\" codebase, so everyone can look at the code and work together on solving the problem. You can also use online whiteboards to work on diagramming together.</p><h2><b>Education: Tutoring a Student</b></h2><p>When tutoring a student remotely, you need more tools than just screen sharing. Screen sharing results in a passive learning experience. You need to be able to work with them deeply, side-by-side, while they learn how to code. In a fully-remote education environment, this can be difficult to achieve without specialized tools.</p><h3><b>Pair Program to Teach New Ideas</b></h3><p>Using a pair-programming environment, you can rapidly explain ideas to a student 1-on-1. Not only can you show the code, but you can run the code together to see the effects immediately.&nbsp;</p><p>With a good programming environment, you can each work on the code together, and freely discuss techniques and output from running code.</p><h3><b>Pair Program to Review Coding Test Results</b></h3><p>Pairing up can accelerate the solution review process by offering advice and giving feedback. You can quickly look through the student's code and work together to identify problem areas, think through logic issues, and improve reasoning skills.</p><p>Because you are working together on a live codebase, you also can make changes together, and run the code to see the results of these changes immediately. This process can actively help a student more deeply understand the reasoning behind changes.</p><h1><b>Qualified Interact: Instant Pair Programming</b></h1><p>Qualified's interface uniquely includes the ability to instantly turn any online assessment into a powerful pair-programming environment. The candidate and the interviewers don't need to install anything, as the entire experience takes place in the same browser environment already used for solving and reviewing assessments.</p><p>You can jump into any active candidate or student assessment as an interviewer at any time. Simply click on <b>Interact Sessions</b> link at the top of the application, and select the student you'd like to interview. If the candidate has not been invited yet, you'll also be given the opportunity to start an Interact session immediately after you invite them using the <b>Invite Candidates</b> or <b>Invite Students</b> link at the top of the application.</p><p>Qualified's Interact sessions are fully-featured for both our classic code and project code challenges. They each work a little differently.</p><h2><b>Classic Code Challenge Pair Programming</b></h2><p>With classic coding challenges, we support real-time, multi-user editing on both the candidate's solution and the candidate's tests. Any user (candidate or interviewers) can trigger running tests or submitting the code for final testing.</p><p>Each user is provided with a unique cursor color, and can independently edit the file simultaneously.</p><h2><b>Project Code Challenge Pair Programming</b></h2><p>We've recently introduced an improved feature set for using an Interact session with our project-based coding challenges. This interface not only allows multiple users to work together on the same codebase, but also follows the focused file, cursor, and selections automatically.</p><p>Besides the ability to work on dozens of files at once, one big difference between the classic code editor and our project editor is that only one person can be editing at a time. Our system intelligently tracks the active editor, so in many cases, you won't even realize this is happening.</p><p>It does allow us to track who made each edit, which we'll be showing in playback in an upcoming release.</p><h1><b>Conclusion</b></h1><p>Pair programming is a great way to teach new ideas, review coding test results, and rapidly explore potential solutions. By using a collaborative environment, you can quickly explain ideas, view code results, and make changes together to see the effects immediately. The additional collaboration will allow you to get a deeper understanding of the hard skills of the candidate or student, as well as their ability to communicate thoughts and ideas. You will also gain the opportunity to see how they go about solving problems without a rigid scoring structure in place.</p><p>When considering how to design your technical interview process or upskilling program, take time to think about how you can start collaborating with developers throughout the process. Where will you give developers time to work on their own, and where can you benefit from having the opportunity for open discussion? Consider what you want to learn in terms of how a developer thinks, beyond just their programming skills.</p><p>Ultimately, you can learn much more than just how well a developer can write code, you can learn how they solve problems.</p>","tags":"Hiring;Recruiting;Education","body":"","richBody":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Online assessment platforms are fantastic for quickly evaluating students. They provide the tools necessary to \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://www.qualified.io/blog/posts/reducing-time-and-effort-hiring-software-developers-with-evidence-based\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"gather evidence\",\"marks\":[{\"type\":\"underline\"}],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\" and ensure objective results. They can even help guide subjective interpretations of those results with reviewing tools and rubrics.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"When you want to move past objective evaluations and get more personal with a developer, one of the best ways you can accomplish this is through a pair-programming session.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Similar to an in-person interview with a whiteboard or in-person tutoring, a pair-programming session allows you to work together with a developer candidate or student while editing the same codebase in real-time no matter where they are in the world. Pair-programming comes with the benefit of working with real code in an editor, so you aren't asking the developer to work in an unnatural environment, like writing pseudocode on a whiteboard.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-1\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Integrating Paired Technical Interviews Into Your Process\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"When you are ready to move beyond standard assessments, your first question might be, \\\"How does Pair Programming fit into my process?\\\" To answer that, we must first look at your main goals, and see how pair-programming interviews can help you achieve those goals.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Recruitment: Hiring Junior Developers\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"When hiring junior developers, your goal should be to identify the candidate's ability to identify and solve problems in existing code bases. You'll also want to be more lenient in strict scores, so you can focus on the candidate's ability to learn and adapt. The automatically scored challenges you select will most likely handle the most obvious issues, ensuring you are working with a person who has basic coding skills and basic problem solving skills.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"After this is where a pair programming interview should be used to identify junior development talent that might be easy to overlook.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Code Review Assessment Results\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"You can use a pair-programming session to look over a candidate's assessment results to gain additional insights. Use this time to discuss their solution, and possibly work with them on ways in which they might improve their solutions, just as you would with any other code review.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Insights from code review assessments gauge how well the candidate handles feedback, as well as explores their ability to improve their own code. You can also ask questions to probe their ability to improve code without giving specific recommendations.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Pair Up to Solve a New Challenge\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Interactive pair programming is a great tool for understanding how your candidate solves new challenges. In this case, you can treat the experience as if you were helping a new hire get started in your codebase. Take on the role of the senior developer looking to onboard the candidate, and work together to solve a problem. This will give you a chance to gather opinions on the candidate's thought processes in real-time.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"For both of the above experiences, make sure you target a fairly short interview experience, no more than 15 minutes, so you leave plenty of time for any other normal interview tasks.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Recruitment: Hiring Senior Developers\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Hiring a senior developer is a very different experience. Hopefully any highly experienced developer is able to fully pass the automated unit tests. Once you've made sure the candidate has a solid background and is skilled at anything you can automate, a pair programming interview can really help expand the evidence you have to make a great hire.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Review Code Together\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"In a code pairing environment, introduce an existing codebase like a mock merge request. In this environment, you can work together to discuss the code, look for ways to improve it, and discuss if there are better solutions to the issue.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"For the best experience, see if you can build on a challenge already provided to the candidate. This doesn't necessarily have to add to their solution, but would help get over the initial hurdles of understanding the codebase and understanding the business problem being solved.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Hold a Mock Design Meeting\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Most senior developers will be involved in high-level engineering research and design at some point. By holding a mock design meeting with the candidate and several of their potential coworkers, you can observe how the candidate works in a team environment. Encourage them to speak up and work along.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"You can use a pair-programming environment here to explore more specific ideas against a \\\"real\\\" codebase, so everyone can look at the code and work together on solving the problem. You can also use online whiteboards to work on diagramming together.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"metadata\":{\"tags\":[]},\"sys\":{\"space\":{\"sys\":{\"type\":\"Link\",\"linkType\":\"Space\",\"id\":\"4ol5sgskowtw\"}},\"id\":\"4iN7o49ftjvUvKFVqrmosE\",\"type\":\"Asset\",\"createdAt\":\"2022-04-22T16:33:44.711Z\",\"updatedAt\":\"2022-04-22T16:33:44.711Z\",\"environment\":{\"sys\":{\"id\":\"master\",\"type\":\"Link\",\"linkType\":\"Environment\"}},\"revision\":1,\"locale\":\"en-US\"},\"fields\":{\"title\":\"Report Support\",\"description\":\"\",\"file\":{\"url\":\"//images.ctfassets.net/4ol5sgskowtw/4iN7o49ftjvUvKFVqrmosE/fe061abb49abb501f6cede64b7a997c6/pexels-katerina-holmes-5905709.jpg\",\"details\":{\"size\":4171500,\"image\":{\"width\":6000,\"height\":4000}},\"fileName\":\"pexels-katerina-holmes-5905709.jpg\",\"contentType\":\"image/jpeg\"}}}},\"content\":[]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Education: Tutoring a Student\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"When tutoring a student remotely, you need more tools than just screen sharing. Screen sharing results in a passive learning experience. You need to be able to work with them deeply, side-by-side, while they learn how to code. In a fully-remote education environment, this can be difficult to achieve without specialized tools.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Pair Program to Teach New Ideas\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Using a pair-programming environment, you can rapidly explain ideas to a student 1-on-1. Not only can you show the code, but you can run the code together to see the effects immediately. \",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"With a good programming environment, you can each work on the code together, and freely discuss techniques and output from running code.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Pair Program to Review Coding Test Results\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Pairing up can accelerate the solution review process by offering advice and giving feedback. You can quickly look through the student's code and work together to identify problem areas, think through logic issues, and improve reasoning skills.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Because you are working together on a live codebase, you also can make changes together, and run the code to see the results of these changes immediately. This process can actively help a student more deeply understand the reasoning behind changes.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-1\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Qualified Interact: Instant Pair Programming\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Qualified's interface uniquely includes the ability to instantly turn any online assessment into a powerful pair-programming environment. The candidate and the interviewers don't need to install anything, as the entire experience takes place in the same browser environment already used for solving and reviewing assessments.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"embedded-asset-block\",\"data\":{\"target\":{\"metadata\":{\"tags\":[]},\"sys\":{\"space\":{\"sys\":{\"type\":\"Link\",\"linkType\":\"Space\",\"id\":\"4ol5sgskowtw\"}},\"id\":\"5vEmitw13QCPcP65cVL34M\",\"type\":\"Asset\",\"createdAt\":\"2022-04-22T16:30:50.128Z\",\"updatedAt\":\"2022-04-22T16:30:50.128Z\",\"environment\":{\"sys\":{\"id\":\"master\",\"type\":\"Link\",\"linkType\":\"Environment\"}},\"revision\":1,\"locale\":\"en-US\"},\"fields\":{\"title\":\"Interact Button\",\"description\":\"\",\"file\":{\"url\":\"//images.ctfassets.net/4ol5sgskowtw/5vEmitw13QCPcP65cVL34M/87dbb90835a6cb670d4a78ea1089a935/62f7070b05574353d5fb171be91c31b6-21_at_2.png\",\"details\":{\"size\":4565,\"image\":{\"width\":215,\"height\":38}},\"fileName\":\"62f7070b05574353d5fb171be91c31b6-21_at_2.png\",\"contentType\":\"image/png\"}}}},\"content\":[]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"You can jump into any active candidate or student assessment as an interviewer at any time. Simply click on \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Interact Sessions\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" link at the top of the application, and select the student you'd like to interview. If the candidate has not been invited yet, you'll also be given the opportunity to start an Interact session immediately after you invite them using the \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Invite Candidates\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" or \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Invite Students\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}},{\"nodeType\":\"text\",\"value\":\" link at the top of the application.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Qualified's Interact sessions are fully-featured for both our classic code and project code challenges. They each work a little differently.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Classic Code Challenge Pair Programming\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"With classic coding challenges, we support real-time, multi-user editing on both the candidate's solution and the candidate's tests. Any user (candidate or interviewers) can trigger running tests or submitting the code for final testing.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Each user is provided with a unique cursor color, and can independently edit the file simultaneously.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-2\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Project Code Challenge Pair Programming\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"We've recently introduced an improved feature set for using an Interact session with our project-based coding challenges. This interface not only allows multiple users to work together on the same codebase, but also follows the focused file, cursor, and selections automatically.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Besides the ability to work on dozens of files at once, one big difference between the classic code editor and our project editor is that only one person can be editing at a time. Our system intelligently tracks the active editor, so in many cases, you won't even realize this is happening.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"It does allow us to track who made each edit, which we'll be showing in playback in an upcoming release.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-1\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Conclusion\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Pair programming is a great way to teach new ideas, review coding test results, and rapidly explore potential solutions. By using a collaborative environment, you can quickly explain ideas, view code results, and make changes together to see the effects immediately. The additional collaboration will allow you to get a deeper understanding of the hard skills of the candidate or student, as well as their ability to communicate thoughts and ideas. You will also gain the opportunity to see how they go about solving problems without a rigid scoring structure in place.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"When considering how to design your technical interview process or upskilling program, take time to think about how you can start collaborating with developers throughout the process. Where will you give developers time to work on their own, and where can you benefit from having the opportunity for open discussion? Consider what you want to learn in terms of how a developer thinks, beyond just their programming skills.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Ultimately, you can learn much more than just how well a developer can write code, you can learn how they solve problems.\",\"marks\":[],\"data\":{}}]}]}","description":"Use interactive pair-programming to learn more about candidates and provide one-on-one support for students.\n","hideHero":false,"publishDate":"2022-04-22T00:00-04:00"},{"prettyDate":"Feb 10, 2022","title":"Introducing Qualified Jobs","href":"https://www.qualified.io/blog/posts/introducing-qualified-jobs","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/5LQMyhTqH6wsEB8VTgy2gC/a0e2a025689e5f8266d6969149b0aeed/Find_software_development_jobs_and_hire_the_best_talent_-_Qualified.png?w=100&q=1","length":"","excerpt":"We are excited to announce Qualified Jobs, our new job board with deep integration into our Codewars community. With access to over 3 million developers, Qualified is in a unique position to help developers find their dream job, and for companies to reach their growth objectives with highly qualified talent!\n","collection":"Qualified","slug":"introducing-qualified-jobs","author":"Paolo De Armas","htmlContent":"<p>As you may or may not know, the idea for Qualified came about from feedback from the Codewars community. Some years ago, Codewars users involved in developer hiring made it clear that there was a need for a developer-friendly coding assessment platform that focused on actual coding skill, not just algorithm solving.</p><p>It's 2022 now and we're happy to say that both Qualified and Codewars are at a nice point of maturity and growth. Recently, we've been thinking about how to tie the two closer together. While separate platforms, the core mission of Qualified and Codewars is to provide value to the developer community.</p><p>A good next step in this mission is to introduce the community to career opportunities. To this end, we're excited to announce <a href=\"https://jobs.qualified.io?utm_source=qualified&amp;utm_campaign=blog\">Qualified Jobs</a>.</p><p>For job seekers, the board lists actual jobs from actual employers. No recruiter spam or fake listings, ever. You can filter and sort by job roles, career level, technologies, and location. You can also submit your resume to join our talent network (curated jobs matching is something we're looking into).</p><p>For employers, the board provides access to a large and engaged community of over 3 million developers. Your jobs will show in spaces on high-traffic pages of Qualified and Codewars, as well as in our newsletters.</p><p>This is just the start. We know that developers typically don’t have a hard time finding opportunities. To be truly helpful, we want to match developers to the right opportunities. This means personalized listings tailored to each individual developer’s goals and skills. It also means opportunities beyond jobs, like continuing education, volunteer causes, and technical certifications. Ultimately, we want to be the bridge between where a developer is today, and where they want to be in the future. </p><p>Questions? Comments? Ideas? We'd be happy to hear it all. Email us at team(at)qualified.io.\n</p>","tags":null,"body":"","richBody":"{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"As you may or may not know, the idea for Qualified came about from feedback from the Codewars community. Some years ago, Codewars users involved in developer hiring made it clear that there was a need for a developer-friendly coding assessment platform that focused on actual coding skill, not just algorithm solving.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"It's 2022 now and we're happy to say that both Qualified and Codewars are at a nice point of maturity and growth. Recently, we've been thinking about how to tie the two closer together. While separate platforms, the core mission of Qualified and Codewars is to provide value to the developer community.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"A good next step in this mission is to introduce the community to career opportunities. To this end, we're excited to announce \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://jobs.qualified.io?utm_source=qualified&utm_campaign=blog\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Qualified Jobs\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\".\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"For job seekers, the board lists actual jobs from actual employers. No recruiter spam or fake listings, ever. You can filter and sort by job roles, career level, technologies, and location. You can also submit your resume to join our talent network (curated jobs matching is something we're looking into).\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"For employers, the board provides access to a large and engaged community of over 3 million developers. Your jobs will show in spaces on high-traffic pages of Qualified and Codewars, as well as in our newsletters.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"This is just the start. We know that developers typically don’t have a hard time finding opportunities. To be truly helpful, we want to match developers to the right opportunities. This means personalized listings tailored to each individual developer’s goals and skills. It also means opportunities beyond jobs, like continuing education, volunteer causes, and technical certifications. Ultimately, we want to be the bridge between where a developer is today, and where they want to be in the future. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Questions? Comments? Ideas? We'd be happy to hear it all. Email us at team(at)qualified.io.\\n\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"document\"}","description":"We are excited to announce Qualified Jobs, our new job board with deep integration into our Codewars community. With access to over 3 million developers, Qualified is in a unique position to help developers find their dream job, and for companies to reach their growth objectives with highly qualified talent!","hideHero":true,"publishDate":"2022-02-10T00:00-05:00"},{"prettyDate":"Jan 31, 2022","title":"Introducing Qualified SmartIDE","href":"https://www.qualified.io/blog/posts/introducing-qualified-smartide","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/6tjc9Hwx9YAiRa78dHFWJ6/a3f308e92c3289fef3c5e081d064fd8e/hero.jpg?w=100&q=1","length":"","excerpt":"Introducing SmartIDE! Our new enhanced code editing experience. We've taken our existing easy-to-use, web-based IDE, and added in intelligent, useful development tools to improve you and your candidate's code editing experience in a massive way. Advanced IDE features such as auto complete are now possible through our fully web-based experience.\n","collection":"Qualified","slug":"introducing-qualified-smartide","author":"Phil DeJarnett","htmlContent":"<h1>Editing Code on Websites</h1><p>Web-based code editors are not new. Qualified has been providing a streamlined code editing experience for taking assessments since its inception, and Codewars has been using one even longer.</p><p>Most web-based code editors provide a wide range of advanced functionality, including the obvious basic functions of keyword highlighting, automatic indentation, and more advanced functionality such as code folding and very simplistic code-completion.</p><p>But this pales in comparison to a full-fledged desktop IDE (integrated development environment). These editors not only provide significantly better code completion (taking into account context, available libraries, and more), they also provide insights into the code to help correct obvious errors, and inline documentation on how to use methods and object properties.</p><p>At Qualified, we wanted to bridge the gap between web editors and desktop editors, while maintaining the zero-effort startup experience our web IDE has always provided.</p><h1>Introducing Qualified SmartIDE</h1><p>What we've come up with is our enhanced SmartIDE. We've taken our existing easy-to-use, web-based IDE, and added in intelligent, useful development tools to improve you and your candidate's code editing experience in a massive way.</p><h2>Code Completion</h2><p>We've added in context-aware, intelligent code completion. Now you can get useful, immediate recommendations as you type.</p><h2>Hinting &amp; Error Checking</h2><p>Your code can now be checked for not only typographical errors, but logical errors as well. This happens seamlessly in the background, just like your IDE.</p><h2>Inline Documentation</h2><p>Documentation for methods, including argument types, method docs, and more, is available simply by mousing over a method—or even as you use autocomplete.</p><h1>Using SmartIDE</h1><p>The best thing about SmartIDE is you don't need to install or do anything special to use it as a developer. This premium feature needs to be enabled on your account, but once enabled, you can begin using it immediately.</p><p>Most of our project challenges will now show a <i>SmartIDE</i> badge, and you can use the <i>Preview</i> button to experience the new features immediately. </p><p>When you start a challenge with SmartIDE enabled, you'll see a new lightbulb icon in the toolbar. This icon will tell you the status of the feature. The first thing that happens is we silently spin up a temporary server in the cloud to run our engine. Once this server is ready, your code is then automatically kept in sync on the server, which parses your code and provides real-time feedback.</p><h1>FAQs</h1><h2>What features are supported?</h2><p>As of publishing this article, these features are currently supported.</p><ul><li><p>Code Autocompletion</p></li><li><p>Inline Documentation</p></li><li><p>Code Analysis &amp; hinting</p></li></ul><h2>What languages are supported?</h2><p>These languages are currently supported on Project Code Challenges.</p><ul><li><p>C# 7.3 &amp; 8.0</p></li><li><p>Java 17</p></li><li><p>JavaScript 10 &amp; 12</p></li><li><p>Python 3.7 &amp; 3.8</p></li><li><p>Ruby 2.5 &amp; 3.0</p></li><li><p>TypeScript 4.2</p></li></ul><p>We will be expanding support further as we continue to refine the feature, so please let us know what languages you'd like to see added. (Note that Classic Code Challenges do not support SmartIDE at this time.)</p><h2>Can I disable SmartIDE once it's enabled?</h2><p>Yes! SmartIDE can be <a href=\"https://www.qualified.io/hire/account/labs\"><u>enabled or disabled across your team, inside the Qualified Labs page</u></a>. But you can also opt into or out of SmartIDE on a per-challenge basis.&nbsp;</p><p>Why would you want to disable the SmartIDE? You probably won’t want to, but Qualified wants you to be in full control anyway, just in case you come up with some challenge ideas that would be limited by this feature. For example, if you are developing a debugging challenge and you don’t want to give the compiler issues away.</p><h3><b>Disabling SmartIDE on a per-challenge basis</b></h3><ol><li><p>Edit the challenge you want to disable the feature on.</p></li><li><p>Click on <i>Challenge Config</i> in the sidebar</p></li><li><p>Scroll down to <i>Options</i></p></li><li><p>Change the value for <i>Allow Solving with our SmartIDE</i> to <i>Never use SmartIDE</i></p></li></ol><h2>What are the benefits of SmartIDE over using a desktop IDE?</h2><p>Using a desktop IDE is great for developing your own applications, and would certainly be a preferred choice in those situations.</p><p>But when taking an assessment, either for recruiting or educational purposes, the focus should be on creating a consistent, easy-to-use experience. The majority of features in a full-fledged IDE are not only unnecessary for small tests, but can be detrimental to the candidate's or student's experience, overwhelming them with options and functionality they don't need to think about.</p><p>The Qualified SmartIDE was designed to focus on the functionality that is most immediately usable without learning a new interface. We've also worked hard to create a level playing field. Instead of building upon an existing interface that some developers may know, and others would have to learn first, we've built a streamlined experience that requires almost no learning before use from any developer.</p>","tags":null,"body":"","richBody":"{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Editing Code on Websites\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-1\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Web-based code editors are not new. Qualified has been providing a streamlined code editing experience for taking assessments since its inception, and Codewars has been using one even longer.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Most web-based code editors provide a wide range of advanced functionality, including the obvious basic functions of keyword highlighting, automatic indentation, and more advanced functionality such as code folding and very simplistic code-completion.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"But this pales in comparison to a full-fledged desktop IDE (integrated development environment). These editors not only provide significantly better code completion (taking into account context, available libraries, and more), they also provide insights into the code to help correct obvious errors, and inline documentation on how to use methods and object properties.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"At Qualified, we wanted to bridge the gap between web editors and desktop editors, while maintaining the zero-effort startup experience our web IDE has always provided.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Introducing Qualified SmartIDE\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-1\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"What we've come up with is our enhanced SmartIDE. We've taken our existing easy-to-use, web-based IDE, and added in intelligent, useful development tools to improve you and your candidate's code editing experience in a massive way.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"metadata\":{\"tags\":[]},\"sys\":{\"space\":{\"sys\":{\"type\":\"Link\",\"linkType\":\"Space\",\"id\":\"4ol5sgskowtw\"}},\"id\":\"4ojIRL3P7latvAhVRJgwmu\",\"type\":\"Asset\",\"createdAt\":\"2021-11-16T15:43:39.783Z\",\"updatedAt\":\"2021-11-16T15:43:39.783Z\",\"environment\":{\"sys\":{\"id\":\"master\",\"type\":\"Link\",\"linkType\":\"Environment\"}},\"revision\":1,\"locale\":\"en-US\"},\"fields\":{\"title\":\"SmartIDE Preview\",\"description\":\"\",\"file\":{\"url\":\"//images.ctfassets.net/4ol5sgskowtw/4ojIRL3P7latvAhVRJgwmu/e1b284b2691eeca0f2861fabc39313f0/smart-ide-preview.png\",\"details\":{\"size\":35264,\"image\":{\"width\":676,\"height\":355}},\"fileName\":\"smart-ide-preview.png\",\"contentType\":\"image/png\"}}}},\"content\":[],\"nodeType\":\"embedded-asset-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Code Completion\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"We've added in context-aware, intelligent code completion. Now you can get useful, immediate recommendations as you type.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Hinting & Error Checking\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Your code can now be checked for not only typographical errors, but logical errors as well. This happens seamlessly in the background, just like your IDE.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"metadata\":{\"tags\":[]},\"sys\":{\"space\":{\"sys\":{\"type\":\"Link\",\"linkType\":\"Space\",\"id\":\"4ol5sgskowtw\"}},\"id\":\"1oexbmka0B2Foxm6yxKAGb\",\"type\":\"Asset\",\"createdAt\":\"2021-11-16T15:45:06.274Z\",\"updatedAt\":\"2021-11-16T15:45:06.274Z\",\"environment\":{\"sys\":{\"id\":\"master\",\"type\":\"Link\",\"linkType\":\"Environment\"}},\"revision\":1,\"locale\":\"en-US\"},\"fields\":{\"title\":\"SmartIDE Hints\",\"description\":\"\",\"file\":{\"url\":\"//images.ctfassets.net/4ol5sgskowtw/1oexbmka0B2Foxm6yxKAGb/bb1a8f5e42b4e85576f27179e06b34eb/smart-ide-hints.png\",\"details\":{\"size\":5785,\"image\":{\"width\":338,\"height\":74}},\"fileName\":\"smart-ide-hints.png\",\"contentType\":\"image/png\"}}}},\"content\":[],\"nodeType\":\"embedded-asset-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Inline Documentation\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Documentation for methods, including argument types, method docs, and more, is available simply by mousing over a method—or even as you use autocomplete.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Using SmartIDE\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-1\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"The best thing about SmartIDE is you don't need to install or do anything special to use it as a developer. This premium feature needs to be enabled on your account, but once enabled, you can begin using it immediately.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Most of our project challenges will now show a \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"SmartIDE\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" badge, and you can use the \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"Preview\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" button to experience the new features immediately. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{\"target\":{\"metadata\":{\"tags\":[]},\"sys\":{\"space\":{\"sys\":{\"type\":\"Link\",\"linkType\":\"Space\",\"id\":\"4ol5sgskowtw\"}},\"id\":\"zBaWl663K4O0zvj2bSbnj\",\"type\":\"Asset\",\"createdAt\":\"2021-11-16T15:45:33.947Z\",\"updatedAt\":\"2021-11-16T15:45:33.947Z\",\"environment\":{\"sys\":{\"id\":\"master\",\"type\":\"Link\",\"linkType\":\"Environment\"}},\"revision\":1,\"locale\":\"en-US\"},\"fields\":{\"title\":\"SmartIDE Badge\",\"description\":\"\",\"file\":{\"url\":\"//images.ctfassets.net/4ol5sgskowtw/zBaWl663K4O0zvj2bSbnj/504779f1504943f37fab1fbcc70c7cb0/smart-ide-badge.png\",\"details\":{\"size\":1716,\"image\":{\"width\":158,\"height\":62}},\"fileName\":\"smart-ide-badge.png\",\"contentType\":\"image/png\"}}}},\"content\":[],\"nodeType\":\"embedded-asset-block\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"When you start a challenge with SmartIDE enabled, you'll see a new lightbulb icon in the toolbar. This icon will tell you the status of the feature. The first thing that happens is we silently spin up a temporary server in the cloud to run our engine. Once this server is ready, your code is then automatically kept in sync on the server, which parses your code and provides real-time feedback.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"FAQs\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-1\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"What features are supported?\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"As of publishing this article, these features are currently supported.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Code Autocompletion\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Inline Documentation\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Code Analysis & hinting\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"}],\"nodeType\":\"unordered-list\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"What languages are supported?\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"These languages are currently supported on Project Code Challenges.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"C# 7.3 & 8.0\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Java 17\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"JavaScript 10 & 12\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Python 3.7 & 3.8\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Ruby 2.5 & 3.0\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"TypeScript 4.2\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"}],\"nodeType\":\"unordered-list\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"We will be expanding support further as we continue to refine the feature, so please let us know what languages you'd like to see added. (Note that Classic Code Challenges do not support SmartIDE at this time.)\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Can I disable SmartIDE once it's enabled?\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Yes! SmartIDE can be \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.qualified.io/hire/account/labs\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"underline\"}],\"value\":\"enabled or disabled across your team, inside the Qualified Labs page\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\". But you can also opt into or out of SmartIDE on a per-challenge basis. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Why would you want to disable the SmartIDE? You probably won’t want to, but Qualified wants you to be in full control anyway, just in case you come up with some challenge ideas that would be limited by this feature. For example, if you are developing a debugging challenge and you don’t want to give the compiler issues away.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Disabling SmartIDE on a per-challenge basis\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-3\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Edit the challenge you want to disable the feature on.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Click on \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"Challenge Config\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" in the sidebar\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Scroll down to \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"Options\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Change the value for \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"Allow Solving with our SmartIDE\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" to \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"Never use SmartIDE\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"}],\"nodeType\":\"ordered-list\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"What are the benefits of SmartIDE over using a desktop IDE?\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Using a desktop IDE is great for developing your own applications, and would certainly be a preferred choice in those situations.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"But when taking an assessment, either for recruiting or educational purposes, the focus should be on creating a consistent, easy-to-use experience. The majority of features in a full-fledged IDE are not only unnecessary for small tests, but can be detrimental to the candidate's or student's experience, overwhelming them with options and functionality they don't need to think about.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"The Qualified SmartIDE was designed to focus on the functionality that is most immediately usable without learning a new interface. We've also worked hard to create a level playing field. Instead of building upon an existing interface that some developers may know, and others would have to learn first, we've built a streamlined experience that requires almost no learning before use from any developer.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"document\"}","description":"Introducing SmartIDE! Our new enhanced code editing experience. We've taken our existing easy-to-use, web-based IDE, and added in intelligent, useful development tools to improve you and your candidate's code editing experience in a massive way. Advanced IDE features such as auto complete are now possible through our fully web-based experience.","hideHero":true,"publishDate":"2022-01-31T00:00-05:00"},{"prettyDate":"Nov 5, 2021","title":"Reducing Time and Effort: Hiring Software Developers with Evidence Based Processes","href":"https://www.qualified.io/blog/posts/reducing-time-and-effort-hiring-software-developers-with-evidence-based","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/4Z2NchOD2AG81MPgp8Sa9z/3e8f1ba26fff5ce777b71aaff434c9e7/hiring_process_stock_photography_-_Google_Search.png?w=100&q=1","length":"","excerpt":"Hiring a good software developer can be a major undertaking. Figuring out who to hire, how to interview them, and what questions to ask takes time and effort. In this article we'll cover some evidence based hiring techniques that will help reduce the time and effort spent on hiring while at the same time improving the efficacy of the process.\n","collection":"Hiring","slug":"reducing-time-and-effort-hiring-software-developers-with-evidence-based","author":"Jake Hoffner","htmlContent":"<p>Hiring a good software developer can be a major undertaking. Figuring out who to hire, how to interview them, and what questions to ask takes time and effort. The process of hiring great technical talent is also expensive because it has the potential for mistakes which could kill budget or productivity if not fixed quickly enough - in this article we'll cover some evidence based hiring techniques that will help reduce the time and effort spent on hiring while at the same time improving the efficacy of the process.</p><h2><b>Create technical exercises tailored towards specific roles</b></h2><p>There are many different types of positions within most tech teams – from data scientists who work exclusively with numbers to front-end developers who focus on the UI/UX of an application. It is important to create technical exercises that are tailored towards specific roles you are trying to fill. Try to stay away from pure algorithms and data structures. These can be useful signals, but shouldn't be the sole focus of a developer coding assessment.</p><h3><b>A good software developer assessment will have a few different components:&nbsp;</b></h3><ul><li><p>A problem statement, which sets up the context for what sort of issue they need to resolve – this should be relevant and interesting enough that the candidate can understand how it applies to the role they are applying for.</p></li><li><p>The exercise itself should require some sort of code writing – this is where you will assess their technical ability, creativity, and problem-solving skills.&nbsp; The goal here isn't to have them write out a million lines of code; rather create an exercise that is challenging enough to evaluate the candidate's abilities.</p></li><li><p>Finally, they should be able to explain their thought process – what did they do and why? How would a colleague possibly solve this issue differently? A good exercise will provide you with all of these pieces of information so that you need to see how well candidates communicate ideas through code as well as through verbal and written communication mediums.</p></li></ul><p>Get the best of both worlds by having an interview process that combines both technical questions as well as work sample exercises, tailored towards specific positions within your organization. For example: If you're hiring a data scientist who works with large datasets – give them a SQL question or ask them to walk through some code used for extracting information from big chunks of text (such as blogs). Just remember not everyone is good at everything so keep your questions focused on the skills needed for the particular role. As long as they demonstrate enough competence it should be fine.</p><h2><b>Don't get too caught up in technology stacks</b></h2><p>Many companies get hung up on the technology stack they are hiring for. They focus their efforts on finding developers who know the exact stack that they are looking to build on. While it can be highly valuable to find someone who doesn't need to be trained on a specific technology – the reality is that good developers shouldn't have a hard time picking up new technologies.&nbsp;</p><p>Focusing too much on a specific technology can create a distraction within your process. Your team may focus too much on finding someone with a specific skill set and forget to evaluate candidates on other factors. It also can lead to an extended search process, as the developer talent pool for a specific technology may be scarce. If you want to hire the best candidates, you don't want to artificially limit your talent pool.</p><p>No doubt that knowing the technology stack is valuable, it certainly helps improve a new hire's \"time to effectiveness\" if that candidate doesn't need to spend time learning a new technology. However, technologies such as Django or the MEAN stack incorporate concepts and structures that can be carried over from other technologies. Take time to think about what sort of technologies are similar enough to your stack. Is Ruby really that different from Python? Could a Ruby on Rails developer quickly pick up Django? Shouldn't someone competent in both SQL and JavaScript be able to pick up MongoDB pretty easily?</p><p>If there isn't an exact match between their previous work history and something similar to the project/team environment – don't rule them out yet! Look at their previous work experience and focus on the most important aspects that made them successful in those roles. Is there enough related, but not exact fit, experience that speaks to the candidate's abilities to the job role? If you are using assessments to evaluate their skills, consider assessing them on a technology that they are more comfortable with, one that is similar enough to your stack.&nbsp;</p><h2><b>Make sure your interviews are fun and friendly!</b></h2><p>It's no secret that recruiting new employees isn't exactly easy. Why not make it as enjoyable as possible by adding some elements of entertainment to your hiring strategy. Everyone loves a good game after all, especially if there's something tangible up for grabs (such as an awesome new job). Not only will this encourage people to sit through more interviews but you're also likely to attract some very talented individuals who see how much fun you're having with things. The more engaged your candidates are with the process, the better hiring signal you will get from them.</p><p>When interviewing, make sure to keep the conversation engaging. You want the candidate to do most of the talking, but make sure they don't feel like they are sitting in front of a firing squad. Remember that if you determine that the candidate is a good hire, you want them to like the job too!</p><p>When assessing engineering candidates, don't just try to give them hard problems, but fun ones as well. Good developers love to program, and giving developers an interesting and engaging technical challenge to work on is a great way to get them excited about taking the time to complete the exercise and your company.</p><h2><b>Technical assessments are just a starting point</b></h2><p>Code assessments tools can be incredibly valuable for hiring developers, and it is something that should be done as part of the process. After all, no one wants to hire someone without seeing that they can actually code and solve problems programatically. However many companies get hung up with having someone take a test to see how they score – and then try to rank them based on that score alone. A proper assessment should give you more than just a score. It should give you insights that you can build off of, and take into the rest of your process.&nbsp;</p><p>Evidence-based technical assessments are a perfect fit for software developer hiring processes. Not only do they quickly weed out poor performers at the start of your hiring funnel, but the work created allows you to revisit it throughout the process. For example, why not give a developer a coding challenge to complete and then in a follow-up interview ask them how they would improve their design under certain conditions?&nbsp;</p><p>The goal of technical assessments should always be to get insight from candidates. The best skill evaluation platforms will allow you to harvest those insights for everything that they are worth. Work sample based assessments, such as coding assessment tools that have developers write code, not only produce scores but also produce consistent work samples which can be reviewed by your team. When combined with scoring rubrics and AI, a good assessment platform will allow your team to gain a deeper understanding of the quality of someone's work, not just their ability to complete the work.</p><h2><b>Create a structured interview process</b></h2><p>Structure creates the most reliable technical interview process. When technical interviews are structured, they tend to produce more consistent results and therefore better hiring decisions. They also make it far easier to compare candidates when interviewing in large numbers, by reducing insights down into discrete hiring signals that you can measure and make data-driven decisions around.&nbsp;</p><p>When you're crafting your interview questions and competencies, take time to think about how they'll be tracked. Many ATS systems contain an interview kit that allows questions responses to be rated. Even better - incorporate your assessment hiring signals into the mix so that it's easier for everyone to see the entire skill profile of a candidate in one place. <a href=\"https://www.qualified.io/\"><u>Qualified</u></a>'s platform is one solution to this problem. I've seen employers incorporate all types of input data points related specifically to interviewing processes, such as behavioral observations and response quality. This is all thanks to Qualified's new evidence engine, which crunches all of these inputs and spits out a unified profile of every insight collected.&nbsp;</p><h2><b>Limit what you use the whiteboard for</b></h2><p>Traditional technical hiring processes often involve an on-site or remote interview involving a whiteboard. Whiteboarding has caught some flak in recent years because it's considered an antiquated interview approach to have developers write code in a way that is awkward to them. It is just not something developers typically do, so it's putting them in an unnatural position. This doesn't mean whiteboarding is completely bad though. Whiteboards exist in offices because people use them, so think about cases where you would use a whiteboard in the real world. Turn the whiteboarding process into its own work sample.</p><p>Limit whiteboarding to technical exercises that involve open-ended design problems. Think about all of the brainstorming sessions your team has had in the past that involved a whiteboard. What is something that you could work on with a candidate that they could contribute ideas to, without needing a level of context that they don't currently have? Maybe ask them about products they use and pick one that you are also familiar with. For front-end developers, perhaps you can pull up a website design and ask them how they would go about approaching the overall implementation. What sort of components do they need to create, what sort of mobile optimization considerations do they need to make? For AI specialists, perhaps go over the sort of inputs and outputs a particular solution would need. \"Technical Communication\" and \"Design Thinking\" are well assessed through the use of whiteboarding.&nbsp;</p><h2><b>Friendly coding assessments</b></h2><p>Having candidates write code in front of you is not the only way to assess technical ability. You can look at all sorts of technical communication, design thinking and problem-solving skills through coding assessments that don't require the candidate to write code while people stare at every keystroke they make. This goes back to the idea that candidates perform best when they are able to replicate the duties of the role in a natural way. Allow candidates to write their code at home, in an environment that is friendly and comfortable to them – similar to how they will be writing code when on the job.&nbsp;</p><p>This doesn't mean you need to lose insights into the candidate's thought process. You can utilize recordings to understand exactly how their solution evolved over time. Coding assessment platforms that incorporate AI, such as with Qualified, will even allow you to gain additional insights on candidate performance that you may not otherwise notice. Not only will your candidates be more comfortable and perform closer to their true potential, but you will actually save time by skipping long coding sessions and actually learn more in the process.&nbsp;</p><h2><b>Utilize professionally designed coding tests</b></h2><p>Having to design technical assessments yourself can lead to a lot of wasted time, and can also produce unreliable results. This is especially true if you are interviewing for developers that have specialized skills in areas where the technical assessment has not been designed well. A lot goes into the design of a test. What technical skills does it need to test? What role specific criterion does it target? Is the test content valid? Does the coding challenge take best practices into account? Is it properly scored?&nbsp;</p><p>Testing coding skills is important, you want to make sure any tests around that testing are well defined and implemented. Instead of building your own challenges, consider having subject matter experts on your team pick from pre-existing challenges that are professionally designed.&nbsp;</p><h2><b>Code Reviews aren't only for Pull Requests</b></h2><p>The benefits mentioned above for whiteboarding can be applied to different approaches. Code reviews are a great example. You can code-pair with a candidate, perhaps using some of their own open-source code, or code they wrote for a previously administered coding assessment. Utilize the code as the discussion focus, talking through different possible solutions and the trade-offs of each approach. Ask the candidate how they would change their code now that they have talked through it more. What sort of improvements can be made?</p><p><b>Pro Tip:</b> In these cases, it's better to use code the candidate is already familiar with. If you give them code they didn't write and have never seen, they are going to feel very stressed trying to interpret the code in front of you. Keep in mind that if your process includes activities that aren't natural to the role, you will create weak hiring signals in your process. Developers typically interpret codebases on their own, and not with an audience watching them, so avoid putting them in awkward situations that may cause them to perform awkwardly as well.&nbsp;</p><h2><b>Conclusion</b></h2><p>Creating the perfect recruiting process can be stressful for hiring managers and their team, but it doesn't have to be. I hope this article has helped you think through some of the steps you want to take to improve the efficiency and reliability of your technical hiring process. Using an evidence-driven recruiting approach will result in faster decisions while reducing biases. Ultimately it's the inputs of your process that determine the quality of the outputs – make sure you obtain the most solid inputs you can.</p>","tags":null,"body":"","richBody":"{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Hiring a good software developer can be a major undertaking. Figuring out who to hire, how to interview them, and what questions to ask takes time and effort. The process of hiring great technical talent is also expensive because it has the potential for mistakes which could kill budget or productivity if not fixed quickly enough - in this article we'll cover some evidence based hiring techniques that will help reduce the time and effort spent on hiring while at the same time improving the efficacy of the process.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Create technical exercises tailored towards specific roles\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"There are many different types of positions within most tech teams – from data scientists who work exclusively with numbers to front-end developers who focus on the UI/UX of an application. It is important to create technical exercises that are tailored towards specific roles you are trying to fill. Try to stay away from pure algorithms and data structures. These can be useful signals, but shouldn't be the sole focus of a developer coding assessment.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"A good software developer assessment will have a few different components: \",\"nodeType\":\"text\"}],\"nodeType\":\"heading-3\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"A problem statement, which sets up the context for what sort of issue they need to resolve – this should be relevant and interesting enough that the candidate can understand how it applies to the role they are applying for.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"The exercise itself should require some sort of code writing – this is where you will assess their technical ability, creativity, and problem-solving skills.  The goal here isn't to have them write out a million lines of code; rather create an exercise that is challenging enough to evaluate the candidate's abilities.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Finally, they should be able to explain their thought process – what did they do and why? How would a colleague possibly solve this issue differently? A good exercise will provide you with all of these pieces of information so that you need to see how well candidates communicate ideas through code as well as through verbal and written communication mediums.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"}],\"nodeType\":\"unordered-list\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Get the best of both worlds by having an interview process that combines both technical questions as well as work sample exercises, tailored towards specific positions within your organization. For example: If you're hiring a data scientist who works with large datasets – give them a SQL question or ask them to walk through some code used for extracting information from big chunks of text (such as blogs). Just remember not everyone is good at everything so keep your questions focused on the skills needed for the particular role. As long as they demonstrate enough competence it should be fine.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Don't get too caught up in technology stacks\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Many companies get hung up on the technology stack they are hiring for. They focus their efforts on finding developers who know the exact stack that they are looking to build on. While it can be highly valuable to find someone who doesn't need to be trained on a specific technology – the reality is that good developers shouldn't have a hard time picking up new technologies. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Focusing too much on a specific technology can create a distraction within your process. Your team may focus too much on finding someone with a specific skill set and forget to evaluate candidates on other factors. It also can lead to an extended search process, as the developer talent pool for a specific technology may be scarce. If you want to hire the best candidates, you don't want to artificially limit your talent pool.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"No doubt that knowing the technology stack is valuable, it certainly helps improve a new hire's \\\"time to effectiveness\\\" if that candidate doesn't need to spend time learning a new technology. However, technologies such as Django or the MEAN stack incorporate concepts and structures that can be carried over from other technologies. Take time to think about what sort of technologies are similar enough to your stack. Is Ruby really that different from Python? Could a Ruby on Rails developer quickly pick up Django? Shouldn't someone competent in both SQL and JavaScript be able to pick up MongoDB pretty easily?\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"If there isn't an exact match between their previous work history and something similar to the project/team environment – don't rule them out yet! Look at their previous work experience and focus on the most important aspects that made them successful in those roles. Is there enough related, but not exact fit, experience that speaks to the candidate's abilities to the job role? If you are using assessments to evaluate their skills, consider assessing them on a technology that they are more comfortable with, one that is similar enough to your stack. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Make sure your interviews are fun and friendly!\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"It's no secret that recruiting new employees isn't exactly easy. Why not make it as enjoyable as possible by adding some elements of entertainment to your hiring strategy. Everyone loves a good game after all, especially if there's something tangible up for grabs (such as an awesome new job). Not only will this encourage people to sit through more interviews but you're also likely to attract some very talented individuals who see how much fun you're having with things. The more engaged your candidates are with the process, the better hiring signal you will get from them.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"When interviewing, make sure to keep the conversation engaging. You want the candidate to do most of the talking, but make sure they don't feel like they are sitting in front of a firing squad. Remember that if you determine that the candidate is a good hire, you want them to like the job too!\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"When assessing engineering candidates, don't just try to give them hard problems, but fun ones as well. Good developers love to program, and giving developers an interesting and engaging technical challenge to work on is a great way to get them excited about taking the time to complete the exercise and your company.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Technical assessments are just a starting point\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Code assessments tools can be incredibly valuable for hiring developers, and it is something that should be done as part of the process. After all, no one wants to hire someone without seeing that they can actually code and solve problems programatically. However many companies get hung up with having someone take a test to see how they score – and then try to rank them based on that score alone. A proper assessment should give you more than just a score. It should give you insights that you can build off of, and take into the rest of your process. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Evidence-based technical assessments are a perfect fit for software developer hiring processes. Not only do they quickly weed out poor performers at the start of your hiring funnel, but the work created allows you to revisit it throughout the process. For example, why not give a developer a coding challenge to complete and then in a follow-up interview ask them how they would improve their design under certain conditions? \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"The goal of technical assessments should always be to get insight from candidates. The best skill evaluation platforms will allow you to harvest those insights for everything that they are worth. Work sample based assessments, such as coding assessment tools that have developers write code, not only produce scores but also produce consistent work samples which can be reviewed by your team. When combined with scoring rubrics and AI, a good assessment platform will allow your team to gain a deeper understanding of the quality of someone's work, not just their ability to complete the work.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Create a structured interview process\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Structure creates the most reliable technical interview process. When technical interviews are structured, they tend to produce more consistent results and therefore better hiring decisions. They also make it far easier to compare candidates when interviewing in large numbers, by reducing insights down into discrete hiring signals that you can measure and make data-driven decisions around. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"When you're crafting your interview questions and competencies, take time to think about how they'll be tracked. Many ATS systems contain an interview kit that allows questions responses to be rated. Even better - incorporate your assessment hiring signals into the mix so that it's easier for everyone to see the entire skill profile of a candidate in one place. \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.qualified.io/\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"underline\"}],\"value\":\"Qualified\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"'s platform is one solution to this problem. I've seen employers incorporate all types of input data points related specifically to interviewing processes, such as behavioral observations and response quality. This is all thanks to Qualified's new evidence engine, which crunches all of these inputs and spits out a unified profile of every insight collected. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Limit what you use the whiteboard for\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Traditional technical hiring processes often involve an on-site or remote interview involving a whiteboard. Whiteboarding has caught some flak in recent years because it's considered an antiquated interview approach to have developers write code in a way that is awkward to them. It is just not something developers typically do, so it's putting them in an unnatural position. This doesn't mean whiteboarding is completely bad though. Whiteboards exist in offices because people use them, so think about cases where you would use a whiteboard in the real world. Turn the whiteboarding process into its own work sample.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Limit whiteboarding to technical exercises that involve open-ended design problems. Think about all of the brainstorming sessions your team has had in the past that involved a whiteboard. What is something that you could work on with a candidate that they could contribute ideas to, without needing a level of context that they don't currently have? Maybe ask them about products they use and pick one that you are also familiar with. For front-end developers, perhaps you can pull up a website design and ask them how they would go about approaching the overall implementation. What sort of components do they need to create, what sort of mobile optimization considerations do they need to make? For AI specialists, perhaps go over the sort of inputs and outputs a particular solution would need. \\\"Technical Communication\\\" and \\\"Design Thinking\\\" are well assessed through the use of whiteboarding. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Friendly coding assessments\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Having candidates write code in front of you is not the only way to assess technical ability. You can look at all sorts of technical communication, design thinking and problem-solving skills through coding assessments that don't require the candidate to write code while people stare at every keystroke they make. This goes back to the idea that candidates perform best when they are able to replicate the duties of the role in a natural way. Allow candidates to write their code at home, in an environment that is friendly and comfortable to them – similar to how they will be writing code when on the job. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"This doesn't mean you need to lose insights into the candidate's thought process. You can utilize recordings to understand exactly how their solution evolved over time. Coding assessment platforms that incorporate AI, such as with Qualified, will even allow you to gain additional insights on candidate performance that you may not otherwise notice. Not only will your candidates be more comfortable and perform closer to their true potential, but you will actually save time by skipping long coding sessions and actually learn more in the process. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Utilize professionally designed coding tests\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Having to design technical assessments yourself can lead to a lot of wasted time, and can also produce unreliable results. This is especially true if you are interviewing for developers that have specialized skills in areas where the technical assessment has not been designed well. A lot goes into the design of a test. What technical skills does it need to test? What role specific criterion does it target? Is the test content valid? Does the coding challenge take best practices into account? Is it properly scored? \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Testing coding skills is important, you want to make sure any tests around that testing are well defined and implemented. Instead of building your own challenges, consider having subject matter experts on your team pick from pre-existing challenges that are professionally designed. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Code Reviews aren't only for Pull Requests\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"The benefits mentioned above for whiteboarding can be applied to different approaches. Code reviews are a great example. You can code-pair with a candidate, perhaps using some of their own open-source code, or code they wrote for a previously administered coding assessment. Utilize the code as the discussion focus, talking through different possible solutions and the trade-offs of each approach. Ask the candidate how they would change their code now that they have talked through it more. What sort of improvements can be made?\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Pro Tip:\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\" In these cases, it's better to use code the candidate is already familiar with. If you give them code they didn't write and have never seen, they are going to feel very stressed trying to interpret the code in front of you. Keep in mind that if your process includes activities that aren't natural to the role, you will create weak hiring signals in your process. Developers typically interpret codebases on their own, and not with an audience watching them, so avoid putting them in awkward situations that may cause them to perform awkwardly as well. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Conclusion\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Creating the perfect recruiting process can be stressful for hiring managers and their team, but it doesn't have to be. I hope this article has helped you think through some of the steps you want to take to improve the efficiency and reliability of your technical hiring process. Using an evidence-driven recruiting approach will result in faster decisions while reducing biases. Ultimately it's the inputs of your process that determine the quality of the outputs – make sure you obtain the most solid inputs you can.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"document\"}","description":"Hiring a good software developer can be a major undertaking. Figuring out who to hire, how to interview them, and what questions to ask takes time and effort. In this article we'll cover some evidence based hiring techniques that will help reduce the time and effort spent on hiring while at the same time improving the efficacy of the process.","hideHero":true,"publishDate":"2021-11-05T00:00-05:00"},{"prettyDate":"Aug 2, 2021","title":"Getting deeper insights with our Inspect Solution feature","href":"https://www.qualified.io/blog/posts/getting-deeper-insights-with-our-inspect-solution-feature","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/1XucmbAyqtTmB5mKel4mqa/466539e76e3f84bd0ba62b05f2030c20/banner.png?w=100&q=1","length":"2 min read","excerpt":"Have you ever been reviewing candidate or student code, and wanted to get a deeper look into why their code was failing? With our new Inspect Solution feature, you can easily do just that.\n","collection":"Qualified","slug":"getting-deeper-insights-with-our-inspect-solution-feature","author":"Phil DeJarnett","htmlContent":"<p>Reviewing a candidate's code is already pretty powerful within Qualified. We provide automated scoring, <a href=\"https://docs.qualified.io/for-teams/reviewing/interpreting-results/#challenge-summary\">solution summaries</a>, and <a href=\"https://docs.qualified.io/for-teams/reviewing/interpreting-results/#code-playback\">detailed code playback</a>. With this information at your fingertips, you already have the ability to see how well a candidate did in general, see how they stacked up against others, and how they arrived at their solution.</p>\n<p>At Qualified, we always want to make the reviewing experience as useful as we can. For example, have you ever seen a solution that doesn't pass tests and you wanted to see if you could figure out how close they were to the solution? Or maybe you are looking at a particularly clever solution, and would like to experiment with it?</p>\n<p>With our new <strong>Inspect Solution</strong> feature, you can easily do just that.</p>\n<h2>Inspect Solution</h2>\n<p><img src=\"//images.contentful.com/4ol5sgskowtw/74frONElZSC5LeTWo0UV0O/b477841d5685444d0664ff68c1113325/inspect-solution.png\" alt=\"Inspect Solution Button\"></p>\n<p>Simply click the new button when looking at a solution's details, and you'll be able to make temporary edits to the code and run both the candidate's tests and the final submission tests. This feature opens up several new use cases:</p>\n<ul>\n<li>Use this feature to get deeper insights into where the developer might have made mistakes.</li>\n<li>Verify issues with running code (especially code that might be experiencing intermittent issues, such as due to random test cases).</li>\n<li>Share a screen with the candidate or student later for review.</li>\n<li>Gain insights into where candidates might be having trouble with custom challenges.</li>\n<li>Use this to open solutions on a projector to discuss with your team, allowing quick edits and testing theories.</li>\n</ul>\n<h2>But wait, there's more!</h2>\n<p>Imagine that you are reviewing the playback of a candidate's solution, and you see that they were heading in the right direction, but then deviated in a way they couldn't complete the challenge. Wouldn't it be great to be able to explore the path they were on before the mistake?</p>\n<p>Look no further, because during playback, Inspect Solution becomes <strong>Inspect Revision</strong>!</p>\n<p>You can use this feature to inspect any moment in the playback timeline! With this additional feature, you can dig into where a student or candidate might have had trouble that led them down a wrong path.</p>\n<p>Both features are available now on all teams, for all challenge types.</p>\n<blockquote>\n<h3>Including Q&amp;A Challenges?</h3>\n<p>Yes, even Q&amp;A challenges. While this probably isn't very useful for multiple-choice answers, you can use this feature to help get deeper insights into automated testing of free text answers, by being able to modify the candidate's answer, and see real-time automated scorer results.</p>\n</blockquote>\n","tags":null,"body":"Reviewing a candidate's code is already pretty powerful within Qualified. We provide automated scoring, [solution summaries](https://docs.qualified.io/for-teams/reviewing/interpreting-results/#challenge-summary), and [detailed code playback](https://docs.qualified.io/for-teams/reviewing/interpreting-results/#code-playback). With this information at your fingertips, you already have the ability to see how well a candidate did in general, see how they stacked up against others, and how they arrived at their solution.\n\nAt Qualified, we always want to make the reviewing experience as useful as we can. For example, have you ever seen a solution that doesn't pass tests and you wanted to see if you could figure out how close they were to the solution? Or maybe you are looking at a particularly clever solution, and would like to experiment with it?\n\nWith our new **Inspect Solution** feature, you can easily do just that.\n\n## Inspect Solution\n\n![Inspect Solution Button](//images.contentful.com/4ol5sgskowtw/74frONElZSC5LeTWo0UV0O/b477841d5685444d0664ff68c1113325/inspect-solution.png)\n\nSimply click the new button when looking at a solution's details, and you'll be able to make temporary edits to the code and run both the candidate's tests and the final submission tests. This feature opens up several new use cases:\n\n* Use this feature to get deeper insights into where the developer might have made mistakes.\n* Verify issues with running code (especially code that might be experiencing intermittent issues, such as due to random test cases).\n* Share a screen with the candidate or student later for review.\n* Gain insights into where candidates might be having trouble with custom challenges.\n* Use this to open solutions on a projector to discuss with your team, allowing quick edits and testing theories.\n\n## But wait, there's more!\n\nImagine that you are reviewing the playback of a candidate's solution, and you see that they were heading in the right direction, but then deviated in a way they couldn't complete the challenge. Wouldn't it be great to be able to explore the path they were on before the mistake?\n\nLook no further, because during playback, Inspect Solution becomes **Inspect Revision**!\n\nYou can use this feature to inspect any moment in the playback timeline! With this additional feature, you can dig into where a student or candidate might have had trouble that led them down a wrong path.\n\nBoth features are available now on all teams, for all challenge types.\n\n> ### Including Q&A Challenges?\n> \n> Yes, even Q&A challenges. While this probably isn't very useful for multiple-choice answers, you can use this feature to help get deeper insights into automated testing of free text answers, by being able to modify the candidate's answer, and see real-time automated scorer results.","richBody":null,"description":"Have you ever been reviewing candidate or student code, and wanted to get a deeper look into why their code was failing? With our new Inspect Solution feature, you can easily do just that.","hideHero":true,"publishDate":"2021-08-02T00:00-05:00"},{"prettyDate":"Jun 22, 2021","title":"New Major Release: New Stats, Insights, Challenge List, React Native and more!","href":"https://www.qualified.io/blog/posts/new-major-release-q2-2021","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/20qDjktwm8U15gSE2v360z/e422a2e9cf0887209df2529b2f9b6b48/banner.png?w=100&q=1","length":"3 min read","excerpt":"We recently released a number of new features and improvements that we are excited to tell you about. These include some great productivity improvements, new evidence data to help improve your evaluation process, and React Native support!\n","collection":"Qualified","slug":"new-major-release-q2-2021","author":"Jake Hoffner","htmlContent":"<p>We are excited to announce a major new release for Qualified! The release includes some great productivity improvements, new evidence data to help improve your evaluation process, and React Native support! It also happens to include some under the hood changes that will boost overall application performance and enable us to introduce even more great features in the near future.</p>\n<h2>New Stats</h2>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/8hhptT5ex63tmIQ8Vi1PZ/b81ffee73b6c02743c1c1f0660e8aacb/Marc_Dix_-__orgavision_Senior_Frontend_Developer_____Coding_Challenge__Results_-_Candidates_-_Qualified.png\" alt=\"New Stat Charts\"></p>\n<p>We have upgraded our solution stats to a new box-whisker chart format which gives you better details on how well someone has performed relative to others. We have also added a number of new statistical categories, including <strong>Effort</strong> (amount of edits made) and <strong>Cyclomatic Complexity</strong> (number of solution code paths).</p>\n<p>These new stat charts are available from within the \"Scoring &amp; Insights\" tab within the solution details dialog. They can show performance across up to 3 cohorts:</p>\n<ul>\n<li>Your own team members who have taken the challenge</li>\n<li>All other candidates who have submitted the challenge</li>\n<li>All global candidates who have submitted the challenge (only if challenge is linked to the Qualified library)</li>\n</ul>\n<h2>Insights Engine</h2>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/1IFSfRlB1t4idPmVOOrJaf/2bc663cdecdcbc8519b172ee8ffde30f/Mike_Price_-___New__General_Programming_Test_-_Java__JavaScript__Ruby__Clojure__Python__C___Scala__Elixir__Erlang__PHP__Resu.png\" alt=\"New Insights\"></p>\n<p>In addition to the new stats, the \"Scoring &amp; Insights\" tab also now includes an insights feature. This feature is driven by our insights engine, which looks at performance statistics as well as digs through playback history, in order to uncover important details that you might otherwise miss.</p>\n<p>For example, you can check insights to see if there is anything unusual about the playback history, such as a lot of outside pastes. You can also use it to check if there is anything out of the ordinary in terms of high or low performance. Did the candidate take an unusual amount of time on the challenge? Was there is an uncommon level of high effort? The engine will call these out and even offer recommendations on how you should proceed.</p>\n<h3>New Challenge Listing</h3>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/4oeNcsvXoO3P8aNaEzIyiv/987cc69634e6dbd447365533de0d6f22/Challenges_-_Qualified.png\" alt=\"Challenges List 2.0\"></p>\n<p>We have upgraded our \"Challenges\" section. The list is now using our new card format. We have surfaced more useful information to the view, while also allowing more actions to be performed, all while reducing space overall.</p>\n<h2>React Native Support</h2>\n<p>We have introduced support for React Native. This includes the ability to preview the UI while working on its solution. To kick things off, we have provided 3 new library challenges to get teams started assessing candidates.</p>\n<p>React Native is part of our extended library.</p>\n<h2>Other Improvements</h2>\n<h3>Collapsed labels</h3>\n<p>For customers who use a lot of labels, we have improved the UI so that many labels are collapsed down, improving overall real estate and reducing noise that is shown on the screen.</p>\n<h3>Improved candidate security</h3>\n<p>We have improved the login flow for candidates. Previously some candidates could get stuck in a state that was difficult for them to login. These issues have been cleared up, and now if a candidate is logged out and needs to login to an existing account, a verification email will be automatically sent.</p>\n<h3>Data performance improvements</h3>\n<p>You will notice that the app loads faster now, especially as you search and handle data within lists. This is due to a new set of APIs that we have incorporated into the app. These APIs are what have made the new stat charts possible. We will be expanding on these APIs moving forward to bring new features to the application.</p>\n<h3>More accurate dashboard funnel chart</h3>\n<p>We've made some changes to make the dashboard funnel chart more accurate. These changes are related to our new briefs APIs.</p>\n","tags":"New Features","body":"We are excited to announce a major new release for Qualified! The release includes some great productivity improvements, new evidence data to help improve your evaluation process, and React Native support! It also happens to include some under the hood changes that will boost overall application performance and enable us to introduce even more great features in the near future.\n\n## New Stats\n\n![New Stat Charts](//images.ctfassets.net/4ol5sgskowtw/8hhptT5ex63tmIQ8Vi1PZ/b81ffee73b6c02743c1c1f0660e8aacb/Marc_Dix_-__orgavision_Senior_Frontend_Developer_____Coding_Challenge__Results_-_Candidates_-_Qualified.png)\n\nWe have upgraded our solution stats to a new box-whisker chart format which gives you better details on how well someone has performed relative to others. We have also added a number of new statistical categories, including __Effort__ (amount of edits made) and __Cyclomatic Complexity__ (number of solution code paths). \n\nThese new stat charts are available from within the \"Scoring & Insights\" tab within the solution details dialog. They can show performance across up to 3 cohorts:\n- Your own team members who have taken the challenge\n- All other candidates who have submitted the challenge\n- All global candidates who have submitted the challenge (only if challenge is linked to the Qualified library)\n\n## Insights Engine\n\n![New Insights](//images.ctfassets.net/4ol5sgskowtw/1IFSfRlB1t4idPmVOOrJaf/2bc663cdecdcbc8519b172ee8ffde30f/Mike_Price_-___New__General_Programming_Test_-_Java__JavaScript__Ruby__Clojure__Python__C___Scala__Elixir__Erlang__PHP__Resu.png)\n\nIn addition to the new stats, the \"Scoring & Insights\" tab also now includes an insights feature. This feature is driven by our insights engine, which looks at performance statistics as well as digs through playback history, in order to uncover important details that you might otherwise miss. \n\nFor example, you can check insights to see if there is anything unusual about the playback history, such as a lot of outside pastes. You can also use it to check if there is anything out of the ordinary in terms of high or low performance. Did the candidate take an unusual amount of time on the challenge? Was there is an uncommon level of high effort? The engine will call these out and even offer recommendations on how you should proceed.\n\n### New Challenge Listing\n![Challenges List 2.0](//images.ctfassets.net/4ol5sgskowtw/4oeNcsvXoO3P8aNaEzIyiv/987cc69634e6dbd447365533de0d6f22/Challenges_-_Qualified.png)\n\nWe have upgraded our \"Challenges\" section. The list is now using our new card format. We have surfaced more useful information to the view, while also allowing more actions to be performed, all while reducing space overall.\n\n## React Native Support\nWe have introduced support for React Native. This includes the ability to preview the UI while working on its solution. To kick things off, we have provided 3 new library challenges to get teams started assessing candidates. \n\nReact Native is part of our extended library.\n\n## Other Improvements\n### Collapsed labels\nFor customers who use a lot of labels, we have improved the UI so that many labels are collapsed down, improving overall real estate and reducing noise that is shown on the screen. \n\n### Improved candidate security\nWe have improved the login flow for candidates. Previously some candidates could get stuck in a state that was difficult for them to login. These issues have been cleared up, and now if a candidate is logged out and needs to login to an existing account, a verification email will be automatically sent. \n\n### Data performance improvements\nYou will notice that the app loads faster now, especially as you search and handle data within lists. This is due to a new set of APIs that we have incorporated into the app. These APIs are what have made the new stat charts possible. We will be expanding on these APIs moving forward to bring new features to the application. \n\n### More accurate dashboard funnel chart\nWe've made some changes to make the dashboard funnel chart more accurate. These changes are related to our new briefs APIs.\n","richBody":null,"description":"We recently released a number of new features and improvements that we are excited to tell you about. These include some great productivity improvements, new evidence data to help improve your evaluation process, and React Native support!","hideHero":true,"publishDate":"2021-06-22T00:00-05:00"},{"prettyDate":"Jun 3, 2020","title":"Introducing Qualified Reports","href":"https://www.qualified.io/blog/posts/introducing-qualified-reports","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/4mcjVjp2QRxCAxJXFVDfsI/0fd51c067eaa544a7fe1988d2e9d0927/Depositphotos_29966261_s-2019.jpg?w=100&q=1","length":"3 min read","excerpt":"Qualified’s new reporting functionality allows you to create custom reports rich with insights into the performance and effectiveness of your assessment content.\n","collection":"Qualified","slug":"introducing-qualified-reports","author":"Jake Hoffner","htmlContent":"<p>We're excited to announce the official release of <strong>Qualified Reports</strong>, a flexible suite of reporting tools that allow you to create custom reports rich with insights into the performance and effectiveness of your assessment content. This new feature allows you to easily pivot and chart your data, making it easy to surface opportunities for improvement. Start by building a set of reports to give your team actionable insights that can be used to improve program outcomes whether you’re certifying, educating, or hiring developers.</p>\n<p>We've outlined some of the more common use cases for Qualified Reports below, but as always we'd welcome the opportunity to discuss your reporting needs with you directly. Here are some ideas on how you can best make use of this new feature!</p>\n<h1>Easily identify which questions, challenges, and assessments are effective</h1>\n<p>While Qualified's reporting tools give you the flexibility to report on a broad range of metrics, the most common reporting use cases focus on the effectiveness of your assessment content. By closely monitoring the effectiveness of your assessment content, your organization can benchmark its own performance and take a data driven approach to improving your success metrics and program outcomes. Here are a few examples of questions that Qualified Reports can help you answer.</p>\n<p><strong>How are developers performing on each of your assessments?</strong></p>\n<p>This report provides insights into the average score that developers are earning on each of your different assessments.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/2fGTjFEh5mB9oSFnC1oSgr/b1bdab9e2eb495128c7928b7cfe1dc79/Reports_-_Qualified.png\" alt=\"Reports Submitted Assessment Results\"></p>\n<p><strong>Are your assessment questions too easy, too difficult, or just right?</strong></p>\n<p>This report drills down beyond the assessment level, looking at the relative difficulty of each of your Q&amp;A style questions. Dive in deeper and understand how each candidate performed on a per question basis.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/6FolLiCM00Fdf8u1SpZHLL/f21aed714e8e1f27341eaed5724d6a1e/Q_A_Report_-_Qualified.png\" alt=\"Are your assessment questions too easy, too difficult, or just right?\"></p>\n<h1>Assess developer performance based on challenge topic</h1>\n<p>If you're looking to report on the strengths and weaknesses of individual developers, this style of report allows you to look at each developer's competencies and demonstrated skills across languages, frameworks, &amp; topics.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/6p8qZG2QfMdaVg50jCj1Sn/d4b4f90246d31d4e07a14ca55b023d09/Screen_Shot_2020-06-03_at_3.53.07_PM.png\" alt=\"Assess developer performance based on challenge topic\"></p>\n<h1>Visualize how many assessments you are sending and their status</h1>\n<p>Any pivot table can easily be turned into various types of charts. Check out how you can view the status of assessment results, created over a period of time.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/4GkRatdJeq05np9Fw3Xj5R/a3c2d4c1e5dcec893a2f8e1735238f38/Reports_-_Qualified.png\" alt=\"Identify current aggregate status of assessment results, based off of when they were sent\"></p>\n<h1>Customize report filters and fields and then export to multiple formats</h1>\n<p>All data that you see within the reporting UI can be exported to multiple formats. Use Excel or CSV formats to export your data into external tools for additional reporting. Export to PDF, Image, or HTML to share your reports with colleagues.</p>\n<h1>Other common reporting criteria and use cases</h1>\n<p>Qualified Reports give you the ability to create custom pivot charts from dozens of different data fields. All reports can be exported to CSV or Excel format, making it easy to import assessment data into other systems.</p>\n<p><strong>Common criteria used to build reports</strong></p>\n<ul>\n<li>Number of solutions submitted</li>\n<li>Average score</li>\n<li>Completion time</li>\n<li>Pass count</li>\n<li>Pass rate</li>\n<li>Review score</li>\n<li>Plagiarism risk level</li>\n<li>Code similarity match %</li>\n<li>Cyclomatic complexity</li>\n</ul>\n<p><strong>Other common reporting use cases to improve your program outcomes</strong></p>\n<ul>\n<li>Identify reviewers who are overly biased</li>\n<li>Benchmark target cut scores for assessments based on pass/fail rates</li>\n<li>Identify coding tasks that effectively filter our poor performers</li>\n<li>Monitor which cohorts are performing best and worst</li>\n</ul>\n<p>These are just a few of the many custom reports that you can create using this new functionality.</p>\n<p><strong>What metrics does your organization want to report on?</strong></p>\n<p>Let us know by shooting us an email at team(at)<a href=\"http://qualified.io\">qualified.io</a>. We'd be happy to set up a 1-on-1 reporting consultation with your team today!</p>\n","tags":null,"body":"We're excited to announce the official release of __Qualified Reports__, a flexible suite of reporting tools that allow you to create custom reports rich with insights into the performance and effectiveness of your assessment content. This new feature allows you to easily pivot and chart your data, making it easy to surface opportunities for improvement. Start by building a set of reports to give your team actionable insights that can be used to improve program outcomes whether you’re certifying, educating, or hiring developers.\n\nWe've outlined some of the more common use cases for Qualified Reports below, but as always we'd welcome the opportunity to discuss your reporting needs with you directly. Here are some ideas on how you can best make use of this new feature!\n\n# Easily identify which questions, challenges, and assessments are effective\nWhile Qualified's reporting tools give you the flexibility to report on a broad range of metrics, the most common reporting use cases focus on the effectiveness of your assessment content. By closely monitoring the effectiveness of your assessment content, your organization can benchmark its own performance and take a data driven approach to improving your success metrics and program outcomes. Here are a few examples of questions that Qualified Reports can help you answer.\n\n__How are developers performing on each of your assessments?__\n\nThis report provides insights into the average score that developers are earning on each of your different assessments. \n\n![Reports Submitted Assessment Results](//images.ctfassets.net/4ol5sgskowtw/2fGTjFEh5mB9oSFnC1oSgr/b1bdab9e2eb495128c7928b7cfe1dc79/Reports_-_Qualified.png)\n\n__Are your assessment questions too easy, too difficult, or just right?__\n\nThis report drills down beyond the assessment level, looking at the relative difficulty of each of your Q&A style questions. Dive in deeper and understand how each candidate performed on a per question basis.\n\n![Are your assessment questions too easy, too difficult, or just right?](//images.ctfassets.net/4ol5sgskowtw/6FolLiCM00Fdf8u1SpZHLL/f21aed714e8e1f27341eaed5724d6a1e/Q_A_Report_-_Qualified.png)\n\n# Assess developer performance based on challenge topic\n\nIf you're looking to report on the strengths and weaknesses of individual developers, this style of report allows you to look at each developer's competencies and demonstrated skills across languages, frameworks, & topics.\n\n![Assess developer performance based on challenge topic](//images.ctfassets.net/4ol5sgskowtw/6p8qZG2QfMdaVg50jCj1Sn/d4b4f90246d31d4e07a14ca55b023d09/Screen_Shot_2020-06-03_at_3.53.07_PM.png)\n\n\n# Visualize how many assessments you are sending and their status\nAny pivot table can easily be turned into various types of charts. Check out how you can view the status of assessment results, created over a period of time. \n\n![Identify current aggregate status of assessment results, based off of when they were sent](//images.ctfassets.net/4ol5sgskowtw/4GkRatdJeq05np9Fw3Xj5R/a3c2d4c1e5dcec893a2f8e1735238f38/Reports_-_Qualified.png)\n\n# Customize report filters and fields and then export to multiple formats\nAll data that you see within the reporting UI can be exported to multiple formats. Use Excel or CSV formats to export your data into external tools for additional reporting. Export to PDF, Image, or HTML to share your reports with colleagues. \n\n# Other common reporting criteria and use cases\nQualified Reports give you the ability to create custom pivot charts from dozens of different data fields. All reports can be exported to CSV or Excel format, making it easy to import assessment data into other systems.\n\n__Common criteria used to build reports__\n- Number of solutions submitted\n- Average score\n- Completion time\n- Pass count\n- Pass rate\n- Review score\n- Plagiarism risk level\n- Code similarity match %\n- Cyclomatic complexity\n\n\n__Other common reporting use cases to improve your program outcomes__\n- Identify reviewers who are overly biased\n- Benchmark target cut scores for assessments based on pass/fail rates\n- Identify coding tasks that effectively filter our poor performers\n- Monitor which cohorts are performing best and worst\n\nThese are just a few of the many custom reports that you can create using this new functionality. \n\n__What metrics does your organization want to report on?__ \n\nLet us know by shooting us an email at team(at)qualified.io. We'd be happy to set up a 1-on-1 reporting consultation with your team today!\n","richBody":null,"description":"Qualified’s new reporting functionality allows you to create custom reports rich with insights into the performance and effectiveness of your assessment content. ","hideHero":true,"publishDate":"2020-06-03T00:00-07:00"},{"prettyDate":"Mar 27, 2020","title":"Colt Steele: What I've Learned Assessing 600,000+ Software Engineers","href":"https://www.qualified.io/blog/posts/colt-steele-what-ive-learned-assessing-600-000-software-engineers","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/5iF7lEJ0ppq8lStgs88tEa/3712b8e9bd4ff1bdfd658df71b97503e/Screen_Shot_2020-03-27_at_10.55.14_AM.png?w=100&q=1","length":"1 min read","excerpt":"Colt Steele is a software engineer and educator that's built development curriculum for companies like Udemy, Springboard, Galvanize, and Udacity. We caught up with Colt to discuss what he's learned about teaching coding to 600,000+ software engineers.\n","collection":"Software Engineering","slug":"colt-steele-what-ive-learned-assessing-600-000-software-engineers","author":"Geoff Roberts","htmlContent":"<p>Check out this discussion with software engineer and educator <a href=\"https://www.linkedin.com/in/coltsteele/\">Colt Steele</a>. Colt has built development curriculum for some of the top coding bootcamps in the world.</p>\n<p><a href=\"https://www.youtube.com/watch?v=apjmoi0j2Ao\"><img src=\"https://res.cloudinary.com/geoffqualified/image/upload/v1585331879/Screen_Shot_2020-03-27_at_10.57.28_AM_f89qkd.png\" alt=\"\"></a></p>\n<h3>In this live Q&amp;A we discuss topics including:</h3>\n<ol>\n<li>How Colt built a learned to code and built a career in developer education</li>\n<li>The hallmarks of teaching coding effectively</li>\n<li>The value of a traditional computer science degree vs. a coding bootcamp</li>\n<li>How the tech industry can handle the influx of junior engineers that's flooding the market from coding bootcamps, developing graduates into mid-to-senior level engineers</li>\n<li>Colt's latest project, <a href=\"https://www.springboard.com/courses/software-engineering-career-track/?utm_source=qualifiedio&amp;utm_medium=affiliates&amp;utm_campaign=sec&amp;utm_term=paid&amp;utm_content=blogcoltsteele3272020\">Springboard's Software Engineering Career Track</a></li>\n</ol>\n","tags":null,"body":"Check out this discussion with software engineer and educator [Colt Steele](https://www.linkedin.com/in/coltsteele/). Colt has built development curriculum for some of the top coding bootcamps in the world.\n\n[![](https://res.cloudinary.com/geoffqualified/image/upload/v1585331879/Screen_Shot_2020-03-27_at_10.57.28_AM_f89qkd.png)](https://www.youtube.com/watch?v=apjmoi0j2Ao)\n\n### In this live Q&A we discuss topics including:\n\n1. How Colt built a learned to code and built a career in developer education\n2. The hallmarks of teaching coding effectively\n3. The value of a traditional computer science degree vs. a coding bootcamp\n4. How the tech industry can handle the influx of junior engineers that's flooding the market from coding bootcamps, developing graduates into mid-to-senior level engineers\n5. Colt's latest project, [Springboard's Software Engineering Career Track](https://www.springboard.com/courses/software-engineering-career-track/?utm_source=qualifiedio&utm_medium=affiliates&utm_campaign=sec&utm_term=paid&utm_content=blogcoltsteele3272020)\n","richBody":null,"description":"Colt Steele is a software engineer and educator that's built development curriculum for companies like Udemy, Springboard, Galvanize, and Udacity. We caught up with Colt to discuss what he's learned about teaching coding to 600,000+ software engineers.","hideHero":true,"publishDate":"2020-03-27T00:00-07:00"},{"prettyDate":"Mar 23, 2020","title":"5 Steps To Transition To Fully Remote Software Engineering Hiring","href":"https://www.qualified.io/blog/posts/5-steps-to-transition-to-fully-remote-software-engineering-hiring","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/5T86HjV6pmhBhzf5bxhzhV/382a5c995ceb04e170ce7981dcdfbd53/Screen_Shot_2020-03-19_at_5.22.24_PM.png?w=100&q=1","length":"6 min read","excerpt":"At Qualified, our team has always been 100% remote. That means we’ve hired our entire engineering team remotely and have always considered the remote experience when building our developer assessment platform. This post provides straightforward guidance on how you can take your old on-site hiring process and adapt it for the remote first world.\n","collection":"Hiring","slug":"5-steps-to-transition-to-fully-remote-software-engineering-hiring","author":"Geoff Roberts","htmlContent":"<p>While Covid-19 is busy wrapping the world in terror, one of the lasting consequences of the pandemic may very well be that Covid-19 is the catalyst that greatly accelerates the remote work trend for many tech companies. While we’ll all be desperately in need of a return to the office water cooler whenever quarantining ends, it seems likely that many companies will forever be at least more remote friendly than they were previously.</p>\n<p>At Qualified, our team has always been 100% remote. That means we’ve hired our entire engineering team remotely and have always considered the remote experience when building our developer assessment platform. As we've watched the Coronavirus force many companies to embrace remote work, in-person hiring processes need to be redesigned in order to source and hire developers completely remotely. This post provides straightforward guidance on how you can take your old on-site hiring process and adapt it for the remote first world.</p>\n<p>The good news? Making this transition can actually improve the efficiency and output of your hiring process altogether.</p>\n<h1>Promote your open roles as remote friendly</h1>\n<p>Most of your top of the funnel hiring process will remain unchanged, but consider posting your open roles to remote friendly job boards. <a href=\"https://weworkremotely.com/\">WeWorkRemotely</a> is a great option, or consider posting your jobs to sites like <a href=\"https://angel.co/jobs\">AngelList</a> but setting the location for your open roles to “Remote.”</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/1SAttlP3pRcTGGOmcC4XMR/560ae181dc3d7ee453f8965ff0912808/Screen_Shot_2020-03-19_at_4.17.32_PM.png\" alt=\"AngelList Remote Jobs\"></p>\n<p>This change will likely turn out to be a blessing in disguise! By accepting\napplications from remote workers you’re dramatically opening up the talent pool that you can hire from.</p>\n<h1>Talent acquisition handles pre-screens per usual</h1>\n<p>Once your job postings are up and open to remote candidates, applications should roll into your applicant tracking system per usual. And your recruiting or talent acquisition team can handle the initial screening of applicants as they normally would.</p>\n<p>However, consider using Zoom or other video call services instead of conducting phone screens. One of the benefits of on-site interviews is you get to see the applicant’s body language, social queues, and mannerisms—video calls provide an opportunity to similarly pick up on these signals, so they actually represent an upgrade on your usual phone screening process.</p>\n<p>Additionally, considering using a very short (less than 30 minutes) coding assessment when you’re accepting applications to pre-screen candidates for technical skills. If you have decent applicant flow, this can be a great way to ensure that you spend your time with applicants who have already demonstrated some basic proficiency in writing code.</p>\n<p>For example, <a href=\"https://www.qualified.io/assess/5942d597baa76e0022a2dd94\">here’s a quick demo of one of our coding assessments focused on React skills</a>.</p>\n<h1>Use coding assessments to capture relevant work samples</h1>\n<p>As your talent acquisition team finds good candidates—ones they would typically invite to an on-site interview—instead focus on capturing a work sample from them highly relevant to the actual work they’d be tasked with if hired. This should be some sort of coding project or assessment that’s a bit more involved (we recommend 2-3 hours at the most), but it should be designed specifically to assess the languages, frameworks, and other technical skills that the role requires. This is appropriate at this stage because your talent acquisition team has already had the opportunity to sell the candidate on the role.</p>\n<p>Work samples have proven to be <a href=\"https://www.qualified.io/blog/posts/truly-predictive-software-engineering-interviews\">the single hiring activity that’s most predictive of a candidate’s ability to be successful on the job</a>—a platform like Qualified allows you to build your own custom coding projects or choose from a library of pre-built assessments. Candidates can work on these coding activities in their own time, giving them every opportunity to showcase their best work.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/1fuBYYkuLvvkZEzO4EMRdp/28f0973caf4b25982514ab5113ebf189/Screen_Shot_2020-03-19_at_5.07.09_PM.png\" alt=\"Qualified.io Assessment Library\"></p>\n<h1>Ask engineers to watch code playback for finalist candidates</h1>\n<p>By now you should be in the middle of your hiring process, with candidates who represent a solid culture-add to your company and that have provided a reasonably scoped and highly relevant work sample. This is the first stage in your hiring process where you should involve your engineering term.</p>\n<p>You can use auto-scoring technology to score the incoming code submissions, which is useful in validating which candidates can do the work you’ve tasked them with without pulling your engineers away from their day-to-day work. But at this stage you want your engineering leaders to go a bit deeper—it’s time to assess the quality of each candidate’s code.</p>\n<p>This is where code playback can be really useful—ask your engineers to watch 5 minutes of each candidate’s coding submission, focusing on a particularly important or challenging part of your coding activity. Code playback can be sped up, making it easy to watch a solution that took 30 minutes to code in just a few minutes. This will give engineers a sense of the candidate’s thought process and coding ability—they can take notes on what they see and bring their feedback and comments directly to the candidate at the next stage of the hiring process.</p>\n<h1>Replace on-sites with pair programming sessions</h1>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/6GIau3UwswcasU8X8E1bLO/b8216149383fac0f907804d8be37182d/pair-programming-2.gif\" alt=\"Qualified.io Pair Programming\">\nNow that your engineers have had a chance to review the code each candidate has submitted, it’s time to replace your on-site interviews with pair-programming sessions. Qualified makes it easy to turn any coding assessment or project into a pair-programming session, so have at least two members of your engineering team pair with the candidate. Having multiple team members interview the candidate at the same time has been proven to increase objectivity, so it’s a good practice whenever possible.</p>\n<p>As you’ve already watched a bit of code playback, this is a great time to ask the candidate specific questions about the code that they submitted. Better yet, ask the candidate what they might do next or how they’d alter their approach if new requirements were added. This sort of specific follow-up is a great way to see how candidates receive and respond to feedback and also gives you an opportunity to assess their problem solving ability.</p>\n<p>Perhaps more importantly, this is also a much better experience for the candidate rather than asking them to write code as you look on. You’ll get a deeper level of insight, the candidate will have less anxiety, and they’ll be impressed by your preparation as you speak knowledgeably about the coding activity they’ve already completed.</p>\n<h1>Conclusion</h1>\n<p>Not only does this approach open up the talent pool that your company can hire from, but it’s also significantly more efficient than the normal process associated with on-site interviews for developers. Automated scoring and code playback tools will greatly reduce the amount of time your engineers need to spend reviewing coding projects—that’s a remote first improvement I think we all can get behind!</p>\n<p>If you need help adapting your hiring process to a quarantining world where social distancing is the new norm, drop us an email at <a href=\"/cdn-cgi/l/email-protection#fb8f9e9a96bb8a8e9a97929d929e9fd59294\"><span class=\"__cf_email__\" data-cfemail=\"c0b4a5a1ad80b1b5a1aca9a6a9a5a4eea9af\">[email&nbsp;protected]</span></a> or <a href=\"https://www.qualified.io/signup\">sign up for a free trial of Qualified</a>.</p>\n<p>We hope you stay safe, healthy, and hire well!</p>\n","tags":null,"body":"While Covid-19 is busy wrapping the world in terror, one of the lasting consequences of the pandemic may very well be that Covid-19 is the catalyst that greatly accelerates the remote work trend for many tech companies. While we’ll all be desperately in need of a return to the office water cooler whenever quarantining ends, it seems likely that many companies will forever be at least more remote friendly than they were previously.\n\nAt Qualified, our team has always been 100% remote. That means we’ve hired our entire engineering team remotely and have always considered the remote experience when building our developer assessment platform. As we've watched the Coronavirus force many companies to embrace remote work, in-person hiring processes need to be redesigned in order to source and hire developers completely remotely. This post provides straightforward guidance on how you can take your old on-site hiring process and adapt it for the remote first world. \n\nThe good news? Making this transition can actually improve the efficiency and output of your hiring process altogether.\n\n# Promote your open roles as remote friendly\nMost of your top of the funnel hiring process will remain unchanged, but consider posting your open roles to remote friendly job boards. [WeWorkRemotely](https://weworkremotely.com/) is a great option, or consider posting your jobs to sites like [AngelList](https://angel.co/jobs) but setting the location for your open roles to “Remote.” \n\n![AngelList Remote Jobs](//images.ctfassets.net/4ol5sgskowtw/1SAttlP3pRcTGGOmcC4XMR/560ae181dc3d7ee453f8965ff0912808/Screen_Shot_2020-03-19_at_4.17.32_PM.png)\n\nThis change will likely turn out to be a blessing in disguise! By accepting\napplications from remote workers you’re dramatically opening up the talent pool that you can hire from. \n\n# Talent acquisition handles pre-screens per usual\nOnce your job postings are up and open to remote candidates, applications should roll into your applicant tracking system per usual. And your recruiting or talent acquisition team can handle the initial screening of applicants as they normally would.\n\nHowever, consider using Zoom or other video call services instead of conducting phone screens. One of the benefits of on-site interviews is you get to see the applicant’s body language, social queues, and mannerisms—video calls provide an opportunity to similarly pick up on these signals, so they actually represent an upgrade on your usual phone screening process.\n\nAdditionally, considering using a very short (less than 30 minutes) coding assessment when you’re accepting applications to pre-screen candidates for technical skills. If you have decent applicant flow, this can be a great way to ensure that you spend your time with applicants who have already demonstrated some basic proficiency in writing code.\n\nFor example, [here’s a quick demo of one of our coding assessments focused on React skills](https://www.qualified.io/assess/5942d597baa76e0022a2dd94).\n\n# Use coding assessments to capture relevant work samples\nAs your talent acquisition team finds good candidates—ones they would typically invite to an on-site interview—instead focus on capturing a work sample from them highly relevant to the actual work they’d be tasked with if hired. This should be some sort of coding project or assessment that’s a bit more involved (we recommend 2-3 hours at the most), but it should be designed specifically to assess the languages, frameworks, and other technical skills that the role requires. This is appropriate at this stage because your talent acquisition team has already had the opportunity to sell the candidate on the role.\n\nWork samples have proven to be [the single hiring activity that’s most predictive of a candidate’s ability to be successful on the job](https://www.qualified.io/blog/posts/truly-predictive-software-engineering-interviews)—a platform like Qualified allows you to build your own custom coding projects or choose from a library of pre-built assessments. Candidates can work on these coding activities in their own time, giving them every opportunity to showcase their best work.\n\n![Qualified.io Assessment Library](//images.ctfassets.net/4ol5sgskowtw/1fuBYYkuLvvkZEzO4EMRdp/28f0973caf4b25982514ab5113ebf189/Screen_Shot_2020-03-19_at_5.07.09_PM.png)\n \n# Ask engineers to watch code playback for finalist candidates\nBy now you should be in the middle of your hiring process, with candidates who represent a solid culture-add to your company and that have provided a reasonably scoped and highly relevant work sample. This is the first stage in your hiring process where you should involve your engineering term.\n\nYou can use auto-scoring technology to score the incoming code submissions, which is useful in validating which candidates can do the work you’ve tasked them with without pulling your engineers away from their day-to-day work. But at this stage you want your engineering leaders to go a bit deeper—it’s time to assess the quality of each candidate’s code. \n\nThis is where code playback can be really useful—ask your engineers to watch 5 minutes of each candidate’s coding submission, focusing on a particularly important or challenging part of your coding activity. Code playback can be sped up, making it easy to watch a solution that took 30 minutes to code in just a few minutes. This will give engineers a sense of the candidate’s thought process and coding ability—they can take notes on what they see and bring their feedback and comments directly to the candidate at the next stage of the hiring process.\n\n# Replace on-sites with pair programming sessions\n![Qualified.io Pair Programming](//images.ctfassets.net/4ol5sgskowtw/6GIau3UwswcasU8X8E1bLO/b8216149383fac0f907804d8be37182d/pair-programming-2.gif)\nNow that your engineers have had a chance to review the code each candidate has submitted, it’s time to replace your on-site interviews with pair-programming sessions. Qualified makes it easy to turn any coding assessment or project into a pair-programming session, so have at least two members of your engineering team pair with the candidate. Having multiple team members interview the candidate at the same time has been proven to increase objectivity, so it’s a good practice whenever possible.\n\nAs you’ve already watched a bit of code playback, this is a great time to ask the candidate specific questions about the code that they submitted. Better yet, ask the candidate what they might do next or how they’d alter their approach if new requirements were added. This sort of specific follow-up is a great way to see how candidates receive and respond to feedback and also gives you an opportunity to assess their problem solving ability.\n\nPerhaps more importantly, this is also a much better experience for the candidate rather than asking them to write code as you look on. You’ll get a deeper level of insight, the candidate will have less anxiety, and they’ll be impressed by your preparation as you speak knowledgeably about the coding activity they’ve already completed. \n\n# Conclusion\nNot only does this approach open up the talent pool that your company can hire from, but it’s also significantly more efficient than the normal process associated with on-site interviews for developers. Automated scoring and code playback tools will greatly reduce the amount of time your engineers need to spend reviewing coding projects—that’s a remote first improvement I think we all can get behind!\n\nIf you need help adapting your hiring process to a quarantining world where social distancing is the new norm, drop us an email at team@qualified.io or [sign up for a free trial of Qualified](https://www.qualified.io/signup).\n\nWe hope you stay safe, healthy, and hire well!","richBody":null,"description":"At Qualified, our team has always been 100% remote. That means we’ve hired our entire engineering team remotely and have always considered the remote experience when building our developer assessment platform. This post provides straightforward guidance on how you can take your old on-site hiring process and adapt it for the remote first world. ","hideHero":true,"publishDate":"2020-03-23T00:00-07:00"},{"prettyDate":"Mar 15, 2020","title":"The Science Behind Making Software Engineering Interviews Truly Predictive of Job Performance","href":"https://www.qualified.io/blog/posts/truly-predictive-software-engineering-interviews","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/31WZRELEeivAYTuKiohRBx/7c7b7581fbcda8a20e06d825ea821f5d/Screen_Shot_2020-02-13_at_2.34.35_PM.png?w=100&q=1","length":"23 min read","excerpt":"There is a plethora of data and research available that outlines exactly how companies can build a hiring process for software engineers that's truly predictive of their future, on-the-job performance. Yet, the tech industry at large has all but ignored these practices opting instead for antiquated hiring processes with low preditive validity.\n","collection":"Hiring","slug":"truly-predictive-software-engineering-interviews","author":"Geoff Roberts","htmlContent":"<p>I’ve spent much of the past year researching a single topic—how companies can design an interview process for software engineers that’s truly predictive of their ability to deliver on the job. What I’ve discovered I’m still struggling to comprehend—there’s an enormous amount of research and empirical evidence out there that details <em>exactly</em> how you can build a more predictive hiring process for software engineers. But the tech industry and hiring managers at large have all but completely ignored this guidance, relying instead on antiquated hiring processes that have actually proven to be anything but effective.</p>\n<p>Tikhon Jelvis, Principal AI Scientist at Target, seems similarly flabbergasted by our industry’s inexplicable ignorance. “The fact that more companies aren’t moving in this direction is an indictment of an industry that spends a remarkable amount of time and money on recruiting and selecting candidates,” <a href=\"https://www.forbes.com/sites/quora/2017/02/23/work-sample-tests-should-be-the-future-of-software-engineering-interviews/#3de1899a7dc4\">Jelvis writes</a>.</p>\n<p>This paper will build a case for revamping your hiring process around a methodology that’s been proven to deliver better software engineers with the skills required to be successful on the job.</p>\n<h1>The business case for building a predictive hiring process</h1>\n<p>In the coming pages I’ll present concrete, research based evidence for how your company can build a more predictive hiring process for software engineers. But first, here’s why you should listen up.</p>\n<p>“Employers must make hiring decisions; they have no choice about that,” write Frank Schmidt and John Hunter in their study <em><a href=\"https://www.researchgate.net/publication/232564809_The_Validity_and_Utility_of_Selection_Methods_in_Personnel_Psychology\">The Validity and Utility of Selection Methods In Personnel Psychology</a></em>. “But they can choose which methods to use in making those decisions. The research evidence summarized in this article shows that different methods and combinations of methods have very different validities for predicting future job performance.”</p>\n<p>Schmidt and Hunter’s findings are so comprehensive and compelling that amongst all of the sources cited in the article, we’ll circle back to their findings most often.</p>\n<p>“In economic terms, the gains from increasing the validity of hiring methods can amount over time to literally millions of dollars,” writes Schmidt regarding the importance of valid assessment methods. “However, this can be viewed from the opposite point of view: By using selection methods with low validity, an organization can lose millions of dollars in reduced production. In a competitive world, these organizations are unnecessarily creating a competitive disadvantage for themselves. By adopting more valid hiring procedures, they could turn this competitive disadvantage into a competitive advantage.”</p>\n<p>While the economic and business benefits of making better hires seem obvious, it’s altogether shocking that so few companies in the tech industry have taken a deliberate approach to designing an interviewing process that’s truly valid and predictive.</p>\n<h1>A predictive hiring process must be deliberately designed</h1>\n<p>While the topic of assessment validity may feel academic and a long way from the day-to-day work of writing code and hiring software engineers, Erik Bernhardsson, CTO of <a href=\"http://Better.com\">Better.com</a>, frames the challenge in a more human light.</p>\n<p>“I have done roughly 2,000 interviews in my life. When I started recruiting, I had so much confidence in my ability to assess people,” <a href=\"https://erikbern.com/2018/05/02/interviewing-is-a-noisy-prediction-problem.html\">writes Bernhardsson</a>. “Let me just throw a couple of algorithm questions at a candidate and then I’ll tell you if they are good or not! Over time I’ve come to the (slightly disappointing) realization that knowing who’s going to be good at their job is an extremely hard problem.”</p>\n<blockquote>\n<p>“The correlation between who did really well in the interview process and who performs really well at work is really weak.”</p>\n</blockquote>\n<p>“Confronted by this observation I’ve started thinking about this process as an inherent noise reduction problem. Interviewing should be thought of as information gathering. You should consciously design the process to be the most predictive of future job performance.”</p>\n<p>The problem, then, becomes identifying a clear methodology for assessing the future job performance of a candidate.</p>\n<p>“A critical precursor to measuring future job performance is defining what successful performance looks like,” says Dr. Ferguson. “It may be different things to different people, depending on who the decision makers are and how they relate to the candidate (e.g., fellow engineer, manager, team leader, etc.). Unless there is agreement on what successful performance is, meaningful attempts to measure it will be impossible.”</p>\n<p>Is job tenure a good measure? It’s problematic at best—we’ve all seen companies that hang on to underperforming software developers for far too long. Or consider great developers who get fired for consistently showing up to work late—the candidates clearly possessed the technical skills to excel in the role, but their tenure was cut short by circumstances beyond their ability to do the job well.</p>\n<p>In psychometrics, the true output performance we wish to measure is called the <strong>criterion</strong>. In the case of recruiting, whatever the company uses to measure the success of a hire is the criterion. For example, using peer performance reviews to measure developer productivity might be how a company wishes to measure true performance. Pre-hire you can’t measure the criterion directly, but you can utilize hiring practices that identify underlying traits and abilities which, when measured, should result in meaningful predictions. For example, coding work samples can be utilized to test if a developer can write code, an activity critical to how productive a developer will be at developing new functionality.</p>\n<p>Schmidt and Hunter’s study uses the criterion of supervisor performance ratings when assessing the validity of various hiring activities. The duo also effectively showcases the opportunity presented by building a hiring process with greater <strong>predictive validity</strong> by tying employee performance to the overall output of the employee and the dollar value of that output.</p>\n<p>“The variability of employee job performance can be measured in a number of ways, but two scales have typically been used: dollar value of output and output as a percentage of mean output. The standard deviation across individuals of the dollar value of output has been found to be at minimum 40% of the mean salary of the job. The 40% figure is a lower bound value; actual values are typically considerably higher. Thus, if the average salary for a job is $40,000, then the standard deviation is at least $16,000. If performance has a normal distribution, then workers at the 84th percentile produce $16,000 more per year than average workers (those at the 50th percentile). And the difference between workers at the 16th percentile (below average’ workers) and those at the 84th percentile (superior workers) is twice that: $32,000 per year. Such differences are large enough to be important to the economic health of an organization.”</p>\n<p>Before we look at which hiring activities are truly predictive, let’s look at some of the common pitfalls that the vast majority of the tech industry has succumbed to with their current hiring strategies.</p>\n<h1>Unstructured Interviews, Resumes, and Reference Checks Simply Don’t Work</h1>\n<p>Chances are your process for hiring software engineers follows a familiar pattern—you collect resumes, conduct a series of interviews, and check references before making a job offer. There’s no easy way to say this, but point blank this is exactly what doesn’t work! These activities have shown to be almost completely useless when it comes to predicting the future success of a hire. Let’s look at them one by one.</p>\n<h2>Unstructured interviews are plagued by our own biases</h2>\n<p>Interviews have long sat at the epicenter of the hiring process, and it makes sense that you’d want to meet and chat with a job candidate prior to hiring them. But while that’s the case, interviews have consistently been shown—from <a href=\"https://www.researchgate.net/publication/229503170_The_Incremental_Validity_of_Interview_Scores_Over_and_Above_Cognitive_Ability_and_Conscientiousness_Scores\">research studies</a> to write-ups in <a href=\"https://www.nytimes.com/2017/04/08/opinion/sunday/the-utter-uselessness-of-job-interviews.html\">The New York Times</a>—to be extremely ineffective in predicting the future performance of a new hire.</p>\n<p>Jason Dana writes in his article <em><a href=\"https://www.nytimes.com/2017/04/08/opinion/sunday/the-utter-uselessness-of-job-interviews.html\">The Utter Uselessness of Job Interviews</a></em> that the reliance on interviews is a widespread problem.</p>\n<p>“Employers like to use free-form, unstructured interviews in an attempt to “get to know” a job candidate,” writes Dana. “But…interviewers typically form strong but unwarranted impressions about interviewees, often revealing more about themselves than the candidates.”</p>\n<p>Worse yet, hiring managers show a strong tendency to believe that interviews are the most predictive of all hiring activities, while IQ tests are amongst the least. But the truth is actually the opposite.</p>\n<p>Scott Highhouse of Bowling Green University found in his article <em><a href=\"https://blogg.hrsverige.nu/wp-content/uploads/2010/04/Stubborn1.pdf\">Stubborn Reliance on Intuition and Subjectivity in Employee Selection</a></em> that hiring managers are far too reliant on their own intuition throughout the interview process despite overwhelming evidence that there are far more predictive means of assessing candidates.</p>\n<p>“People have an inherent resistance to analytical approaches to selection because they fail to view selection as probabilistic and subject to error,” writes Highhouse. “Another is the implicit belief that prediction of human behavior is improved through experience. This myth of expertise results in an overreliance on intuition and a reluctance to undermine one’s own credibility by using a selection decision aid.”</p>\n<p>Said another way, hiring managers are reluctant to use more effective assessment tools because they feel like it undermines their own self worth and importance throughout the hiring process.</p>\n<p>It’s worth noting that interviews do become slightly more predictive of future performance if they’re highly structured. Schmidt and Hunter define the difference between structured and unstructured interviews in this way:</p>\n<h3>Unstructured interviews</h3>\n<p>Unstructured interviews have no fixed format or set of questions to be answered. In fact, the same interviewer often asks different applicants different questions. Nor is there a fixed procedure for scoring responses; in fact, responses to individual questions are usually not scored, and only an overall evaluation (or rating) is given to each applicant based on summary impressions and judgments.</p>\n<p>Sound familiar? Structured interviews are exactly the opposite.</p>\n<h3>Structured interviews</h3>\n<p>Questions to be asked are usually determined by a careful analysis of the job in question. Every candidate is then asked the same questions and their answers are scored objectively using the same rubric.</p>\n<p>As a result, structured interviews are more costly to construct and use but are also more valid. In contrast, the much more commonly employed, somewhat free-formed nature of an unstructured interview quickly becomes highly prone to confirmation bias.</p>\n<p>“We subconsciously form an opinion about things, and let that influence our decision making. This is dangerous!” <a href=\"https://erikbern.com/2018/05/02/interviewing-is-a-noisy-prediction-problem.html\">writes Benhardsson</a>. “You start to like a particular candidate a lot for whatever superficial reason, you drop your guard, and start giving them more hints or give them the benefit of the doubt in a way that some other candidate wouldn’t get.”</p>\n<p>A highly structured interview is the main remedy, as the structure of the interview helps the hiring manager maintain a higher degree of objectivity. “This has been shown to make interviews more reliable and modestly more predictive of job success,” <a href=\"https://www.nytimes.com/2017/04/08/opinion/sunday/the-utter-uselessness-of-job-interviews.html\">writes Dana</a>. “Alternatively, you can use interviews to test job-related skills, rather than idly chatting or asking personal questions.”</p>\n<h2>Resumes hold little value beyond introducing a candidate's experience</h2>\n<p>Resumes usually represent the gateway to the hiring process, the very first piece of collateral that job candidates provide to hiring managers as a means of assessing their fit for a given role. The fact that a non-technical person is often first to assess a software engineer’s resume is often cited by rejected developer candidates as a significant problem, but the reasons for this practice are easy to explain.</p>\n<p>“Why has pedigree become such a big deal in an industry that’s supposed to be a meritocracy?” writes Aline Lerner in her article <em><a href=\"http://blog.alinelerner.com/lessons-from-a-years-worth-of-hiring-data/\">Lessons From A Year’s Worth Of Hiring Data</a></em>. “At the heart of the matter is scarcity of resources. When a company gets to be a certain size, hiring managers don’t have the bandwidth to look over every resume and treat every applicant like a unique and beautiful snowflake. As a result, the people doing initial resume filtering are not engineers.”</p>\n<p>“Engineers are expensive and have better things to do than read resumes all day,” continues Lerner. “Enter recruiters or HR people. As soon as you get someone who’s never been an engineer making hiring decisions, you need to set up proxies for aptitude. Because these proxies need to be easily detectable, things like a CS (computer science) degree from a top school become paramount.”</p>\n<blockquote>\n<p>“Bemoaning that non-technical people are the first to filter resumes is silly because it’s not going to change. What can change, however, is how they do the filtering.”</p>\n</blockquote>\n<p>The problem is the information contained on a resume—years of job experience, degrees earned, and titles held in previous roles all perform poorly when it comes to predicting future job performance. As Lerner says we need to change our filtering processes, but doing so needs to include capturing information outside of what’s typically reported on a resume.</p>\n<h2>Reference checks are anything but objective</h2>\n<p>Reference checks have low validity, which makes perfect sense—you’re essentially asking the job candidate to present you with someone that has a favorable opinion of them. While it’s certainly a good indication that the candidate has such a relationship, reference checks are anything but objective and have little predictive power.</p>\n<p>It’s worth noting that while we’re rallying against unstructured interviews, resumes, and reference checks—very likely the core elements of your existing hiring process—these activities aren’t necessarily without any purpose. A resume is a way for a candidate to introduce their experience, just as an interview gives you an opportunity to get to know a job candidate—there’s some value in both.</p>\n<p>But the takeaway here is straightforward—the overarching objective of your hiring process should be to predict as accurately as possible which candidates will be successful once hired. Unstructured interviews, resumes, and reference checks are simply of little use in this regard.</p>\n<h1>The Secret Sauce: Aptitude Tests, Work Samples, and Highly Structured Interviews</h1>\n<p>Now that we’ve detailed the common hiring practices that hold little predictive power, it’s time to share what actually works. Tests of general mental ability (like IQ or other aptitude tests), work samples, and highly structured interviews have all been proven to have truly predictive power when it comes to making great hires.</p>\n<p>The table below details the predictive validity of 19 different hiring activities that Schmidt and Hunter assessed candidates against.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/4u986Tq14QuN1eFZ76k00M/6e745422eb6793c73b35fdc0b06315c6/blog_asset.png\" alt=\"The Predictive Validity of Hiring Activities\"></p>\n<p>As you can see, work samples tests are the single most predictive activity throughout the hiring process, followed closely by general mental ability (GMA) tests and highly structured interviews. It’s also important to note that the table above looks at the validity of each of these personnel measures in isolation—most hiring processes will employ two or more of these activities, and each contributes to increasing the predictive validity of your hiring process.</p>\n<p>In isolation all of the above measures are far from perfect, but generally using more measures—and specifically the more predictive measures (assuming they aren’t highly correlated to one another)—will improve the predictive validity of your hiring practices. Let’s take a look at the most predictive measures one by one.</p>\n<h2>General Mental Ability (GMA) tests are indicative of ability to learn job skills</h2>\n<p>While standardized aptitude tests like the IQ test often get a bad rap, the truth of the matter is the usefulness of these tests has been the subject of more studies than just about any other aspect of the hiring process. <a href=\"https://80000hours.org/2013/05/intelligence-matters-more-than-you-think-for-career-success/\">The evidence is overwhelming</a>—general intelligence shows a very strong correlation with job performance and career success.</p>\n<p>GMA tests have not only been shown to be highly predictive of job performance, but as Schmidt finds, “GMA is also an excellent predictor of job-related learning.” One of the major findings around the usefulness of GMA tests is that people that score highly on these tests have higher job performance simply because they’re able to learn the job related skills they need to be successful more rapidly—it’s this competency in knowledge acquisition that drives their job performance. People with higher intelligence simply learn faster, which in turn leads to increased job performance.</p>\n<p>While GMA tests are highly predictive, they’re most likely not a great fit for companies in the United States when it comes to hiring software engineers.</p>\n<p>“In the United States, GMA tests are a poor option for legal reasons: they open you up for discrimination lawsuits under the theory of “disparate impact,” <a href=\"https://www.forbes.com/sites/quora/2017/02/23/work-sample-tests-should-be-the-future-of-software-engineering-interviews/#52ce9717dc47\">writes Tikhon Jelvis</a>.\n“Companies can protect themselves by performing an (expensive) study to validate the impact of IQ tests for their specific positions, but this is not worth the expense for most companies. IQ tests are also fraught culturally: I suspect many engineering candidates would be turned off by needing to go through an IQ test as part of hiring.”</p>\n<h2>Work sample tests are directly relevant to real world work</h2>\n<p>All of which brings us to work samples tests, the single most predictive measure of a job candidate’s future on-the-job performance. While software engineers may immediately think of algorithmic puzzles when they hear “work sample test,” that’s by no means a fair description of what we’re talking about so let’s start by defining the term.</p>\n<p>“Work sample tests are hands-on simulations of part or all of the job that must be performed by applicants,” write Schmidt and Hunter.</p>\n<p>For example, a restaurant owner that’s hiring a chef might ask the chef to cook them one of their menu items or someone hiring an architect might ask them to design a small building structure to be analyzed for correctness.</p>\n<p>Frederick Smith offers a second definition in his paper <em><a href=\"https://www.nap.edu/read/1898/chapter/3\">Work Samples As Measures of Performance</a></em> writing, “Work samples measure job skills by requiring an individual to demonstrate competency in a situation parallel to that at work, under realistic and standardized conditions. Their primary purpose is to evaluate what one can do rather than what one knows.”</p>\n<p>The latter is a key point—while whiteboard coding interviews are useful in learning how a developer thinks through a problem (indicative of what one can do), they’re not at all useful when it comes assessing their ability to write code (indicative of what code they know in the moment). As a result, whiteboard interviews aren’t a good means of assessing coding ability because they just aren’t terribly relevant to real world programming.</p>\n<p>“We do this by designing a comprehensive programming task ahead of time that faithfully represents the actual work somebody will be doing,” writes Tikon Jelvis. “The name gives it away: we evaluate candidates by looking at a representative sample of their actual work instead of trying to proxy this with undergraduate-style exam questions on a whiteboard.”</p>\n<p>“The point of a work sample is, after all, to reduce the inferential leap that must be made between performance in a standardized testing situation and actual job performance,” continues Jelvis. “There is less of a leap needed between behavior in a work sample and behavior in the actual job situation than between performance or problem solving on a paper-and-pencil test and actual job behavior. Because of their close tie to actual work behaviors, work samples also allow an interaction of abilities and skills to occur, an interaction that is often artificially eliminated by rating forms with generalized dimensions of work behavior.”</p>\n<p>It doesn’t take a PhD or a room full of smart software engineers to make this connection—it seems very intuitive that a work sample truly reflective of real world work would be a great predictor of how an engineer would actually do once hired. So the question then becomes:</p>\n<p><em>“Why aren’t more companies focused on capturing relevant work samples from software engineers during the hiring process?”</em></p>\n<p>I think there’s two primary reasons for this phenomenon. First, algorithmic puzzles have become unpopular with many developers. Erik Bernhardsson captures this challenge perfectly.</p>\n<blockquote>\n<p>“I’ve read about 1,000 Hacker News comments complaining that interview questions about turning a binary tree upside down (or whatever) are stupid because no one would ever do that, or there’s already a library for it, or something else. I think that’s completely besides the point! The real question is: <em>does solving a problem about turning a binary tree upside down predict future job performance?</em>”</p>\n</blockquote>\n<p>Weary of creating a poor impression with developer candidates, companies often then overcorrect and inject a lengthy, homegrown coding exercise into their hiring process. Oftentimes this activity <em>is</em> designed to capture a relevant work sample, but administering and scoring this style of exercise quickly becomes a hugely time consuming chore.</p>\n<p>A great example of a company that’s effectively walked this tightrope is Slack, which designed a work sample test that assessed developers <a href=\"https://slack.engineering/refactoring-backend-engineering-hiring-at-slack-b53b1e0e7a3c\">by giving them a code review activity</a>—something they’d have to do on a nearly daily basis once hired. The result? Slack cut their time-to-hire for software engineers from over 200 days down to 83.</p>\n<h2>Structured interviews increase predictive validity and objectivity</h2>\n<p>Including highly structured interviews in your recruiting process is also likely a good way to increase your ability to predict future job performance. The structured nature of the interview helps interviewers retain a higher degree of objectivity, while also presenting an opportunity to make interviews more useful.</p>\n<p>In a structured interview—and in fact this is true of all aspects of your hiring process—you have a limited amount of time during which to assess the candidate. Rather than spending a full hour working through a single problem with the candidate or talking freely, instead design a consistent process and a series of questions that probes into as many different areas of software development as are relevant to the role.</p>\n<p>Bernhardsson calls this the signal to noise ratio—how much can you learn about a candidate relatively quickly?</p>\n<p>“While I don’t like long problems that rely on knowing a certain trick, I think it’s great to have many short interview questions that rely on knowing particular things,” writes Bernhardsson. “If you can go through 20 such problems in one single interview, you increase the signal-to-noise ratio a lot!”</p>\n<p>In the context of a software engineering interview, this might include asking questions about:</p>\n<ol>\n<li>Specific segments of code</li>\n<li>How they have handled past architectural decisions</li>\n<li>What sort of recent technologies have excited them and why</li>\n<li>Areas they want to improve as a developer</li>\n<li>How they define “good quality” code</li>\n<li>The key differences between objective-oriented programming and functional programming paradigms</li>\n<li>What the MVC paradigm is and an example of some frameworks that use it</li>\n</ol>\n<p>Use your time with candidates wisely—it’s worth the upfront effort to design a structured interview process that efficiently surfaces insights on developers across as many relevant dimensions as possible.</p>\n<p>A final tip on making your interviews more predictive—interviews by committee (where more than one person is interviewing the applicant at a time) have been shown to make interviews more valid and predictive of future job performance. This remains true even if one interviewer is steering the questioning while another takes notes—the mere presence of multiple interviewers improves both objectivity and the validity of the interview.</p>\n<p>Of course the costs associated with the interview in terms of resources also increases in tandem, so this will need to be weighed as you design your interviewing approach—but generally speaking having two or more interviewers present will increase the predictive ability of your interviews.</p>\n<h1>Hiring Cheat Codes</h1>\n<p>Designing a process for interviewing software engineers that includes a highly structured interview and focuses on capturing a relevant work sample will give you a huge leg up on the competition, who likely aren’t using such statistically predictive measures. So far we’ve presented a mass of evidence showing that this is the recipe for building a hiring process that’s truly predictive of future job performance.</p>\n<p>While that’s the case, there are two other “cheat codes” worth mentioning that can be effectively folded into your hiring process.</p>\n<h2>Harder interviews result in more satisfied hires</h2>\n<p>Dr. Andrew Chamberlain <a href=\"https://www.glassdoor.com/research/interview-difficulty/\">conducted a study in conjunction with Glassdoor</a> that looks at the relationship between interview difficulty and employee job satisfaction. His findings below present evidence that harder interviews result in more satisfied workers.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/4G4QwdmvLMtjL5IN00q3q7/994cde8cc8ee6f963c7c86e0f10925b3/Screen_Shot_2020-01-29_at_5.09.03_PM.png\" alt=\"Glassdoor Hard Interviews, Happy Workers\"></p>\n<p>This is not a direct measure of future job performance, but it’s at least worthy of consideration as you design your deliberately predictive interview process. The relationship between employee satisfaction and job performance is <a href=\"http://wwwbiz.meijo-u.ac.jp/SEBM/ronso/no9_1/08_PUSHPAKUMARI.pdf\">well documented</a>—satisfied employees put in a greater level of effort, most often leading to a higher level of organizational performance.</p>\n<h2>Actively seek out signals the market undervalues when hiring</h2>\n<p>It’s also worth considering—especially in a hiring environment as competitive as the current landscape for software engineers—which signals or criteria you’re using to evaluate candidates and how much the hiring market at large values those same signals.</p>\n<p>Bernhardsson covers this topic well in his article <em><a href=\"https://erikbern.com/2020/01/13/how-to-hire-smarter-than-the-market-a-toy-model.html\">How To Hire Better Than The Market</a></em> when he writes, “What I’m saying is that if you’re hiring, then you will be <em>more successful going after candidates that the market undervalues</em>. It turns out <em>your preference versus the market’s preference matters more than your preference in itself</em>.”</p>\n<p>For example, consider the stock market—if everybody considers a stock to be particularly hot and buys shares of the stock, the opportunity that that stock presents erodes in value. Likewise in a hiring context, if the majority of the hiring market is focused on only hiring from Ivy League schools, the relative cost of those hires goes up and your likelihood of actually landing graduates with an Ivy League education goes down.</p>\n<p>As a result, hiring managers should actively look for opportunities to hire based on attributes that the market at large undervalues—this is how you can hire better than the market.</p>\n<h1>Conclusion</h1>\n<p>Why the tech industry has largely ignored the plethora of evidence on this topic is up for debate, but it’s clear that highly structured interviews and an emphasis on capturing truly relevant coding samples is not the norm. Tech leaders are often quick to cite the importance of “team,” but their relative effort in building a truly predictive hiring process almost always pales in comparison to the effort they put forth in say, optimizing their customer acquisition process.</p>\n<p>“You can see a rough progression in tech interviewing from brain teasers and other nonsense towards work-sample tests, but it hasn’t come nearly far enough,” says Jelvis.</p>\n<p>We’ll let our Advisory Board Member, Frank Schimdt, have the final word.</p>\n<blockquote>\n<p>“Use of hiring methods with increased predictive validity leads to substantial increases in employee performance as measured in percentage increases in output, increased monetary value of output, and increased learning of job-related skills.”</p>\n</blockquote>\n<p>That’s enough to get my attention—is it enough to get yours?</p>\n<h1>Summary of Key Points</h1>\n<ol>\n<li>\n<p>The most commonly employed hiring practices—unstructured interviews, resumes, and reference checks—are all but useless when it comes to predicting the future performance of a hire.</p>\n</li>\n<li>\n<p>General Mental Ability (GMA) tests (like the IQ test) are very predictive of future job performance, largely because people with high intelligence can learn the skills needed to be successful on the job more rapidly. However, due to legal concerns they’re not recommended for companies hiring in the US.</p>\n</li>\n<li>\n<p>Work samples tests are the single most valid hiring activity that’s truly predictive of on the job performance.</p>\n</li>\n<li>\n<p>Interviews become more predictive of future performance when they’re highly structured, allowing the interviewer to maintain a higher degree of objectivity.</p>\n</li>\n<li>\n<p>Any single personnel measure or hiring activity used in isolation is far from perfect. Companies must deliberately design a hiring process that utilizes multiple measures—doing so will increase the predictive validity of the process.</p>\n</li>\n<li>\n<p>Oftentimes deciding how you will measure the future performance of a hire is more difficult and time consuming than deciding which personnel measures and hiring activities you’ll employ.</p>\n</li>\n<li>\n<p>Harder, more rigorous interviews result in more satisfied employees who are more motivated, leading to higher organizational performance.</p>\n</li>\n<li>\n<p>You can beat the market when hiring by looking for personnel measures and signals that the market at large undervalues.</p>\n</li>\n</ol>\n<h2>Ready to build a more predictive hiring process for software engineers? <a href=\"https://calendly.com/chris-qualified/\">Schedule a 1-on-1 review of your hiring process</a> or <a href=\"https://www.qualified.io/signup?utm_source=blog&amp;utm_medium=footerlink&amp;utm_campaign=sciencebehindpredictiveinterviews\">request a free trial of Qualified here</a>.</h2>\n","tags":null,"body":null,"richBody":null,"description":null,"hideHero":null,"publishDate":"2020-03-15T07:00:00.000Z"},{"prettyDate":"Jan 16, 2020","title":"The Best Personal Software Engineering Blogs","href":"https://www.qualified.io/blog/posts/the-best-personal-software-engineering-blogs","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/n04E2ozQhE66IzVYWda3t/027ed759503ddbf127160fb78e7c6ae7/Screen_Shot_2019-12-19_at_1.05.18_PM.png?w=100&q=1","length":"","excerpt":"This list of personal software engineering blogs represents the best of the best. Whether you’re stuck writing a particularly challenging bit of code or are simply looking for some inspiration from your peers, these blogs are worth having on your radar.\n","collection":"Software Engineering","slug":"the-best-personal-software-engineering-blogs","author":"Geoff Roberts","htmlContent":"<p>More than ever before software developers are breaking from writing code to publish personal blogs where they share their expertise and the nuances of their craft. Many do so in order to build their personal brand, while others are simply giving back to the developer community by documenting their own learnings.&nbsp;</p><p>The list of developer blogs you’ll find below represents the best of the best. Whether you’re stuck writing a particularly challenging bit of code or are simply looking for some inspiration from your peers, these blogs are worth having on your radar.&nbsp;</p><h2>BenNadel.com</h2><p><a href=\"https://www.bennadel.com/\">https://www.bennadel.com/</a>&nbsp;</p><p>Ben Nadel is a Co-founder and Principal Engineer at Invision. His blog has a heavy emphasis on user experience design, Javascript, and ColdFusion.&nbsp;</p><p>Recommended Reading: <a href=\"https://www.bennadel.com/blog/3740-common-mistakes-that-engineers-make-during-the-designer-developer-hand-off.htm\"><i>Common Mistakes That Developers Make During The Designer-Developer Hand-Off</i></a></p><h2>FlavioCopes.com</h2><p><a href=\"https://flaviocopes.com/\">https://flaviocopes.com/</a></p><p>Flavio Copes is insane—he’s an Italian software engineer that writes and publishes new content every single day! His site focuses primarily on Javascript tutorials.</p><p>Recommended Reading: <a href=\"https://flaviocopes.com/react-debugging/\"><i>How To Debug a React Application</i></a></p><h2>Kreyz.com</h2><p><a href=\"https://kreyz.com/\">https://kreyz.com/</a>&nbsp;</p><p>Jordan Krey is the Director of Engineering at Buildium, which was <a href=\"https://www.inman.com/2019/11/18/realpage-acquires-property-management-company-buildium-for-580m/\">acquired this month by RealPage for $580M</a>. His blog is “an engineer’s guide to people, office politics, and career growth.”</p><p>Recommended Reading: <a href=\"https://kreyz.com/there-is-no-unit-testing-without-u\"><i>There is no Unit Testing without U</i></a></p><h2>TaniaRascia.com</h2><p><a href=\"https://www.taniarascia.com/blog/\">https://www.taniarascia.com/blog/</a></p><p>Tania Rascia is a front end software engineer at DAIS Technology and previously served as a Technical Writer focused on Javascript at Digital Ocean. She’s based in Chicago and prides herself on learning in public while writing everything she knows.</p><p>Recommended Reading: <a href=\"https://www.taniarascia.com/everything-i-know-as-a-software-developer-without-a-degree/\"><i>Everything I Know As A Software Developer Without A Degree</i></a></p><h2>ErikBern.com</h2><p><a href=\"https://erikbern.com/\">https://erikbern.com/</a>&nbsp;</p><p>Erik Bernhardsson is the CTO at Better.com where he leads a team of about 60 software engineers. He publishes posts only every couple of months, but they are wonderfully detailed and often straight from the front lines of scaling Better.com.&nbsp;</p><p>Recommended Reading: <a href=\"https://erikbern.com/2018/05/02/interviewing-is-a-noisy-prediction-problem.html\"><i>Interviewing Is A Noisy Prediction Problem</i></a></p><h2>DavidWalsh.name</h2><p>Davide Walsh is a Senior Software Engineer at Mozilla with a self-proclaimed goal of becoming the best front end developer in the world. His blog is packed with articles focused on Javascript, React, and Node.&nbsp;</p><p>Recommended Reading: <a href=\"https://davidwalsh.name/pornhub-interview\"><i>Interview With A Pornhub Web Developer</i></a></p><h2>JoelOnSoftware.com</h2><p><a href=\"https://www.joelonsoftware.com/\">https://www.joelonsoftware.com/</a></p><p>OK, OK, this one was probably already on your radar. Joel Spolsky is the Co-founder of Fog Creek Software (which birthed Trello) and also served as CEO of StackOverflow for nearly a decade (he’s now Chairman of the Board). He’s written 1100+ articles over the past 16 years.</p><p>Recommended Reading: <a href=\"https://www.joelonsoftware.com/2006/10/25/the-guerrilla-guide-to-interviewing-version-30/\"><i>The Guerilla Guide To Interviewing (Version 3.0)</i></a></p><h2>Overreacted.io</h2><p><a href=\"https://overreacted.io/\">https://overreacted.io/</a>&nbsp;</p><p>Overreacted is the personal blog of Dan Abramov, a front end developer. Dan is also the creator of Redux—you can check out his <a href=\"https://egghead.io/courses/getting-started-with-redux\">comprehensive tutorial on Redux here</a>.</p><p>Recommended Reading: <a href=\"https://overreacted.io/the-elements-of-ui-engineering/\"><i>The Elements of UI Engineering</i></a></p><h2>RayWenderlich.com</h2><p>Ray Wenderlich is a Virginia based software engineer whose community website features 3,000+ developer tutorials. The site self describes as “the largest and most up-to-date collection of development courses on iOS, Swift, Android, Kotlin, Flutter, Server Side Swift, Unity and more.” While it’s not really a personal blog, it’s so useful that we had to include it on this list.</p><p>Recommended Reading: <a href=\"https://www.raywenderlich.com/5993-your-first-ios-and-uikit-app\"><i>Your First iOS and UIKit App</i></a></p><h2>AhmadAwais.com</h2><p><a href=\"https://ahmadawais.com/\">https://ahmadawais.com/</a>&nbsp;</p><p>Ahmad Awais has his hands in a little bit of everything—he’s currently working as Principal Developer Advocate at Cloudinary, but also has deep expertise in the Google and Wordpress developer communities with a strong focus on improving the developer experience. His whole website just screams “hustle.”</p><p>Recommended Reading: <a href=\"https://ahmadawais.com/microsoft-azure-functions-javascript/\"><i>Practical Guide To Serverless Microsoft Azure Functions With JavaScript</i></a></p><h2>RobinWieruch.de</h2><p><a href=\"https://www.robinwieruch.de/blog\">https://www.robinwieruch.de/blog</a>&nbsp;</p><p>Robin Wieruch is a Berlin based software engineering consultant that has published books on React.js, Node.js, GraphQl. He also previously worked as a full stack web developer at Small Improvements.</p><p>Recommended Reading: <a href=\"https://www.robinwieruch.de/git-team-workflow\"><i>How To Establish A Git Team Workflow</i></a></p><h2>Upmostly.com</h2><p><a href=\"https://upmostly.com/\">https://upmostly.com/</a>&nbsp;</p><p>Upmostly is a blog and a series of tutorials published by British software developer James King.&nbsp;The site has a heavy emphasis on React—James is currently writing a book called entitled <i>The Complete Guide To React Development </i>(you can download a chapter for free on the site).</p><p>Recommended Reading: <a href=\"https://upmostly.com/web-development/how-react-reignited-my-love-for-web-development\"><i>How React Reignited My Love For Web Development&nbsp;</i></a></p><h2>KhalilStemmler.com</h2><p><a href=\"https://khalilstemmler.com/\">https://khalilstemmler.com/</a></p><p>Khalil Stemmler is a Developer Advocate at Apollo GraphQL. His site is focused on advanced Typescript and Node.js best practices for large scale applications.&nbsp;</p><p>Recommended Reading: <a href=\"https://khalilstemmler.com/blogs/typescript/node-starter-project/\"><i>How To Setup A Typescript and Node.js Project</i></a></p><p></p><p>That’s our list—follow the content that these software engineers publish and you can’t help but learn a thing or two. Who’s missing from our list? Let us know at team(at)qualified.com.\n</p><p>Enjoy this list? Check out our <a href=\"https://www.qualified.io/blog/posts/corporate-software-engineering-blogs\">favorite corporate software engineering blogs</a>.</p>","tags":null,"body":"","richBody":"{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"More than ever before software developers are breaking from writing code to publish personal blogs where they share their expertise and the nuances of their craft. Many do so in order to build their personal brand, while others are simply giving back to the developer community by documenting their own learnings. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"The list of developer blogs you’ll find below represents the best of the best. Whether you’re stuck writing a particularly challenging bit of code or are simply looking for some inspiration from your peers, these blogs are worth having on your radar. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"BenNadel.com\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.bennadel.com/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://www.bennadel.com/\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Ben Nadel is a Co-founder and Principal Engineer at Invision. His blog has a heavy emphasis on user experience design, Javascript, and ColdFusion. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Recommended Reading: \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.bennadel.com/blog/3740-common-mistakes-that-engineers-make-during-the-designer-developer-hand-off.htm\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"Common Mistakes That Developers Make During The Designer-Developer Hand-Off\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"FlavioCopes.com\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://flaviocopes.com/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://flaviocopes.com/\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Flavio Copes is insane—he’s an Italian software engineer that writes and publishes new content every single day! His site focuses primarily on Javascript tutorials.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Recommended Reading: \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://flaviocopes.com/react-debugging/\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"How To Debug a React Application\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Kreyz.com\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://kreyz.com/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://kreyz.com/\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Jordan Krey is the Director of Engineering at Buildium, which was \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.inman.com/2019/11/18/realpage-acquires-property-management-company-buildium-for-580m/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"acquired this month by RealPage for $580M\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\". His blog is “an engineer’s guide to people, office politics, and career growth.”\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Recommended Reading: \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://kreyz.com/there-is-no-unit-testing-without-u\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"There is no Unit Testing without U\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"TaniaRascia.com\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.taniarascia.com/blog/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://www.taniarascia.com/blog/\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Tania Rascia is a front end software engineer at DAIS Technology and previously served as a Technical Writer focused on Javascript at Digital Ocean. She’s based in Chicago and prides herself on learning in public while writing everything she knows.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Recommended Reading: \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.taniarascia.com/everything-i-know-as-a-software-developer-without-a-degree/\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"Everything I Know As A Software Developer Without A Degree\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"ErikBern.com\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://erikbern.com/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://erikbern.com/\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Erik Bernhardsson is the CTO at Better.com where he leads a team of about 60 software engineers. He publishes posts only every couple of months, but they are wonderfully detailed and often straight from the front lines of scaling Better.com. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Recommended Reading: \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://erikbern.com/2018/05/02/interviewing-is-a-noisy-prediction-problem.html\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"Interviewing Is A Noisy Prediction Problem\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"DavidWalsh.name\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Davide Walsh is a Senior Software Engineer at Mozilla with a self-proclaimed goal of becoming the best front end developer in the world. His blog is packed with articles focused on Javascript, React, and Node. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Recommended Reading: \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://davidwalsh.name/pornhub-interview\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"Interview With A Pornhub Web Developer\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"JoelOnSoftware.com\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.joelonsoftware.com/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://www.joelonsoftware.com/\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"OK, OK, this one was probably already on your radar. Joel Spolsky is the Co-founder of Fog Creek Software (which birthed Trello) and also served as CEO of StackOverflow for nearly a decade (he’s now Chairman of the Board). He’s written 1100+ articles over the past 16 years.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Recommended Reading: \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.joelonsoftware.com/2006/10/25/the-guerrilla-guide-to-interviewing-version-30/\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"The Guerilla Guide To Interviewing (Version 3.0)\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Overreacted.io\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://overreacted.io/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://overreacted.io/\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Overreacted is the personal blog of Dan Abramov, a front end developer. Dan is also the creator of Redux—you can check out his \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://egghead.io/courses/getting-started-with-redux\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"comprehensive tutorial on Redux here\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\".\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Recommended Reading: \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://overreacted.io/the-elements-of-ui-engineering/\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"The Elements of UI Engineering\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"RayWenderlich.com\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Ray Wenderlich is a Virginia based software engineer whose community website features 3,000+ developer tutorials. The site self describes as “the largest and most up-to-date collection of development courses on iOS, Swift, Android, Kotlin, Flutter, Server Side Swift, Unity and more.” While it’s not really a personal blog, it’s so useful that we had to include it on this list.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Recommended Reading: \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.raywenderlich.com/5993-your-first-ios-and-uikit-app\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"Your First iOS and UIKit App\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"AhmadAwais.com\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://ahmadawais.com/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://ahmadawais.com/\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Ahmad Awais has his hands in a little bit of everything—he’s currently working as Principal Developer Advocate at Cloudinary, but also has deep expertise in the Google and Wordpress developer communities with a strong focus on improving the developer experience. His whole website just screams “hustle.”\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Recommended Reading: \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://ahmadawais.com/microsoft-azure-functions-javascript/\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"Practical Guide To Serverless Microsoft Azure Functions With JavaScript\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"RobinWieruch.de\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.robinwieruch.de/blog\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://www.robinwieruch.de/blog\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Robin Wieruch is a Berlin based software engineering consultant that has published books on React.js, Node.js, GraphQl. He also previously worked as a full stack web developer at Small Improvements.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Recommended Reading: \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.robinwieruch.de/git-team-workflow\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"How To Establish A Git Team Workflow\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Upmostly.com\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://upmostly.com/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://upmostly.com/\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Upmostly is a blog and a series of tutorials published by British software developer James King. The site has a heavy emphasis on React—James is currently writing a book called entitled \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"The Complete Guide To React Development \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\"(you can download a chapter for free on the site).\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Recommended Reading: \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://upmostly.com/web-development/how-react-reignited-my-love-for-web-development\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"How React Reignited My Love For Web Development \",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"KhalilStemmler.com\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://khalilstemmler.com/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://khalilstemmler.com/\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Khalil Stemmler is a Developer Advocate at Apollo GraphQL. His site is focused on advanced Typescript and Node.js best practices for large scale applications. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Recommended Reading: \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://khalilstemmler.com/blogs/typescript/node-starter-project/\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"How To Setup A Typescript and Node.js Project\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"That’s our list—follow the content that these software engineers publish and you can’t help but learn a thing or two. Who’s missing from our list? Let us know at team(at)qualified.com.\\n\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Enjoy this list? Check out our \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.qualified.io/blog/posts/corporate-software-engineering-blogs\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"favorite corporate software engineering blogs\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\".\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"document\"}","description":"This list of personal software engineering blogs represents the best of the best. Whether you’re stuck writing a particularly challenging bit of code or are simply looking for some inspiration from your peers, these blogs are worth having on your radar. ","hideHero":true,"publishDate":"2020-01-16T00:00-07:00"},{"prettyDate":"Dec 11, 2019","title":"Why Tech Companies Should Launch Corporate Software Engineering Blogs","href":"https://www.qualified.io/blog/posts/corporate-software-engineering-blogs","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/3COr0PuaVYLzUjNUGkQwFC/7483faf13d17e9a72c64b17e47d71495/Screen_Shot_2019-12-11_at_4.14.02_PM.png?w=100&q=1","length":"","excerpt":"The idea of technology companies launching their own software engineering blogs is far from new, but the vast majority of companies who head down this path do so for ill-informed reasons.\n","collection":"Hiring","slug":"corporate-software-engineering-blogs","author":"Geoff Roberts","htmlContent":"<h2>Hint: It’s not to highlight the “cool stuff you’ve built”</h2><p></p><p>The idea of technology companies launching their own software engineering blogs is far from new, but the vast majority of companies who head down this path do so for ill-informed reasons.</p><p>“We need a place to highlight the cool stuff that we’re building!” isn’t going to cut it—it’s certainly not going to end up prioritized against a backlog of new features that need to be delivered.&nbsp;</p><p>A familiar pattern is most often to blame—a motivated employee joins the team, whips up some excitement for the idea, and spins up a Medium publication. A few initial posts are written with great vigor, but soon the posts become a quarterly afterthought until the publication is abandoned altogether. The internet is littered with the corpses of corporate developer blogs that have succumbed to this plague.</p><p>While that’s the case, I couldn’t help but notice that most of the really successful corporate software engineering blogs on the internet today are published by some of the biggest names in tech—Airbnb, Slack, Stripe, and Instagram to name a few. At first blush it’s easy to write this off as making logical sense—bigger companies naturally have more developers to contribute to their blogs. But a blog done right is a product in and of itself—what these companies have in common is not their size, but their motivations for writing a corporate engineering blog in the first place.</p><h1>Corporate developer blogs are a recruiting tool</h1><p>As the war for software development talent wages on, what the big tech companies have realized is a corporate software engineering blog can act as an extremely effective recruiting tool. The purpose of the blog is not just to “show the cool stuff you’ve built” but rather to showcase your employer brand, highlight your engineering team’s culture, and introduce the talented engineers on your team. It’s a glimpse inside of your engineering organization—a view that you can carefully cultivate and optimize, then publish for the whole world to see.</p><h1>Corporate developer blogs increase applicant quality</h1><p>Engineering focused blogs don’t just afford you the opportunity to showcase your engineering team’s culture, but can also directly improve the quality of the candidates applying for your open roles. Much is made of candidates “doing their homework” on your company prior to interviewing for any role—have they taken the time to review your website, study the competition, and ask relevant questions? These steps are very much seen a prerequisite to making good hires.</p><p>But corporate engineering blogs take this concept a step further, giving the most motivated candidates the opportunity to get a detailed and informed perspective on the code that your team is already writing. Armed with this “insider information,” candidates can easily distance themselves from other applicants by asking detailed questions and sharing perspectives on the unique nuances of your code base and the technology challenges that your company is facing.</p><p>If you’re wrestling with a particular challenge, why not write about it? You might be surprised when your next job applicant offers a detailed perspective on how to best address the issue. This is an area where transparency (through blogging) at the very least presents job applicants with the opportunity to stand out from other applicants who haven’t put in the same level of effort when applying to your company.</p><h1>Our favorite corporate developer blogs</h1><p>If your company is struggling to hire the software engineering talent that you need, launching a corporate developer blog could definitely be part of the solution. But make no mistake about it, the blog itself is a product that needs to prioritized and actively invested in—positioning the effort as a recruiting tool (and measuring the number of applicants that reference it!) is the right approach to take. Here are some of our favorite corporate engineering blogs to serve as inspiration.</p><h2>Airbnb</h2><p><a href=\"https://medium.com/airbnb-engineering\">https://medium.com/airbnb-engineering</a>&nbsp;</p><p>Airbnb’s engineering and data science blog features weekly updates that focus on how the company has scaled their services as they’ve expanded globally. The medium publication currently has over 94,000 followers and counting.</p><h2>Auth0</h2><p><a href=\"https://auth0.com/blog/\">https://auth0.com/blog/</a>&nbsp;</p><p>AuthO’s blog has a heavy emphasis on authentication architecture as you might expect. They also accept guest posts, allowing outside developers to get their writing in front of the company’s audience.</p><h2>Eventbrite</h2><p><a href=\"https://www.eventbrite.com/engineering/\">https://www.eventbrite.com/engineering/</a>&nbsp;</p><p>The engineering blog from the team at Eventbrite is a great source of content focused on React. They also tackle topics like building a diverse team and how to scale a remote workforce. It’s no surprise there’s a “Join Our Team” call to action alongside their most recent post.</p><p>Want to test your React skills? <a href=\"https://www.qualified.io/assess/5942d597baa76e0022a2dd94?utm_source=blog&amp;utm_medium=referral&amp;utm_campaign=corporateblogs\"><b>Try our React Demo Assessment</b></a>.</p><h2>Instagram</h2><p><a href=\"https://instagram-engineering.com/\">https://instagram-engineering.com/</a>&nbsp;</p><p>Self-proclaimed as “stories from the people building Instagram,” Instagram’s engineering blog has a heavy emphasis on Python and performance engineering. The Medium publication currently has over 18,000 followers.&nbsp;</p><h2>Slack</h2><p><a href=\"https://slack.engineering/\">https://slack.engineering/</a>&nbsp;&nbsp;</p><p>With the tongue-in-cheek title of “Several people are coding,” Slack’s engineering blog is a gem. The publication features many “day in the life” style posts relevant to specific people or roles at the company, and job applicants can even get a leg up by reading articles like <a href=\"https://slack.engineering/refactoring-backend-engineering-hiring-at-slack-b53b1e0e7a3c\"><i>Refactoring Backend Engineering Hiring at Slack</i></a>.</p><h2>Buffer</h2><p><a href=\"https://overflow.buffer.com/\">https://overflow.buffer.com/</a></p><p>Buffer’s “Overflow” blog may very well be my favorite of the bunch. Check out their “<a href=\"https://overflow.buffer.com/2019/06/07/video-getting-started-with-go-bufferdevs-snackchat/\">Snackchat</a>” posts which feature short, informal presentations from members of Buffer team. It’s posts like these that give job applicants a real sense of what it would be like to work at Buffer.</p><h2>Stripe</h2><p><a href=\"https://stripe.com/en-ca/blog/engineering\">https://stripe.com/en-ca/blog/engineering</a></p><p>Stripe’s Engineering blog hasn’t been as active recently, but as you might expect from Stripe all of their posts are thoroughly detailed and just extremely well done. Payment infrastructure is a common theme, but there’s a lot more that you can learn here too.</p><h2>Thoughtworks</h2><p><a href=\"https://www.thoughtworks.com/radar\">https://www.thoughtworks.com/radar</a></p><p>The team at Thoughtworks publishes a wonderful “Technology Radar” which they describe as “An opinionated guide to technology frontiers.” If you’re looking for a macro-view of what’s new in the world of tech—tools, techniques, platforms, or languages and frameworks—this is a must read.&nbsp;</p><h2>Toptal</h2><p><a href=\"https://www.toptal.com/developers/blog\">https://www.toptal.com/developers/blog</a></p><p>Toptal’s engineering blog is written by software engineers that are part of Toptal software engineering network. It features in-depth development tutorials that provide insight into each freelancer’s specific skill set and area of expertise. If you’re looking to hire freelance development talent, this blog is a great place to source developers with the expertise you need for your own project.&nbsp;</p><h2>Netflix</h2><p><a href=\"https://medium.com/netflix-techblog\">https://medium.com/netflix-techblog</a></p><p>Netflix has become a household name, and their tech blog should be a regular stop for software developers, too. It features content on a wide range of technologies with a heavy emphasis on the challenges associated with dealing with enormous volumes of data.</p><h1>How to make your corporate software engineering blog a success</h1><p>Now that we've served up an ample dose of inspiration, we'll leave you with a few no-nonsense tips to help ensure that your corporate developer blog is a success.</p><p>1. <b>Position your blog as a recruiting tool</b>—This should be the primary reason that you decide to launch your blog in the first place. Actively track the number of applicants that reference your posts, or better yet, add questions to your application process that require applicants to read some of your content and provide their own commentary.</p><p>2. <b>Assign a product manager</b>—Make no mistake about it, your corporate engineering blog is another product that won't be successful without proper oversight. Assign a product owner for your blog—preferably a developer who is excited by the idea and has some writing chops. It's this person's job to ensure that the blog is consistently updated with interesting content.</p><p>3. <b>Ask everybody to contribute</b>—What you want to avoid is creating a situation where contributing to your engineering blog becomes seen as busy work or yet another responsibility. Even if you have a small team, asking each developer to contribute a single detailed post per year focused on one of their major development projects is a great place to start. Also, prompt your developers to contribute more \"snackable\" posts that are just a quick overview of how they wrote a specific bit of code or solved a problem.  </p><p>4. <b>Add a call-to-action to apply to your open roles</b>—If you're writing a corporate engineering blog in order to help attract better developer candidates to your open roles, make sure that you add a clear call to action to your blog that allows readers to quickly view your open development positions. Also consider linking to your open roles directly within posts—if you're writing about part of your code base that you're expecting new hires to contribute to, call that out directly.</p><p>5. <b>If you build it, they will not come</b>—Just because you launch a blog doesn't mean that anyone will read it—you need to actively promote your posts. When new articles are published actively share them with your developer friends, submit them to topically relevant communities or forums, and ask your development team to share the posts on their own social media accounts.</p><p>So there you have it—the big boys and girls of tech are wielding software engineering blogs to their advantage. So before you start writing your own pause to ask yourself, “Will our company invest in our engineering blog like the recruiting tool that it has the potential to be?” You need that level of commitment in order to avoid being the latest publication in the Medium developer blog wasteland.</p>","tags":null,"body":"","richBody":"{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Hint: It’s not to highlight the “cool stuff you’ve built”\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"The idea of technology companies launching their own software engineering blogs is far from new, but the vast majority of companies who head down this path do so for ill-informed reasons.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"“We need a place to highlight the cool stuff that we’re building!” isn’t going to cut it—it’s certainly not going to end up prioritized against a backlog of new features that need to be delivered. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"A familiar pattern is most often to blame—a motivated employee joins the team, whips up some excitement for the idea, and spins up a Medium publication. A few initial posts are written with great vigor, but soon the posts become a quarterly afterthought until the publication is abandoned altogether. The internet is littered with the corpses of corporate developer blogs that have succumbed to this plague.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"While that’s the case, I couldn’t help but notice that most of the really successful corporate software engineering blogs on the internet today are published by some of the biggest names in tech—Airbnb, Slack, Stripe, and Instagram to name a few. At first blush it’s easy to write this off as making logical sense—bigger companies naturally have more developers to contribute to their blogs. But a blog done right is a product in and of itself—what these companies have in common is not their size, but their motivations for writing a corporate engineering blog in the first place.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Corporate developer blogs are a recruiting tool\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-1\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"As the war for software development talent wages on, what the big tech companies have realized is a corporate software engineering blog can act as an extremely effective recruiting tool. The purpose of the blog is not just to “show the cool stuff you’ve built” but rather to showcase your employer brand, highlight your engineering team’s culture, and introduce the talented engineers on your team. It’s a glimpse inside of your engineering organization—a view that you can carefully cultivate and optimize, then publish for the whole world to see.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Corporate developer blogs increase applicant quality\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-1\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Engineering focused blogs don’t just afford you the opportunity to showcase your engineering team’s culture, but can also directly improve the quality of the candidates applying for your open roles. Much is made of candidates “doing their homework” on your company prior to interviewing for any role—have they taken the time to review your website, study the competition, and ask relevant questions? These steps are very much seen a prerequisite to making good hires.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"But corporate engineering blogs take this concept a step further, giving the most motivated candidates the opportunity to get a detailed and informed perspective on the code that your team is already writing. Armed with this “insider information,” candidates can easily distance themselves from other applicants by asking detailed questions and sharing perspectives on the unique nuances of your code base and the technology challenges that your company is facing.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"If you’re wrestling with a particular challenge, why not write about it? You might be surprised when your next job applicant offers a detailed perspective on how to best address the issue. This is an area where transparency (through blogging) at the very least presents job applicants with the opportunity to stand out from other applicants who haven’t put in the same level of effort when applying to your company.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Our favorite corporate developer blogs\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-1\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"If your company is struggling to hire the software engineering talent that you need, launching a corporate developer blog could definitely be part of the solution. But make no mistake about it, the blog itself is a product that needs to prioritized and actively invested in—positioning the effort as a recruiting tool (and measuring the number of applicants that reference it!) is the right approach to take. Here are some of our favorite corporate engineering blogs to serve as inspiration.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Airbnb\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://medium.com/airbnb-engineering\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://medium.com/airbnb-engineering\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Airbnb’s engineering and data science blog features weekly updates that focus on how the company has scaled their services as they’ve expanded globally. The medium publication currently has over 94,000 followers and counting.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Auth0\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://auth0.com/blog/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://auth0.com/blog/\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"AuthO’s blog has a heavy emphasis on authentication architecture as you might expect. They also accept guest posts, allowing outside developers to get their writing in front of the company’s audience.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Eventbrite\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.eventbrite.com/engineering/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://www.eventbrite.com/engineering/\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"The engineering blog from the team at Eventbrite is a great source of content focused on React. They also tackle topics like building a diverse team and how to scale a remote workforce. It’s no surprise there’s a “Join Our Team” call to action alongside their most recent post.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Want to test your React skills? \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.qualified.io/assess/5942d597baa76e0022a2dd94?utm_source=blog&utm_medium=referral&utm_campaign=corporateblogs\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Try our React Demo Assessment\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\".\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Instagram\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://instagram-engineering.com/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://instagram-engineering.com/\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\" \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Self-proclaimed as “stories from the people building Instagram,” Instagram’s engineering blog has a heavy emphasis on Python and performance engineering. The Medium publication currently has over 18,000 followers. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Slack\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://slack.engineering/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://slack.engineering/\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"  \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"With the tongue-in-cheek title of “Several people are coding,” Slack’s engineering blog is a gem. The publication features many “day in the life” style posts relevant to specific people or roles at the company, and job applicants can even get a leg up by reading articles like \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://slack.engineering/refactoring-backend-engineering-hiring-at-slack-b53b1e0e7a3c\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"italic\"}],\"value\":\"Refactoring Backend Engineering Hiring at Slack\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\".\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Buffer\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://overflow.buffer.com/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://overflow.buffer.com/\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Buffer’s “Overflow” blog may very well be my favorite of the bunch. Check out their “\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://overflow.buffer.com/2019/06/07/video-getting-started-with-go-bufferdevs-snackchat/\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Snackchat\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"” posts which feature short, informal presentations from members of Buffer team. It’s posts like these that give job applicants a real sense of what it would be like to work at Buffer.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Stripe\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://stripe.com/en-ca/blog/engineering\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://stripe.com/en-ca/blog/engineering\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Stripe’s Engineering blog hasn’t been as active recently, but as you might expect from Stripe all of their posts are thoroughly detailed and just extremely well done. Payment infrastructure is a common theme, but there’s a lot more that you can learn here too.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Thoughtworks\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.thoughtworks.com/radar\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://www.thoughtworks.com/radar\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"The team at Thoughtworks publishes a wonderful “Technology Radar” which they describe as “An opinionated guide to technology frontiers.” If you’re looking for a macro-view of what’s new in the world of tech—tools, techniques, platforms, or languages and frameworks—this is a must read. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Toptal\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.toptal.com/developers/blog\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://www.toptal.com/developers/blog\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Toptal’s engineering blog is written by software engineers that are part of Toptal software engineering network. It features in-depth development tutorials that provide insight into each freelancer’s specific skill set and area of expertise. If you’re looking to hire freelance development talent, this blog is a great place to source developers with the expertise you need for your own project. \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Netflix\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-2\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://medium.com/netflix-techblog\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"https://medium.com/netflix-techblog\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Netflix has become a household name, and their tech blog should be a regular stop for software developers, too. It features content on a wide range of technologies with a heavy emphasis on the challenges associated with dealing with enormous volumes of data.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"How to make your corporate software engineering blog a success\",\"nodeType\":\"text\"}],\"nodeType\":\"heading-1\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Now that we've served up an ample dose of inspiration, we'll leave you with a few no-nonsense tips to help ensure that your corporate developer blog is a success.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"1. \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Position your blog as a recruiting tool\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\"—This should be the primary reason that you decide to launch your blog in the first place. Actively track the number of applicants that reference your posts, or better yet, add questions to your application process that require applicants to read some of your content and provide their own commentary.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"2. \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Assign a product manager\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\"—Make no mistake about it, your corporate engineering blog is another product that won't be successful without proper oversight. Assign a product owner for your blog—preferably a developer who is excited by the idea and has some writing chops. It's this person's job to ensure that the blog is consistently updated with interesting content.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"3. \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Ask everybody to contribute\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\"—What you want to avoid is creating a situation where contributing to your engineering blog becomes seen as busy work or yet another responsibility. Even if you have a small team, asking each developer to contribute a single detailed post per year focused on one of their major development projects is a great place to start. Also, prompt your developers to contribute more \\\"snackable\\\" posts that are just a quick overview of how they wrote a specific bit of code or solved a problem.  \",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"4. \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Add a call-to-action to apply to your open roles\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\"—If you're writing a corporate engineering blog in order to help attract better developer candidates to your open roles, make sure that you add a clear call to action to your blog that allows readers to quickly view your open development positions. Also consider linking to your open roles directly within posts—if you're writing about part of your code base that you're expecting new hires to contribute to, call that out directly.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"5. \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"If you build it, they will not come\",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\"—Just because you launch a blog doesn't mean that anyone will read it—you need to actively promote your posts. When new articles are published actively share them with your developer friends, submit them to topically relevant communities or forums, and ask your development team to share the posts on their own social media accounts.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"So there you have it—the big boys and girls of tech are wielding software engineering blogs to their advantage. So before you start writing your own pause to ask yourself, “Will our company invest in our engineering blog like the recruiting tool that it has the potential to be?” You need that level of commitment in order to avoid being the latest publication in the Medium developer blog wasteland.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"document\"}","description":"The idea of technology companies launching their own software engineering blogs is far from new, but the vast majority of companies who head down this path do so for ill-informed reasons.\n","hideHero":true,"publishDate":"2019-12-11T00:00-08:00"},{"prettyDate":"Nov 21, 2019","title":"Developers Can Now Complete Qualified Assessments In Their Own IDE","href":"https://www.qualified.io/blog/posts/developers-can-now-complete-qualified-assessments-in-their-own-ide","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/4Rw4mUuGVdIyD1hDcpOo8T/e5cefe6f32208dfdf460108b6c2c1c5d/external-ide.png?w=100&q=1","length":"3 min read","excerpt":"If we were interviewing for a job we’d want to complete coding assessments or projects using our own integrated development environment (IDE). Time to put our money where our mouth is… that’s why we’re so excited to announce our newest feature.\n","collection":"Qualified","slug":"developers-can-now-complete-qualified-assessments-in-their-own-ide","author":"Jake Hoffner","htmlContent":"<p>Last month we published the <a href=\"https://www.qualified.io/blog/posts/the-qualified-manifesto-on-hiring-software-developers\">Qualified Manifesto</a>, which shared with the world the philosophy that guides everything from our product roadmap to our own processes for hiring software engineers.</p>\n<blockquote>\n<p>Identifying great developer talent requires a deep understanding of how developers work and live, which leads to a mutual respect between companies and developers. We build products that we would want to use ourselves as developer candidates, because these tools let us show off our best work when we use them.</p>\n</blockquote>\n<p>Welp, if we were interviewing for a job we’d want to complete coding assessments or projects using our own integrated development environment (IDE). That’s like letting a golfer play with their own clubs, or a musician perform with their own guitar. It’s simply how we’d be able to best demonstrate our skills, which is what coding assessments are designed to do anyways, right?</p>\n<p>Time to put our money where our mouth is… that’s why we’re so excited to announce our newest feature which allows developers to complete Qualified assessments using their own IDE.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/4Rw4mUuGVdIyD1hDcpOo8T/e5cefe6f32208dfdf460108b6c2c1c5d/external-ide.png\" alt=\"Qualified.io External IDE\"></p>\n<h1>Introducing External IDE</h1>\n<p>While we’ve always offered a highly customizable web IDE, by holding ourselves accountable to giving developers every opportunity to showcase their best work we had to let job candidates complete coding challenges in their own development environment.</p>\n<p>Now they can.</p>\n<p>Qualified's new External IDE feature uses a small node terminal app that synchronizes files from your file system back to Qualified’s web IDE. This allows developers to work in their own IDE without needing to setup or get an application running in their own system.</p>\n<h1>How to use your External IDE</h1>\n<p>Here’s how you’ll be prompted to select your own IDE at the outset of taking a Qualified challenge.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/44hV45gu7YAjL6pP8E8ROX/6e545ec8ae25946b94bbb50470c96bad/Screen_Shot_2019-11-01_at_12.53.05_PM.png\" alt=\"Screen Shot 2019-11-01 at 12.53.05 PM\"></p>\n<p>If you choose to complete a Qualified challenge using your own IDE, you’ll then be asked to follow the steps outlined below to begin using your External IDE.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/51G94XrgWOOilrFpPajppp/8506cecab316015947b187fd96847858/Screen_Shot_2019-11-01_at_12.53.33_PM.png\" alt=\"Screen Shot 2019-11-01 at 12.53.33 PM\"></p>\n<p>Once these setup steps are completed candidates can work on Qualified challenges in the comfort of their own development environment.</p>\n<h1>Some technical specifics</h1>\n<p>If you want to allow developers to use their External IDE, you can enable or disable the feature team-wide although the global setting can also be overridden for any given challenge. This feature works with our new assessment format, <a href=\"https://www.qualified.io/blog/posts/introducing-project-code-challenges\">Project Code Challenges</a>, where the value of working in your own IDE is that much more significant.</p>\n<p>Finally, code written in your own IDE will not be subject to detailed code playback—you can still use our code playback feature but it will be limited to when the candidate saves code. External IDE is best suited to letting candidates work independently—you can’t launch an interactive session with a candidate if they’re using their own IDE, but you can still review the code that they’ve written with them via a pair-programming session thereafter.</p>\n<p>This feature is our latest step towards our goal of creating a developer assessment experience that’s truly second to none. And we hope it’s your next step in creating a great first impression with developers that are interested in one of the open roles at your company.</p>\n<p>External IDE is now available to a limited number of Qualified customers in a private beta before we make it more broadly available. You can <a href=\"https://survey.qualified.io/to/DQPWA1\">request an invite to the private beta of External IDE for yourself here</a>.</p>\n<p>Cheers!</p>\n<p>Jake Hoffner, Qualified Co-founder &amp; CTO</p>\n","tags":null,"body":"Last month we published the [Qualified Manifesto](https://www.qualified.io/blog/posts/the-qualified-manifesto-on-hiring-software-developers), which shared with the world the philosophy that guides everything from our product roadmap to our own processes for hiring software engineers.\n\n> Identifying great developer talent requires a deep understanding of how developers work and live, which leads to a mutual respect between companies and developers. We build products that we would want to use ourselves as developer candidates, because these tools let us show off our best work when we use them.\n\nWelp, if we were interviewing for a job we’d want to complete coding assessments or projects using our own integrated development environment (IDE). That’s like letting a golfer play with their own clubs, or a musician perform with their own guitar. It’s simply how we’d be able to best demonstrate our skills, which is what coding assessments are designed to do anyways, right?\n\nTime to put our money where our mouth is… that’s why we’re so excited to announce our newest feature which allows developers to complete Qualified assessments using their own IDE.\n\n![Qualified.io External IDE](//images.ctfassets.net/4ol5sgskowtw/4Rw4mUuGVdIyD1hDcpOo8T/e5cefe6f32208dfdf460108b6c2c1c5d/external-ide.png)\n\n# Introducing External IDE\nWhile we’ve always offered a highly customizable web IDE, by holding ourselves accountable to giving developers every opportunity to showcase their best work we had to let job candidates complete coding challenges in their own development environment.\n\nNow they can.\n\nQualified's new External IDE feature uses a small node terminal app that synchronizes files from your file system back to Qualified’s web IDE. This allows developers to work in their own IDE without needing to setup or get an application running in their own system. \n\n# How to use your External IDE\nHere’s how you’ll be prompted to select your own IDE at the outset of taking a Qualified challenge.\n\n![Screen Shot 2019-11-01 at 12.53.05 PM](//images.ctfassets.net/4ol5sgskowtw/44hV45gu7YAjL6pP8E8ROX/6e545ec8ae25946b94bbb50470c96bad/Screen_Shot_2019-11-01_at_12.53.05_PM.png)\n\nIf you choose to complete a Qualified challenge using your own IDE, you’ll then be asked to follow the steps outlined below to begin using your External IDE.\n\n![Screen Shot 2019-11-01 at 12.53.33 PM](//images.ctfassets.net/4ol5sgskowtw/51G94XrgWOOilrFpPajppp/8506cecab316015947b187fd96847858/Screen_Shot_2019-11-01_at_12.53.33_PM.png)\n\nOnce these setup steps are completed candidates can work on Qualified challenges in the comfort of their own development environment.\n\n# Some technical specifics\nIf you want to allow developers to use their External IDE, you can enable or disable the feature team-wide although the global setting can also be overridden for any given challenge. This feature works with our new assessment format, [Project Code Challenges](https://www.qualified.io/blog/posts/introducing-project-code-challenges), where the value of working in your own IDE is that much more significant.  \n\nFinally, code written in your own IDE will not be subject to detailed code playback—you can still use our code playback feature but it will be limited to when the candidate saves code. External IDE is best suited to letting candidates work independently—you can’t launch an interactive session with a candidate if they’re using their own IDE, but you can still review the code that they’ve written with them via a pair-programming session thereafter.\n\nThis feature is our latest step towards our goal of creating a developer assessment experience that’s truly second to none. And we hope it’s your next step in creating a great first impression with developers that are interested in one of the open roles at your company.\n\nExternal IDE is now available to a limited number of Qualified customers in a private beta before we make it more broadly available. You can [request an invite to the private beta of External IDE for yourself here](https://survey.qualified.io/to/DQPWA1).\n\nCheers!\n\nJake Hoffner, Qualified Co-founder & CTO","richBody":null,"description":"\nIf we were interviewing for a job we’d want to complete coding assessments or projects using our own integrated development environment (IDE). Time to put our money where our mouth is… that’s why we’re so excited to announce our newest feature.","hideHero":true,"publishDate":"2019-11-21T00:00-08:00"},{"prettyDate":"Nov 18, 2019","title":"Qualified's Dashboard Just Got A Facelift","href":"https://www.qualified.io/blog/posts/qualifieds-dashboard-just-got-a-facelift","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/11gnWdCdrGQjKXPiB6e3Cz/363ff7a28309a849b78eba921325c6a8/Screen_Shot_2019-11-18_at_1.14.08_PM.png?w=100&q=1","length":"1 min read","excerpt":"When you login to your Qualified account you may notice that things look a bit different. We redesigned Qualified’s primary dashboard, and it packs a bit of a punch.\n","collection":"Qualified","slug":"qualifieds-dashboard-just-got-a-facelift","author":"Geoff Roberts","htmlContent":"<p>When you login to your Qualified account you may notice that things look a bit different. We redesigned Qualified’s primary dashboard, and it packs a bit of a punch. The new dashboard provides a quick overview of what's happening in your Qualified account, but you can still easily click through to the candidates list where you landed upon login previously.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/75hHekjrGcIWbzq3D5HVUL/525f093a03ae194ada42a3bc80377ce2/Screen_Shot_2019-11-14_at_3.36.30_PM.png\" alt=\"Screen Shot 2019-11-14 at 3.36.30 PM\"></p>\n<p>Here’s what you need to know.</p>\n<ol>\n<li>\n<p>At the very top, you’ll see a list of any candidate tasks that have been assigned to you—click on any of the tasks to jump into the candidate list pre-filtered. This way you can stay on top hiring related to-dos, helping you move candidates through the hiring process as swiftly as possible.</p>\n</li>\n<li>\n<p>Directly below your open tasks, you’ll see an overview of your assessment funnel. This allows you to quickly visualize things like how many candidates have been invited to an assessment, how many have submitted a solution, and how many have been approved.</p>\n</li>\n<li>\n<p>We’ve also added a “Featured” section at the top right hand corner of the dashboard. We’ll use this area to keep you informed about new challenge content and product features that may be of interest to you.</p>\n</li>\n<li>\n<p>Finally, we’ve added shortcuts to make it easier for you to create new content or get help from our team when you need it.</p>\n</li>\n</ol>\n<p>We hope this new design helps you work through your hiring process that much more quickly. If you have any feedback, just drop us a note via chat or at <a href=\"/cdn-cgi/l/email-protection#047061656944757165686d626d61602a6d6b\"><span class=\"__cf_email__\" data-cfemail=\"5d29383c301d2c283c31343b343839733432\">[email&nbsp;protected]</span></a>.</p>\n<p>-The Qualified Team</p>\n","tags":null,"body":"When you login to your Qualified account you may notice that things look a bit different. We redesigned Qualified’s primary dashboard, and it packs a bit of a punch. The new dashboard provides a quick overview of what's happening in your Qualified account, but you can still easily click through to the candidates list where you landed upon login previously.\n\n![Screen Shot 2019-11-14 at 3.36.30 PM](//images.ctfassets.net/4ol5sgskowtw/75hHekjrGcIWbzq3D5HVUL/525f093a03ae194ada42a3bc80377ce2/Screen_Shot_2019-11-14_at_3.36.30_PM.png)\n\nHere’s what you need to know.\n\n1. At the very top, you’ll see a list of any candidate tasks that have been assigned to you—click on any of the tasks to jump into the candidate list pre-filtered. This way you can stay on top hiring related to-dos, helping you move candidates through the hiring process as swiftly as possible.\n\n2. Directly below your open tasks, you’ll see an overview of your assessment funnel. This allows you to quickly visualize things like how many candidates have been invited to an assessment, how many have submitted a solution, and how many have been approved.\n\n3. We’ve also added a “Featured” section at the top right hand corner of the dashboard. We’ll use this area to keep you informed about new challenge content and product features that may be of interest to you.\n\n4. Finally, we’ve added shortcuts to make it easier for you to create new content or get help from our team when you need it.\n\nWe hope this new design helps you work through your hiring process that much more quickly. If you have any feedback, just drop us a note via chat or at team@qualified.io.\n\n-The Qualified Team\n","richBody":null,"description":"When you login to your Qualified account you may notice that things look a bit different. We redesigned Qualified’s primary dashboard, and it packs a bit of a punch. ","hideHero":true,"publishDate":"2019-11-18T00:00-08:00"},{"prettyDate":"Nov 14, 2019","title":"Dear VP of Engineering (An Open Letter From HR)","href":"https://www.qualified.io/blog/posts/dear-vp-of-engineering-an-open-letter-from-hr","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/4kc1xyQ6GfDXMtIMwlaO1S/554650d584c4de9fa5f21ab3740565e3/letter.jpg?w=100&q=1","length":"5 min read","excerpt":"It’s me again… your Director of Talent Acquisition. Our conversations lately have been a bit tense, so I wanted to reach out and extend the proverbial olive branch. I think we can both agree that we’re not overflowing with qualified candidates for our open development positions.\n","collection":"Hiring","slug":"dear-vp-of-engineering-an-open-letter-from-hr","author":"Geoff Roberts","htmlContent":"<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/4kc1xyQ6GfDXMtIMwlaO1S/554650d584c4de9fa5f21ab3740565e3/letter.jpg\" alt=\"Dear VP of Engineering\"></p>\n<p>Dear VP of Engineering,</p>\n<p>It’s me again… your Director of Talent Acquisition. Our conversations lately have been a bit tense, so I wanted to reach out and extend the proverbial olive branch. I think we can both agree that we’re struggling to find qualified candidates for our open development positions—that means features not shipped for you and positions not filled for me. Neither of us is winning with the status quo!</p>\n<p>Let me start by saying this—we’re in this together and I’ve heard your concerns. The coding test that we tried injecting into the hiring process was unpopular with candidates. It only tested basic skills, and many of the candidates that passed the test weren’t able to perform on-the-job as well as we hoped. We made a few mis-hires as a result, which was painful for both of us.</p>\n<p>We’ve since reverted to the homegrown coding project that your team built in-house. I agree that it’s done a better job of surfacing qualified candidates, but it’s also killing my ability to fill our hiring funnel with candidates. Even worse, manually reviewing each submission has become a huge time-suck for your team.</p>\n<p>I understand that you don’t want to talk to any candidates until they’ve demonstrated a certain level of proficiency with writing code—that makes complete sense. But software developers are in high demand and asking them to complete a lengthy coding exercise at the beginning of the hiring process has all but dried up our applicant pool.</p>\n<p>Talent acquisition is essentially a sales job—asking every applicant to complete a lengthy coding exercise at the outset of the recruiting process means that most often I don’t even have the opportunity to sell candidates on our company.</p>\n<p>So where do we go from here? I have a few ideas that I wanted to run by you.</p>\n<h1>Hiring junior developers</h1>\n<p>When we’re hiring junior developers, I’m OK with asking them to complete a coding test early in the hiring process. At this level I think it’s appropriate to ask the candidate to prove a certain level of coding proficiency, and an assessment gives good candidates the ability to showcase what they know and distance themselves from the pretender applicants.</p>\n<p>What we can do this time around is use a coding test that leverages language specific testing frameworks rather than generic STDIN/STDOUT tests. Let’s time limit this initial test to 30 minutes, and it can be autoscored to save your team time. I think that by using a coding assessment that directly mimics our own code base, we can do a better job of surfacing junior level talent that understands the nuances of the programming languages and frameworks that our product is built in. And you can then use code playback tools to then quickly get a sense of each candidate’s thought process as they worked through the assessment.</p>\n<h1>Hiring mid to senior level developers</h1>\n<p>Most of the more senior level developers that are applying for our open positions are coming in via referrals or have built substantial products in the past. Let’s not make them jump through hoops to prove that they can write code.</p>\n<p>Instead, my team will interview and pre-screen senior level developers first. This way we can make sure they’re a cultural fit and also have the opportunity to sell them on our company, our product, and the culture you’ve built within the engineering team.</p>\n<p>If a candidate makes it through my team and shows genuine excitement for the role, we can then ask them to complete a project based coding assessment reflective of the work you’d task them with once hired. Coding projects like this are actually a great opportunity to get candidates excited about contributing to our code base. We can send this exercise to candidates following their interview and ask them to spend 2-3 hours on it at the most. If they’re already excited about the opportunity and see validity in the assessment, I think we’ll see a lot more submissions from senior developers.</p>\n<p>By going this route, every candidate that you talk to will already be sold on our company and should have completed a reasonably scoped and highly relevant coding assessment. We can rely initially on automated scoring of the assessment so that we know the candidate can do the work, allowing you to focus any time you spend with the candidate on the quality of their work and the other soft skills you’d expect too see in a senior developer.</p>\n<p>For example, you can use a pair programming session to ask candidates more detailed questions about where they’re at with the assessment. What would they do next? How would they add an additional feature? What would their requirements gathering process look like? That sort of thing. I think this will give you a better sense of each candidate’s thought process, problem solving ability, and work style—we’ll already have evidence that these engineers are competent in writing code.</p>\n<p>Please let me know your thoughts on reworking our hiring process with these ideas in mind. I’m very confident that we can be protective of your time while also opening up the top of the hiring funnel and giving my team the opportunity to sell developers on our company.</p>\n<h1>Next steps</h1>\n<p>Coding assessments are an important touchpoint early in the hiring process and directly reflect our employer brand—let’s use them to create a strong first impression and build credibility with job candidates.</p>\n<p>The team at <a href=\"https://www.qualified.io\">Qualified.io</a> offers a product that includes a library of pre-built assessments as well as the ability to <a href=\"https://www.qualified.io/blog/posts/introducing-project-code-challenges\">build custom project based coding assessments</a>. Qualified’s assessment methodology has been refined by millions of developers in the Codewars community to make it as relevant, useful, and efficient as possible.</p>\n<p>The platform also supports code playback, pair programming sessions, and gives you the ability to manually add feedback or ask questions about any segment of submitted code. Developers can even complete assessments using their own development environment (IDE), so they’re working in a comfortable format that allows them to put their best foot forward. Qualified’s customers include companies like Apple, GE, Vimeo, and Andela so <a href=\"https://www.qualified.io/signup\">I thought it might be worth a look</a>.</p>\n<p>Thanks for hearing me out—I’m looking forward to working with you to create a better hiring process for this upcoming year. To shipping features and filling roles!</p>\n<p>-Your Director of Talent Acquisition</p>\n","tags":null,"body":"![Dear VP of Engineering](//images.ctfassets.net/4ol5sgskowtw/4kc1xyQ6GfDXMtIMwlaO1S/554650d584c4de9fa5f21ab3740565e3/letter.jpg)\n\nDear VP of Engineering,\n\nIt’s me again… your Director of Talent Acquisition. Our conversations lately have been a bit tense, so I wanted to reach out and extend the proverbial olive branch. I think we can both agree that we’re struggling to find qualified candidates for our open development positions—that means features not shipped for you and positions not filled for me. Neither of us is winning with the status quo!\n\nLet me start by saying this—we’re in this together and I’ve heard your concerns. The coding test that we tried injecting into the hiring process was unpopular with candidates. It only tested basic skills, and many of the candidates that passed the test weren’t able to perform on-the-job as well as we hoped. We made a few mis-hires as a result, which was painful for both of us.\n\nWe’ve since reverted to the homegrown coding project that your team built in-house. I agree that it’s done a better job of surfacing qualified candidates, but it’s also killing my ability to fill our hiring funnel with candidates. Even worse, manually reviewing each submission has become a huge time-suck for your team. \n\nI understand that you don’t want to talk to any candidates until they’ve demonstrated a certain level of proficiency with writing code—that makes complete sense. But software developers are in high demand and asking them to complete a lengthy coding exercise at the beginning of the hiring process has all but dried up our applicant pool. \n\nTalent acquisition is essentially a sales job—asking every applicant to complete a lengthy coding exercise at the outset of the recruiting process means that most often I don’t even have the opportunity to sell candidates on our company.\n\nSo where do we go from here? I have a few ideas that I wanted to run by you.\n\n# Hiring junior developers\nWhen we’re hiring junior developers, I’m OK with asking them to complete a coding test early in the hiring process. At this level I think it’s appropriate to ask the candidate to prove a certain level of coding proficiency, and an assessment gives good candidates the ability to showcase what they know and distance themselves from the pretender applicants.\n\nWhat we can do this time around is use a coding test that leverages language specific testing frameworks rather than generic STDIN/STDOUT tests. Let’s time limit this initial test to 30 minutes, and it can be autoscored to save your team time. I think that by using a coding assessment that directly mimics our own code base, we can do a better job of surfacing junior level talent that understands the nuances of the programming languages and frameworks that our product is built in. And you can then use code playback tools to then quickly get a sense of each candidate’s thought process as they worked through the assessment.\n\n# Hiring mid to senior level developers\nMost of the more senior level developers that are applying for our open positions are coming in via referrals or have built substantial products in the past. Let’s not make them jump through hoops to prove that they can write code.\n\nInstead, my team will interview and pre-screen senior level developers first. This way we can make sure they’re a cultural fit and also have the opportunity to sell them on our company, our product, and the culture you’ve built within the engineering team.\n\nIf a candidate makes it through my team and shows genuine excitement for the role, we can then ask them to complete a project based coding assessment reflective of the work you’d task them with once hired. Coding projects like this are actually a great opportunity to get candidates excited about contributing to our code base. We can send this exercise to candidates following their interview and ask them to spend 2-3 hours on it at the most. If they’re already excited about the opportunity and see validity in the assessment, I think we’ll see a lot more submissions from senior developers.\n\nBy going this route, every candidate that you talk to will already be sold on our company and should have completed a reasonably scoped and highly relevant coding assessment. We can rely initially on automated scoring of the assessment so that we know the candidate can do the work, allowing you to focus any time you spend with the candidate on the quality of their work and the other soft skills you’d expect too see in a senior developer. \n\nFor example, you can use a pair programming session to ask candidates more detailed questions about where they’re at with the assessment. What would they do next? How would they add an additional feature? What would their requirements gathering process look like? That sort of thing. I think this will give you a better sense of each candidate’s thought process, problem solving ability, and work style—we’ll already have evidence that these engineers are competent in writing code.\n\nPlease let me know your thoughts on reworking our hiring process with these ideas in mind. I’m very confident that we can be protective of your time while also opening up the top of the hiring funnel and giving my team the opportunity to sell developers on our company. \n\n# Next steps\nCoding assessments are an important touchpoint early in the hiring process and directly reflect our employer brand—let’s use them to create a strong first impression and build credibility with job candidates.\n\nThe team at [Qualified.io](https://www.qualified.io) offers a product that includes a library of pre-built assessments as well as the ability to [build custom project based coding assessments](https://www.qualified.io/blog/posts/introducing-project-code-challenges). Qualified’s assessment methodology has been refined by millions of developers in the Codewars community to make it as relevant, useful, and efficient as possible.\n\nThe platform also supports code playback, pair programming sessions, and gives you the ability to manually add feedback or ask questions about any segment of submitted code. Developers can even complete assessments using their own development environment (IDE), so they’re working in a comfortable format that allows them to put their best foot forward. Qualified’s customers include companies like Apple, GE, Vimeo, and Andela so [I thought it might be worth a look](https://www.qualified.io/signup).  \n\nThanks for hearing me out—I’m looking forward to working with you to create a better hiring process for this upcoming year. To shipping features and filling roles!\n\n-Your Director of Talent Acquisition\n","richBody":null,"description":"It’s me again… your Director of Talent Acquisition. Our conversations lately have been a bit tense, so I wanted to reach out and extend the proverbial olive branch. I think we can both agree that we’re not overflowing with qualified candidates for our open development positions.","hideHero":true,"publishDate":"2019-11-14T00:00-08:00"},{"prettyDate":"Oct 21, 2019","title":"The Qualified Manifesto On Hiring Software Developers","href":"https://www.qualified.io/blog/posts/the-qualified-manifesto-on-hiring-software-developers","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/5T93PdUifOPqMGoHMtV8jC/0a4c0839d515da09f9c421fd71217010/BBY8iew.jpg?w=100&q=1","length":"10 min read","excerpt":"The philosophy, ideals, and behaviors that guide everything from our product strategy to our own processes for hiring software engineers.\n","collection":"Hiring","slug":"the-qualified-manifesto-on-hiring-software-developers","author":"Geoff Roberts","htmlContent":"<h2>The philosophy, ideals, and behaviors that guide everything from our product strategy to our own processes for hiring software engineers</h2>\n<p>At Qualified we help our customers assess and hire software engineers, giving them the tools and process required to turn hiring developers into a strategic advantage. As a software company ourselves, we face the same challenges that our customers do—we need to identify and hire great software engineers too!</p>\n<p>Having to live our customers’ challenges first hand results in nearly constant introspection—is the product that we’re building <em>really</em> the best way to assess engineers? Are the hiring practices that we advocate for ones that we follow ourselves? What’s guiding our own behaviors both as a product organization and as an employer?</p>\n<p>While every company is unique, we thought it was important that we put our own ideas, beliefs, and philosophies on hiring software engineers down on paper—this document is inwardly focused on us, for us, and by us—we simply ask that you hold us accountable to these ideals. If you derive some benefit from these concepts, even better—these are the common denominators that guide our own behaviors and that we openly advocate for.</p>\n<p>Without further adieu, we proudly present The Qualified Manifesto on Hiring Software Developers!</p>\n<h1>Philosophy</h1>\n<p>The all-too-common <a href=\"https://www.qualified.io/blog/posts/why-developers-hate-coding-skills-tests\">tension between talent acquisition and engineering leaders</a> is well documented—overcoming that tension is at the very core of the philosophy that guides our product development and hiring practices. Our guiding philosophy is best stated as follows:</p>\n<blockquote>\n<p>Identifying great developer talent requires a deep understanding of how developers work and live, which leads to a mutual respect between companies and developers. We build products that we would want to use ourselves as developer candidates, because these tools let us show off our best work when we use them.</p>\n</blockquote>\n<h1>What we believe and how we behave</h1>\n<p>The following ideas are central tenets that showcase our own beliefs and drive our own actions and behaviors.</p>\n<h2>Never put a developer on the spot</h2>\n<p>Don’t stare at developers with judging eyes as you watch them think though a problem—seriously, that’s just creepy.</p>\n<p>White board or pair-programming interviews where a developer is asked to write code while others look on in real-time is simply a bad practice. Pair-programming sessions can work great if you’re working with a candidate collaboratively to get a sense of their working style, or if you’re asking them to take you through code that they’ve already written. But putting them on the spot and asking them to write code on-demand? Don’t do it.</p>\n<p>All you’re doing is cranking up the candidate’s anxiety and limiting their ability to showcase what they can do.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/6wrMhDX60M61kwTpAYlpSU/97ded50362f1e61ad362418e3c4129b5/Qualified_10.21.jpg\" alt=\"Software development interview\"></p>\n<h2>Work samples are the best predictor of job performance</h2>\n<p>While coding tests often get a bad rap—much like standardized tests—that sentiment is most often fueled by a feeling that the test simply isn’t relevant to the work to be done in the real world. So how do you make assessments more useful?</p>\n<p>From a <a href=\"https://www.nap.edu/read/1898/chapter/3\">psychometric standpoint</a>, relevant work samples have been shown to be one of the best predictors of on-the-job performance. Forget the generic coding tests that probe only for algorithmic skills in favor of an assessment that’s truly optimized for its stage in the hiring funnel and the role that you’re hiring for. Assessments should be designed to test actual on-the-job tasks and the technology stacks and frameworks developers will be asked to work with once hired.</p>\n<h2>A fair hiring process is built on evidence and merit</h2>\n<p>Your engineering team may have referred candidates to your company or you may be tempted to hire a developer based on their experience at a Facebook or an Uber. Don’t fall into these traps—in our experience the best developers often aren’t the ones with the shiny resumes and big company experience.</p>\n<p>Good assessments and a sound hiring process judge engineers solely on merit and applied skills, removing all other forms of bias possible. That’s why we’ve built features like “Blind Reviews” into our assessment platform, removing any identifying information from code submissions and in turn forcing your team to make evidence based hires solely on the basis of demonstrated skills and the quality of the work sample submitted.</p>\n<h2>Let developers work in a comfortable development environment</h2>\n<p>You wouldn’t have asked Picasso to deliver his next masterpiece using the worn out pack of Crayola’s jammed into the back of your junk drawer, so why would you ask a developer to complete a coding test in a rigid coding environment that’s foreign to them?</p>\n<p>The entire process of interviewing software developers should focus on a singular objective—surfacing developers that have the skills to effectively contribute to your code base in a real world setting. You want to give them every opportunity to showcase their best work, and that starts with letting them perform in a development environment that’s comfortable for them.</p>\n<p>We’re committed to offering a highly flexible and configurable web IDE for developers to work in—or better yet, <a href=\"https://www.qualified.io/blog/posts/developers-can-now-complete-qualified-assessments-in-their-own-ide\">developers can complete Qualified assessments from the comfort of their own IDE</a>.</p>\n<h2>Limit assessments to 30 minutes or 3 hours</h2>\n<p>Don’t ask job candidates to spend eight hours writing software as part of a job interview—that’s really messed up and shows no respect for the applicant’s time.</p>\n<p>As a general rule of thumb, limit pre-screening coding assessments delivered at the top of the hiring funnel to 30 minutes. It makes sense to set a maximum time of 45-60 minutes for these assessments so candidates don’t feel like the challenge is a ticking time bomb, but design pre-screening assessments so that they’re completed in an average of 30 minutes.</p>\n<p>Later stage coding projects that are more detailed and involved should be capped at about 3 hours. These are simply rough benchmarks that we believe show respect for a job candidate’s time, while still giving your company a sizeable work sample on which to assess a developer’s skills.</p>\n<p>Best yet, by capping the amount of time a candidate spends on a coding exercise you can see how much progress each developer was able to make in the time allotted and can use interactive sessions to openly discuss where they’re at and what they might do next if they were to continue with the project.</p>\n<h2>Wield considerate pre-screening practices when hiring senior engineers</h2>\n<p>Senior developers are often turned off when they’re asked to complete a pre-screening coding assessment… <em>“I’m a senior engineer with tons of experience, why are you asking me to waste time on this simple coding task?”</em></p>\n<p>The sentiment is completely reasonable, but we also empathize with the people on the hiring side of the table. We’ve experienced the following issues first hand when hiring senior engineers:</p>\n<ol>\n<li>Senior level engineering roles get tons of applications from junior engineers.</li>\n<li>Lots of developers who look great on paper couldn’t write decent looking code for even basic tasks.</li>\n<li>Looking through pre-existing code samples (often suggested as a solution when hiring senior engineers) is hugely time consuming, inconsistent, and it’s tough to verify that the candidate actually wrote the code.</li>\n</ol>\n<p>As a result, we advocate for using a pre-screening assessment with senior engineers—but “senior” doesn’t mean that the assessment should be a really in-depth, difficult, or lengthy coding assessment. Instead, use a short pre-screen simply to verify that applicants can perform fairly basic coding tasks—this is a useful first cut in the hiring funnel, and should be something that a truly senior engineer can knock out in minutes. That’s fair to both sides.</p>\n<p>As for more junior engineers? The best candidates will even appreciate your pre-screening exercises as an opportunity for them to showcase what they can do and distance themselves from other applicants.</p>\n<p>Finally, don’t lose sight of your business objectives—if you’re hiring for a mission critical development role and have a low number of applicants, you can always skip the pre-screen to increase applicant flow and defer assessing technical competency until later in the hiring funnel.</p>\n<h2>Use project based coding challenges to assess mid to senior level engineers at later stages of the hiring funnel</h2>\n<p>While pre-screens are a useful tool in helping you separate the pretenders from the contenders, once a basic level of coding proficiency is demonstrated you should focus the rest of the hiring process on assessing the skills that you’d expect senior level developers to possess beyond coding ability.</p>\n<p>Create a project based coding assessment that directly reflects the work the developer would be expected to deliver if hired, making sure to provide some open-ended flexibility that allows candidates to showcase their strengths. This might require the developer to digest an existing code base, gather requirements, communicate to your team a push request they’d like to make, or provide a detailed description of code that they’ve submitted before merging into production. These activities move your assessment process beyond the code, revealing insights into what a candidate would actually be like to work with.</p>\n<h2>Don't rely solely on automated scoring of code assessments—a sound code review process delivers 3x value</h2>\n<p>When evaluating project based coding assessments, don’t simply rely on automated scoring—your developers review code all the time and a proper review process should take only a few minutes (versus an hour or more spent in an interview). Use automated scoring to handle the parts of the review process that are most time consuming, allowing reviewers to focus only on the parts of the code that really deserve their attention.</p>\n<p>Automated scoring can help you answer the question “Can the candidate do the work?”, but a short code review is what will truly provide insight into whether or not the candidate can provide <em>quality work</em>. Also, don’t miss out on the opportunity to discuss the work that was completed with the candidate to talk through different approaches, techniques, and things like how the solution would need to scale if new requirements were added. This is where pair-programming sessions, code playback tools, and peer code reviews can add value.</p>\n<p>Chances are, your engineering team performs peer code reviews once code is submitted for merging into production. Why not do the same for work samples submitted during the hiring process? You can also watch short code playback clips or jump on a pair-programming session with the candidate to discuss their submission. Whichever route you choose, this process should take 5 to 15 minutes per review instead of an hour or more spent watching someone program live then writing up feedback afterwards. Your engineering team will appreciate having their afternoon back!</p>\n<p>A three pronged review approach like this is the key to surfacing senior level talent that automated scoring in isolation simply can’t deliver.</p>\n<h2>Candidates deserve to know where they stand in your hiring process</h2>\n<p>If you’ve asked an engineer to invest significant time applying for a role at your company, they deserve timely feedback on where they stand in your hiring process. Nothing is worse than being “ghosted!”</p>\n<p>Make no mistake about it, how you treat applicants directly reflects your company's culture. Progressing candidates swiftly through the hiring process shows that you're running an efficient process, and letting candidates that you won't be proceeding with know their status in a timely fashion shows respect and consideration of their time. Not only is it the right thing to do, but keeping candidates in the loop will help you from leaving them with a bad perception of your company.</p>\n<h1>We’re building the world that we want to live in</h1>\n<p>These guidelines may sound simple, but used collectively can help your company open up your candidate pipeline, build credibility with developers, and make a great impression throughout the hiring process—these concepts represent our north star. In short, we’re building the future of the developer hiring experience that we’d want to participate in ourselves as software engineers. It’s a pursuit that gets our team out of bed each day, and a future that we’re excited to help shape.</p>\n<p>Ready to give Qualified a try? <strong><a href=\"https://www.qualified.io/signup\">Sign-up for a free trial</a></strong>.</p>\n","tags":null,"body":"## The philosophy, ideals, and behaviors that guide everything from our product strategy to our own processes for hiring software engineers\n\nAt Qualified we help our customers assess and hire software engineers, giving them the tools and process required to turn hiring developers into a strategic advantage. As a software company ourselves, we face the same challenges that our customers do—we need to identify and hire great software engineers too!\n\nHaving to live our customers’ challenges first hand results in nearly constant introspection—is the product that we’re building *really* the best way to assess engineers? Are the hiring practices that we advocate for ones that we follow ourselves? What’s guiding our own behaviors both as a product organization and as an employer? \n\nWhile every company is unique, we thought it was important that we put our own ideas, beliefs, and philosophies on hiring software engineers down on paper—this document is inwardly focused on us, for us, and by us—we simply ask that you hold us accountable to these ideals. If you derive some benefit from these concepts, even better—these are the common denominators that guide our own behaviors and that we openly advocate for.\n\nWithout further adieu, we proudly present The Qualified Manifesto on Hiring Software Developers!\n\n# Philosophy\nThe all-too-common [tension between talent acquisition and engineering leaders](https://www.qualified.io/blog/posts/why-developers-hate-coding-skills-tests) is well documented—overcoming that tension is at the very core of the philosophy that guides our product development and hiring practices. Our guiding philosophy is best stated as follows:\n\n> Identifying great developer talent requires a deep understanding of how developers work and live, which leads to a mutual respect between companies and developers. We build products that we would want to use ourselves as developer candidates, because these tools let us show off our best work when we use them.\n\n# What we believe and how we behave\nThe following ideas are central tenets that showcase our own beliefs and drive our own actions and behaviors.\n\n## Never put a developer on the spot\nDon’t stare at developers with judging eyes as you watch them think though a problem—seriously, that’s just creepy.\n\nWhite board or pair-programming interviews where a developer is asked to write code while others look on in real-time is simply a bad practice. Pair-programming sessions can work great if you’re working with a candidate collaboratively to get a sense of their working style, or if you’re asking them to take you through code that they’ve already written. But putting them on the spot and asking them to write code on-demand? Don’t do it.\n\nAll you’re doing is cranking up the candidate’s anxiety and limiting their ability to showcase what they can do. \n\n![Software development interview](//images.ctfassets.net/4ol5sgskowtw/6wrMhDX60M61kwTpAYlpSU/97ded50362f1e61ad362418e3c4129b5/Qualified_10.21.jpg)\n\n## Work samples are the best predictor of job performance\nWhile coding tests often get a bad rap—much like standardized tests—that sentiment is most often fueled by a feeling that the test simply isn’t relevant to the work to be done in the real world. So how do you make assessments more useful?\n\nFrom a [psychometric standpoint](https://www.nap.edu/read/1898/chapter/3), relevant work samples have been shown to be one of the best predictors of on-the-job performance. Forget the generic coding tests that probe only for algorithmic skills in favor of an assessment that’s truly optimized for its stage in the hiring funnel and the role that you’re hiring for. Assessments should be designed to test actual on-the-job tasks and the technology stacks and frameworks developers will be asked to work with once hired.\n\n## A fair hiring process is built on evidence and merit\nYour engineering team may have referred candidates to your company or you may be tempted to hire a developer based on their experience at a Facebook or an Uber. Don’t fall into these traps—in our experience the best developers often aren’t the ones with the shiny resumes and big company experience.\n\nGood assessments and a sound hiring process judge engineers solely on merit and applied skills, removing all other forms of bias possible. That’s why we’ve built features like “Blind Reviews” into our assessment platform, removing any identifying information from code submissions and in turn forcing your team to make evidence based hires solely on the basis of demonstrated skills and the quality of the work sample submitted.\n\n## Let developers work in a comfortable development environment\nYou wouldn’t have asked Picasso to deliver his next masterpiece using the worn out pack of Crayola’s jammed into the back of your junk drawer, so why would you ask a developer to complete a coding test in a rigid coding environment that’s foreign to them?\n\nThe entire process of interviewing software developers should focus on a singular objective—surfacing developers that have the skills to effectively contribute to your code base in a real world setting. You want to give them every opportunity to showcase their best work, and that starts with letting them perform in a development environment that’s comfortable for them.\n\nWe’re committed to offering a highly flexible and configurable web IDE for developers to work in—or better yet, [developers can complete Qualified assessments from the comfort of their own IDE](https://www.qualified.io/blog/posts/developers-can-now-complete-qualified-assessments-in-their-own-ide).\n\n## Limit assessments to 30 minutes or 3 hours\nDon’t ask job candidates to spend eight hours writing software as part of a job interview—that’s really messed up and shows no respect for the applicant’s time.\n\nAs a general rule of thumb, limit pre-screening coding assessments delivered at the top of the hiring funnel to 30 minutes. It makes sense to set a maximum time of 45-60 minutes for these assessments so candidates don’t feel like the challenge is a ticking time bomb, but design pre-screening assessments so that they’re completed in an average of 30 minutes.\n\nLater stage coding projects that are more detailed and involved should be capped at about 3 hours. These are simply rough benchmarks that we believe show respect for a job candidate’s time, while still giving your company a sizeable work sample on which to assess a developer’s skills. \n\nBest yet, by capping the amount of time a candidate spends on a coding exercise you can see how much progress each developer was able to make in the time allotted and can use interactive sessions to openly discuss where they’re at and what they might do next if they were to continue with the project.   \n\n## Wield considerate pre-screening practices when hiring senior engineers\nSenior developers are often turned off when they’re asked to complete a pre-screening coding assessment… *“I’m a senior engineer with tons of experience, why are you asking me to waste time on this simple coding task?”*\n\nThe sentiment is completely reasonable, but we also empathize with the people on the hiring side of the table. We’ve experienced the following issues first hand when hiring senior engineers:\n\n\n1. Senior level engineering roles get tons of applications from junior engineers.\n2. Lots of developers who look great on paper couldn’t write decent looking code for even basic tasks.\n3. Looking through pre-existing code samples (often suggested as a solution when hiring senior engineers) is hugely time consuming, inconsistent, and it’s tough to verify that the candidate actually wrote the code.\n\nAs a result, we advocate for using a pre-screening assessment with senior engineers—but “senior” doesn’t mean that the assessment should be a really in-depth, difficult, or lengthy coding assessment. Instead, use a short pre-screen simply to verify that applicants can perform fairly basic coding tasks—this is a useful first cut in the hiring funnel, and should be something that a truly senior engineer can knock out in minutes. That’s fair to both sides.\n\nAs for more junior engineers? The best candidates will even appreciate your pre-screening exercises as an opportunity for them to showcase what they can do and distance themselves from other applicants.\n\nFinally, don’t lose sight of your business objectives—if you’re hiring for a mission critical development role and have a low number of applicants, you can always skip the pre-screen to increase applicant flow and defer assessing technical competency until later in the hiring funnel.\n\n## Use project based coding challenges to assess mid to senior level engineers at later stages of the hiring funnel\nWhile pre-screens are a useful tool in helping you separate the pretenders from the contenders, once a basic level of coding proficiency is demonstrated you should focus the rest of the hiring process on assessing the skills that you’d expect senior level developers to possess beyond coding ability.  \n\nCreate a project based coding assessment that directly reflects the work the developer would be expected to deliver if hired, making sure to provide some open-ended flexibility that allows candidates to showcase their strengths. This might require the developer to digest an existing code base, gather requirements, communicate to your team a push request they’d like to make, or provide a detailed description of code that they’ve submitted before merging into production. These activities move your assessment process beyond the code, revealing insights into what a candidate would actually be like to work with.\n\n## Don't rely solely on automated scoring of code assessments—a sound code review process delivers 3x value\n\nWhen evaluating project based coding assessments, don’t simply rely on automated scoring—your developers review code all the time and a proper review process should take only a few minutes (versus an hour or more spent in an interview). Use automated scoring to handle the parts of the review process that are most time consuming, allowing reviewers to focus only on the parts of the code that really deserve their attention. \n\nAutomated scoring can help you answer the question “Can the candidate do the work?”, but a short code review is what will truly provide insight into whether or not the candidate can provide *quality work*. Also, don’t miss out on the opportunity to discuss the work that was completed with the candidate to talk through different approaches, techniques, and things like how the solution would need to scale if new requirements were added. This is where pair-programming sessions, code playback tools, and peer code reviews can add value.\n\nChances are, your engineering team performs peer code reviews once code is submitted for merging into production. Why not do the same for work samples submitted during the hiring process? You can also watch short code playback clips or jump on a pair-programming session with the candidate to discuss their submission. Whichever route you choose, this process should take 5 to 15 minutes per review instead of an hour or more spent watching someone program live then writing up feedback afterwards. Your engineering team will appreciate having their afternoon back!\n\nA three pronged review approach like this is the key to surfacing senior level talent that automated scoring in isolation simply can’t deliver.  \n\n## Candidates deserve to know where they stand in your hiring process\nIf you’ve asked an engineer to invest significant time applying for a role at your company, they deserve timely feedback on where they stand in your hiring process. Nothing is worse than being “ghosted!” \n\nMake no mistake about it, how you treat applicants directly reflects your company's culture. Progressing candidates swiftly through the hiring process shows that you're running an efficient process, and letting candidates that you won't be proceeding with know their status in a timely fashion shows respect and consideration of their time. Not only is it the right thing to do, but keeping candidates in the loop will help you from leaving them with a bad perception of your company.\n\n# We’re building the world that we want to live in\nThese guidelines may sound simple, but used collectively can help your company open up your candidate pipeline, build credibility with developers, and make a great impression throughout the hiring process—these concepts represent our north star. In short, we’re building the future of the developer hiring experience that we’d want to participate in ourselves as software engineers. It’s a pursuit that gets our team out of bed each day, and a future that we’re excited to help shape.\n\n\nReady to give Qualified a try? __[Sign-up for a free trial](https://www.qualified.io/signup)__.\n","richBody":null,"description":"The philosophy, ideals, and behaviors that guide everything from our product strategy to our own processes for hiring software engineers.","hideHero":true,"publishDate":"2019-10-21T00:00-07:00"},{"prettyDate":"Sep 3, 2019","title":"How To Hire Coding School Graduates","href":"https://www.qualified.io/blog/posts/how-to-hire-coding-school-graduates","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/7xMuXOjjpYjewJE9ETKDWZ/00af8bf32cd645ef34ba8cdc1046a3fb/Coding-School-Grads.png?w=100&q=1","length":"15 min read","excerpt":"A step-by-step playbook to successfully hire coding school graduates and set them up for success within your engineering team.\n","collection":"Hiring","slug":"how-to-hire-coding-school-graduates","author":"Geoff Roberts","htmlContent":"<h2>A step-by-step playbook to successfully hire coding school graduates and set them up for success within your engineering team</h2>\n<p>In recent years the number of coding schools and bootcamps have exploded, with the number of graduates growing from around 3,000 in 2013 to over 20,000 in 2018 according to an industry report by <a href=\"https://www.coursereport.com/reports/2018-coding-bootcamp-market-size-research\">Course Report</a>. The coding school market is now a $240M+ industry with more than 100 full-time programs in the US and Canada alone.</p>\n<p>Coding school programs, whether they take place in-person or online, offer students an accelerated and more cost effective path to learn computer programming. And the number of graduating students is rapidly encroaching on the estimated 93,000 students who earned an undergraduate degree in computer science in 2017.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/7xMuXOjjpYjewJE9ETKDWZ/00af8bf32cd645ef34ba8cdc1046a3fb/Coding-School-Grads.png\" alt=\"Coding-School-Grads\"></p>\n<p>While coding schools and bootcamps offer an attractive alternative means of breaking into a technology career, students graduating from these programs enter the workforce with a different trajectory and set of experiences than students graduating from a typical 4-year university. And while many employers are attracted by the possibility of hiring from this new pool of talent, most are still flying blind when it comes to figuring out how to hire coding school graduates and integrate them into their engineering organizations most effectively.</p>\n<p>We’ve talked to coding school graduates and employers alike to pull together this guide on how to make the most out of hiring coding school graduates. If your company is interested in hiring these students, start here.</p>\n<h1>Understanding the anatomy of the coding school</h1>\n<p>The moniker “coding school” or “coding bootcamp” is often thrown around loosely, and the first step in successfully hiring graduates from these programs is to learn the nuances of each—not all coding schools are created equal. Most coding school programs are unaccredited and vary greatly in duration and format, so begin by getting a sense of the curriculum and rigor required to graduate from any program you are thinking of hiring from.</p>\n<p>According to <a href=\"https://www.coursereport.com/reports/2018-coding-bootcamp-market-size-research\">Course Report</a>, the average coding school program lasts for about 14 weeks and the vast majority of programs meet in-person, although the prevalence of online offerings is growing. On average students pay $11,900 in tution—far below the cost of the typical undergraduate degree—but many alternative forms of financing are becoming available. Here are a few examples of the different models employed by some of the most popular coding schools.</p>\n<h2>Andela</h2>\n<p><a href=\"https://www.qualified.io/blog/posts/andela-is-building-africas-tech-ecosystem\">Andela</a> focuses on identifying and training software engineering talent in Africa, before placing graduates in full-time roles on global engineering teams. The company actually pays students throughout the course of their training (there’s no cost to the student), and graduates technically become Andela employees although they work day-to-day on the engineering teams of <a href=\"https://andela.com/our-featured-partners/\">Andela’s partner companies</a>. Hiring managers interested in hiring Andela graduates must technically become an Andela partner in order to work with their engineers.</p>\n<h2>Lambda School</h2>\n<p>Lamda School offers students the option of completing their program by attending full-time for 9 months or part-time for 18 months. All classes are taken online, and students have the option of either pre-paying for the program or paying nothing up front but then paying Lambda back 17% of their salary for two years once they land a job (payback is capped at $30,000).</p>\n<h2>Trilogy</h2>\n<p>Only about 5% of coding schools or bootcamps are university affiliated, but companies like <a href=\"https://www.trilogyed.com/\">Trilogy Education</a> partner with universities to help them deliver skills-based training programs often through extension school style bootcamps. <a href=\"https://bootcamp.unh.edu/\">Here’s an example of one such program</a>—a 24 week web development bootcamp offered through the University of New Hampshire.</p>\n<h2>General Assembly</h2>\n<p>General Assembly offers perhaps the largest range of coding classes offering both full-time and part-time courses that are available either online or on campuses in major cities throughout the world.</p>\n<p>Regardless of educational model, more than half of coding schools focus their web development courses on learning full-stack Javascript. HTML and CSS are often also taught as foundational skills, and courses focused on Python and Ruby on Rails are also particularly popular.</p>\n<h1>Understanding the anatomy of the coding school student</h1>\n<p>According to a <a href=\"https://www.switchup.org/rankings/coding-bootcamp-survey\">survey by Switchup</a>, coding school students range in age from 18 to 75, with the average student being around 30 years old. Interestingly, 80% of students have already earned a bachelor’s degree or higher—many are either trying to level up their technical skills or are switching careers altogether.</p>\n<p>Nearly three quarters of students cited career advancement as their reason for attending coding school, and 58% of students had little to no programming experience prior to their entering their coding school program. For employers, this is important context—a vast majority of students are starting the process of learning to code from scratch.</p>\n<p>The good news? Students are generally getting what they hoped for out of coding school programs and bootcamps. On average, graduates see a salary increase of about $20,000 after finishing their program, raising their salary from an average of $42,000 prior to the program to $62,000 upon completion.</p>\n<p>This is also important context for hiring managers—while coding school graduates are in most cases relatively junior engineers that will need continued mentorship and training once hired, graduates tend to be hired at very affordable rates compared to more experienced engineers.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/2VVKVjcgIIG8u2xWzthqZA/36f94eee3241df83ba37068ceac4bfcc/hitesh-choudhary-pMnw5BSZYsA-unsplash.jpg\" alt=\"hitesh-choudhary-pMnw5BSZYsA-unsplash\"></p>\n<h1>How to select coding school graduates</h1>\n<p>Once your company has decided to give hiring coding school graduates a go, the challenge quickly becomes, “OK, but who do we hire?” With more than 20,000 graduating students each year the process of finding your next great developer from within this talent pool begins.</p>\n<h2>Look for students who geek out on code</h2>\n<p>The hiring process should start by really delving into the reasons that the student wants to build a career in software development—understanding their underlying motivations is the first step in making a great hire.</p>\n<p>“Look for the really curious, smart and passionate people,” says Jane Jaxon, VP of People at Wistia. “There are people who go to coding school for the same reasons many folks go for a MD, MBA or JD—the potential to unlock a very lucrative career. Pick the curious person who is genuinely passionate about what they do and wants to learn. If they genuinely geek out about the craft of coding, it's a great start!\"</p>\n<h2>Create a coding assessment to pre-screen for basic skills</h2>\n<p>While your potential new hire just completed coding school, it’s totally appropriate to pull together your own coding assessment to validate that graduates have the basic skills that they’ll need to be successful at your company. Make sure that the assessment is delivered in a language that the student learned during coding school, and focus on testing only fundamental concepts. Also make sure that students can work within a development environment that they feel comfortable in—you want to give them every opportunity to showcase their skills.</p>\n<p>While <a href=\"https://www.qualified.io/blog/posts/why-developers-hate-coding-skills-tests\">coding assessments are sometimes unpopular with more senior engineers</a>, you’ll find that coding school graduates often embrace these assessments enthusiastically as an opportunity to showcase their new skills and distance themselves from other applicants. This is also a great litmus test for whether or not the potential hire really geeks out on writing code.</p>\n<h2>Start by hiring out of one program</h2>\n<p>With the competition for engineering talent being so fierce, you may be compelled to look into hiring any coding school graduate that finds their way into your applicant pool. While we can’t blame you for giving those applications a look, if you’re just getting started with hiring coding school graduates we’d recommend that you carefully select a particular program to start with and focus initially on successfully recruiting their graduates.</p>\n<p>This works for a couple of reasons—first off, with programs like Andela your company will become an official partner and will have access to their graduates as a result. Additionally, schools with a model like Lambda School often don’t get paid until they land their graduates a job. With this model, the school itself is highly motivated to find companies that consistently look to hire their graduates. Finally, by familiarizing yourself with a single school you’ll come to get a better sense of what skills their graduates do and do not possess upon graduation based on the rigor of the program and its specific curriculum. You’ll also have the opportunity to build relationships with the school’s staff, and schools quickly become echo chambers when students and staff alike are consistently hearing great things about working at your company from previous graduates.</p>\n<p>Want to take the relationship a step further? Ask your existing engineers if they would be interested in serving as mentors or even guest lecturers within the program you’ve selected. Some members of your existing team would probably love the chance to help shape the skills of future co-workers.</p>\n<h2>Hire more than one engineer at once</h2>\n<p>While we’re advocating for hiring out of one coding school to start, you should hire more than one coding school grad at a time if at all possible. This is helpful for a number of reasons—to start you simply have a bigger sample size to look at when assessing the skill level of coding school graduates. This helps you avoid false conclusions about the viability of hiring engineers from a particular school based on one really good (or bad) hire.</p>\n<p>Secondarily, remember that most coding school grads came into the program without any prior programming experience—suddenly being thrust into a technology company and expected to deliver code can be hugely intimidating! By hiring even small groups of students in cohorts, new hires have the comfort of having peers at the same level, which can also create a healthy sense of competition. New engineers will be ready to prove their mettle!</p>\n<p>Now that we’ve covered how to hire coding school graduates, let’s turn our attention to how they can best be integrated into your existing engineering team.</p>\n<h1>How to successfully integrate coding school graduates within your engineering team</h1>\n<p>You’ve identified a coding school program that you’re ready to turn into a consistent source of junior talent for your engineering team, and you’ve even found a couple of aspiring engineers that you’re ready to bring onboard. Here’s how you can set those new hires up to be successful.</p>\n<h2>A solid game plan requires pre-work</h2>\n<p>This may sound obvious, but successfully hiring junior engineers begins with carefully scoping what you’re expecting to get out of them. Identify work that can be successfully completed by junior developers, and have a realistic model for how long these tasks may take. Use your task management software to label simple bugs and small improvements that would be not only good experience for new developers, but also helps them develop a deeper knowledge of your code base.</p>\n<p>“They started me out with small tasks for a front-end engineer like, ‘Fix this CSS bug that we have,’ or ‘the product team wants this text changed,’” <a href=\"https://www.linkedin.com/in/christopher-atoki/\">says Chris Atoki</a>, a front-end developer who graduated from Lambda School before being hired at <a href=\"https://www.neat.com/\">Neat</a>. “Even though they knew I could change text it was more of just getting in that flow of making a pull request and getting it reviewed and merged. It helped me get a feel for how the code base works. They didn't demand that I start pushing code that first week, it was more of, ‘take your time, it's a huge code base, get familiar with it.’\"</p>\n<p>Talk to your existing team and find senior developers who would like to gain supervisor or management experience, and are willing to step into a mentorship role. They can help you pull together some of the items outlined below—you need to have these items ready before you start hiring.</p>\n<h2>Assign new hires an internal mentor</h2>\n<p>Generally speaking coding school graduates are going to be a better fit at larger companies that have teams of more senior engineers that can help mentor them and level up their skills. If your company is a resource constrained start-up with a development team that doesn’t have time to spend developing junior engineers, chances are your hires won’t be too successful.</p>\n<p>“I came in pretty confident that I knew the job that I had to do,” says Atoki. “Neat hired me as a junior developer and one of the things they did was assign me to a senior developer that I worked very closely with. I knew React and the front-end technologies pretty well, but he had years of experience with the things that I may not have encountered doing projects on my own, so he was able to fill in those gaps for me.”</p>\n<p>When bootcamp graduates join your team, assign each of them an internal mentor that they can go to to ask questions and get feedback on their work. After initial onboarding, make sure your new hires have 1-on-1 meetings with their mentor at a minimum of once per week.</p>\n<p>“Pair bootcamp grads with a great mentor who is interested in becoming a manager,” says Jaxon. “It's a great way to get two people exactly what they need in order to grow their careers and both parties have equal stakes in the success of the relationship.\"</p>\n<h2>Clearly lay out a professional development plan</h2>\n<p>Remember that coding school graduates will typically have only learned the basics of programming in a particular technology. It’s very likely that your company leverages other technologies or has certain development practices that are critically important to learn in order for an engineer to start contributing in earnest.</p>\n<p>Whatever those technologies or practices are, clearly outline them for your new hires and present them with a curriculum that they’re expected to follow to continue to level up their skills while on the job. Allocate at least 10% of your new hires’ time to continued professional development—they may think that they just completed coding school, but it’s your job to continue to invest in their education so that your investment in each new hire continues to appreciate and add increasing value to your team.</p>\n<p>\"Don't underestimate the value of time,” says Jaxon. “There's only so much you can learn in such a short period of time and bootcamp grads haven’t had that many opportunities to run into issues and learn from them. Folks with more traditional computer science training likely have the benefit of more time engrossed in engineering problems and have had more learning opportunities as a result. If you view the early employment of coding school graduates as an extension of learning, you'll be much better positioned.\"</p>\n<h2>Reinforce learning by continually assessing core concepts</h2>\n<p>Your new hires will appreciate that you’ve clearly laid out a professional development path for them—but make sure you have the ability to continually assess and objectively measure their learning. <a href=\"https://www.qualified.io/?utm_source=blog&amp;utm_medium=referral&amp;utm_campaign=hirecodingschool\">Code assessment platforms like Qualified</a> allow companies to continually assess their engineers, providing not only valuable insight into the relative skills of your engineers but also an opportunity to continually reinforce core concepts with new hires. The team at Andela has started doing this with new hires, with significant success.</p>\n<p>“For internal leveling, we test learners multiple times,” <a href=\"https://www.qualified.io/blog/posts/andela-is-building-africas-tech-ecosystem\">says Maya Neria</a>, Senior Product Manager at Andela. “One use case we tried was testing knowledge and behavioral reinforcements by continuously testing our developers on important use cases like certain types of testing or debugging. We wanted to make sure that developers are consistently being tested throughout our training program on those things. We saw that Qualified helped with knowledge retention, which was really promising.”</p>\n<h2>Give coding school grads opportunities to immediately contribute to your code base</h2>\n<p>Nobody wants to make it to the big leagues only to sit on the bench—the same is true of software engineers! After completing coding school, students are eager to get to work and put their new programming skills to work—it’s your job to harness that excitement and continue to build on it.</p>\n<p>While it’s common for junior engineers to start off by focusing on squashing bugs, look to provide opportunities for new hires to contribute new code to your code base as well. It’s probably not going to be your company’s next major new feature, but seeing your first code push go live and seeing customers actually interact with functionality that you built is a high for most engineers that are just getting started. Celebrating small contributions is a requisite step in reaching higher level contributions.</p>\n<h2>Encourage new hires to work on side projects</h2>\n<p>This one may sound strange at first blush, but one of the best things you can do for a junior level engineer is encourage them to work on side projects. While they’re beginning to contribute to your company’s pre-existing code base, encouraging coding school graduates to build a side project has a plethora of benefits.</p>\n<p>First off, it gives them additional experience outside of working with your code base. They can build a project based on their personal interests, and in addition to writing code will gain valuable experience in requirements gathering and designing a software product from the ground up. They may even choose to build their side project in an entirely different or complementary technology to your own, further diversifying their skill set.</p>\n<p>Encourage new hires to share their side projects with their mentor or with other engineers on your team during 1-on-1’s or team lunches, or leverage communities like <a href=\"https://www.indiehackers.com/\">IndieHackers</a> to share their side projects with other developers to get feedback and celebrate milestones. You’re trying to stoke the embers of your new hires’ excitement for programming, and shouldn’t view side projects as being in conflict with their primary role at your company. If you’ve followed the guidance outlined in this guide, your new hire will be appreciative of these opportunities and loyal.</p>\n<h1>20,000+ coding school grads are looking for jobs… now go get ‘em!</h1>\n<p>As the number of coding school graduates continue to increase, so does the opportunity that your company has to turn these programs into a valuable source of new engineering talent. Going to coding school is an investment each student chose to make in themselves—it’s your job to continue to invest in these individuals so you avoid any failure-to-launch type of scenarios.</p>\n<p>Pair students that demonstrate basic skills and a genuine passion for coding with a clear professional development path and who knows—your next CTO might just be enrolling in a coding school today.</p>\n","tags":null,"body":"## A step-by-step playbook to successfully hire coding school graduates and set them up for success within your engineering team \n\n\n\nIn recent years the number of coding schools and bootcamps have exploded, with the number of graduates growing from around 3,000 in 2013 to over 20,000 in 2018 according to an industry report by [Course Report](https://www.coursereport.com/reports/2018-coding-bootcamp-market-size-research). The coding school market is now a $240M+ industry with more than 100 full-time programs in the US and Canada alone.\n\nCoding school programs, whether they take place in-person or online, offer students an accelerated and more cost effective path to learn computer programming. And the number of graduating students is rapidly encroaching on the estimated 93,000 students who earned an undergraduate degree in computer science in 2017.\n\n![Coding-School-Grads](//images.ctfassets.net/4ol5sgskowtw/7xMuXOjjpYjewJE9ETKDWZ/00af8bf32cd645ef34ba8cdc1046a3fb/Coding-School-Grads.png)\n\nWhile coding schools and bootcamps offer an attractive alternative means of breaking into a technology career, students graduating from these programs enter the workforce with a different trajectory and set of experiences than students graduating from a typical 4-year university. And while many employers are attracted by the possibility of hiring from this new pool of talent, most are still flying blind when it comes to figuring out how to hire coding school graduates and integrate them into their engineering organizations most effectively.\n\nWe’ve talked to coding school graduates and employers alike to pull together this guide on how to make the most out of hiring coding school graduates. If your company is interested in hiring these students, start here. \n\n# Understanding the anatomy of the coding school\nThe moniker “coding school” or “coding bootcamp” is often thrown around loosely, and the first step in successfully hiring graduates from these programs is to learn the nuances of each—not all coding schools are created equal. Most coding school programs are unaccredited and vary greatly in duration and format, so begin by getting a sense of the curriculum and rigor required to graduate from any program you are thinking of hiring from.\n\nAccording to [Course Report](https://www.coursereport.com/reports/2018-coding-bootcamp-market-size-research), the average coding school program lasts for about 14 weeks and the vast majority of programs meet in-person, although the prevalence of online offerings is growing. On average students pay $11,900 in tution—far below the cost of the typical undergraduate degree—but many alternative forms of financing are becoming available. Here are a few examples of the different models employed by some of the most popular coding schools.\n\n## Andela\n[Andela](https://www.qualified.io/blog/posts/andela-is-building-africas-tech-ecosystem) focuses on identifying and training software engineering talent in Africa, before placing graduates in full-time roles on global engineering teams. The company actually pays students throughout the course of their training (there’s no cost to the student), and graduates technically become Andela employees although they work day-to-day on the engineering teams of [Andela’s partner companies](https://andela.com/our-featured-partners/). Hiring managers interested in hiring Andela graduates must technically become an Andela partner in order to work with their engineers. \n\n## Lambda School\nLamda School offers students the option of completing their program by attending full-time for 9 months or part-time for 18 months. All classes are taken online, and students have the option of either pre-paying for the program or paying nothing up front but then paying Lambda back 17% of their salary for two years once they land a job (payback is capped at $30,000).\n\n## Trilogy\nOnly about 5% of coding schools or bootcamps are university affiliated, but companies like [Trilogy Education](https://www.trilogyed.com/) partner with universities to help them deliver skills-based training programs often through extension school style bootcamps. [Here’s an example of one such program](https://bootcamp.unh.edu/)—a 24 week web development bootcamp offered through the University of New Hampshire. \n\n## General Assembly\nGeneral Assembly offers perhaps the largest range of coding classes offering both full-time and part-time courses that are available either online or on campuses in major cities throughout the world. \n\nRegardless of educational model, more than half of coding schools focus their web development courses on learning full-stack Javascript. HTML and CSS are often also taught as foundational skills, and courses focused on Python and Ruby on Rails are also particularly popular. \n\n# Understanding the anatomy of the coding school student\nAccording to a [survey by Switchup](https://www.switchup.org/rankings/coding-bootcamp-survey), coding school students range in age from 18 to 75, with the average student being around 30 years old. Interestingly, 80% of students have already earned a bachelor’s degree or higher—many are either trying to level up their technical skills or are switching careers altogether. \n\nNearly three quarters of students cited career advancement as their reason for attending coding school, and 58% of students had little to no programming experience prior to their entering their coding school program. For employers, this is important context—a vast majority of students are starting the process of learning to code from scratch. \n\nThe good news? Students are generally getting what they hoped for out of coding school programs and bootcamps. On average, graduates see a salary increase of about $20,000 after finishing their program, raising their salary from an average of $42,000 prior to the program to $62,000 upon completion.\n\nThis is also important context for hiring managers—while coding school graduates are in most cases relatively junior engineers that will need continued mentorship and training once hired, graduates tend to be hired at very affordable rates compared to more experienced engineers.\n\n![hitesh-choudhary-pMnw5BSZYsA-unsplash](//images.ctfassets.net/4ol5sgskowtw/2VVKVjcgIIG8u2xWzthqZA/36f94eee3241df83ba37068ceac4bfcc/hitesh-choudhary-pMnw5BSZYsA-unsplash.jpg)\n\n# How to select coding school graduates\nOnce your company has decided to give hiring coding school graduates a go, the challenge quickly becomes, “OK, but who do we hire?” With more than 20,000 graduating students each year the process of finding your next great developer from within this talent pool begins.\n\n## Look for students who geek out on code \nThe hiring process should start by really delving into the reasons that the student wants to build a career in software development—understanding their underlying motivations is the first step in making a great hire.\n\n“Look for the really curious, smart and passionate people,” says Jane Jaxon, VP of People at Wistia. “There are people who go to coding school for the same reasons many folks go for a MD, MBA or JD—the potential to unlock a very lucrative career. Pick the curious person who is genuinely passionate about what they do and wants to learn. If they genuinely geek out about the craft of coding, it's a great start!\"\n\n## Create a coding assessment to pre-screen for basic skills\nWhile your potential new hire just completed coding school, it’s totally appropriate to pull together your own coding assessment to validate that graduates have the basic skills that they’ll need to be successful at your company. Make sure that the assessment is delivered in a language that the student learned during coding school, and focus on testing only fundamental concepts. Also make sure that students can work within a development environment that they feel comfortable in—you want to give them every opportunity to showcase their skills. \n\nWhile [coding assessments are sometimes unpopular with more senior engineers](https://www.qualified.io/blog/posts/why-developers-hate-coding-skills-tests), you’ll find that coding school graduates often embrace these assessments enthusiastically as an opportunity to showcase their new skills and distance themselves from other applicants. This is also a great litmus test for whether or not the potential hire really geeks out on writing code.  \n\n## Start by hiring out of one program\nWith the competition for engineering talent being so fierce, you may be compelled to look into hiring any coding school graduate that finds their way into your applicant pool. While we can’t blame you for giving those applications a look, if you’re just getting started with hiring coding school graduates we’d recommend that you carefully select a particular program to start with and focus initially on successfully recruiting their graduates.\n\nThis works for a couple of reasons—first off, with programs like Andela your company will become an official partner and will have access to their graduates as a result. Additionally, schools with a model like Lambda School often don’t get paid until they land their graduates a job. With this model, the school itself is highly motivated to find companies that consistently look to hire their graduates. Finally, by familiarizing yourself with a single school you’ll come to get a better sense of what skills their graduates do and do not possess upon graduation based on the rigor of the program and its specific curriculum. You’ll also have the opportunity to build relationships with the school’s staff, and schools quickly become echo chambers when students and staff alike are consistently hearing great things about working at your company from previous graduates. \n\nWant to take the relationship a step further? Ask your existing engineers if they would be interested in serving as mentors or even guest lecturers within the program you’ve selected. Some members of your existing team would probably love the chance to help shape the skills of future co-workers.\n\n## Hire more than one engineer at once\nWhile we’re advocating for hiring out of one coding school to start, you should hire more than one coding school grad at a time if at all possible. This is helpful for a number of reasons—to start you simply have a bigger sample size to look at when assessing the skill level of coding school graduates. This helps you avoid false conclusions about the viability of hiring engineers from a particular school based on one really good (or bad) hire.\n\nSecondarily, remember that most coding school grads came into the program without any prior programming experience—suddenly being thrust into a technology company and expected to deliver code can be hugely intimidating! By hiring even small groups of students in cohorts, new hires have the comfort of having peers at the same level, which can also create a healthy sense of competition. New engineers will be ready to prove their mettle!\n\nNow that we’ve covered how to hire coding school graduates, let’s turn our attention to how they can best be integrated into your existing engineering team.\n\n# How to successfully integrate coding school graduates within your engineering team\nYou’ve identified a coding school program that you’re ready to turn into a consistent source of junior talent for your engineering team, and you’ve even found a couple of aspiring engineers that you’re ready to bring onboard. Here’s how you can set those new hires up to be successful.\n\n## A solid game plan requires pre-work\nThis may sound obvious, but successfully hiring junior engineers begins with carefully scoping what you’re expecting to get out of them. Identify work that can be successfully completed by junior developers, and have a realistic model for how long these tasks may take. Use your task management software to label simple bugs and small improvements that would be not only good experience for new developers, but also helps them develop a deeper knowledge of your code base.\n\n“They started me out with small tasks for a front-end engineer like, ‘Fix this CSS bug that we have,’ or ‘the product team wants this text changed,’” [says Chris Atoki](https://www.linkedin.com/in/christopher-atoki/), a front-end developer who graduated from Lambda School before being hired at [Neat](https://www.neat.com/). “Even though they knew I could change text it was more of just getting in that flow of making a pull request and getting it reviewed and merged. It helped me get a feel for how the code base works. They didn't demand that I start pushing code that first week, it was more of, ‘take your time, it's a huge code base, get familiar with it.’\"\n\nTalk to your existing team and find senior developers who would like to gain supervisor or management experience, and are willing to step into a mentorship role. They can help you pull together some of the items outlined below—you need to have these items ready before you start hiring.\n\n## Assign new hires an internal mentor\nGenerally speaking coding school graduates are going to be a better fit at larger companies that have teams of more senior engineers that can help mentor them and level up their skills. If your company is a resource constrained start-up with a development team that doesn’t have time to spend developing junior engineers, chances are your hires won’t be too successful. \n\n“I came in pretty confident that I knew the job that I had to do,” says Atoki. “Neat hired me as a junior developer and one of the things they did was assign me to a senior developer that I worked very closely with. I knew React and the front-end technologies pretty well, but he had years of experience with the things that I may not have encountered doing projects on my own, so he was able to fill in those gaps for me.”  \n\nWhen bootcamp graduates join your team, assign each of them an internal mentor that they can go to to ask questions and get feedback on their work. After initial onboarding, make sure your new hires have 1-on-1 meetings with their mentor at a minimum of once per week.\n\n“Pair bootcamp grads with a great mentor who is interested in becoming a manager,” says Jaxon. “It's a great way to get two people exactly what they need in order to grow their careers and both parties have equal stakes in the success of the relationship.\"\n\n## Clearly lay out a professional development plan\nRemember that coding school graduates will typically have only learned the basics of programming in a particular technology. It’s very likely that your company leverages other technologies or has certain development practices that are critically important to learn in order for an engineer to start contributing in earnest.\n\nWhatever those technologies or practices are, clearly outline them for your new hires and present them with a curriculum that they’re expected to follow to continue to level up their skills while on the job. Allocate at least 10% of your new hires’ time to continued professional development—they may think that they just completed coding school, but it’s your job to continue to invest in their education so that your investment in each new hire continues to appreciate and add increasing value to your team. \n\n\"Don't underestimate the value of time,” says Jaxon. “There's only so much you can learn in such a short period of time and bootcamp grads haven’t had that many opportunities to run into issues and learn from them. Folks with more traditional computer science training likely have the benefit of more time engrossed in engineering problems and have had more learning opportunities as a result. If you view the early employment of coding school graduates as an extension of learning, you'll be much better positioned.\"\n\n## Reinforce learning by continually assessing core concepts\nYour new hires will appreciate that you’ve clearly laid out a professional development path for them—but make sure you have the ability to continually assess and objectively measure their learning. [Code assessment platforms like Qualified](https://www.qualified.io/?utm_source=blog&utm_medium=referral&utm_campaign=hirecodingschool) allow companies to continually assess their engineers, providing not only valuable insight into the relative skills of your engineers but also an opportunity to continually reinforce core concepts with new hires. The team at Andela has started doing this with new hires, with significant success.\n\n“For internal leveling, we test learners multiple times,” [says Maya Neria](https://www.qualified.io/blog/posts/andela-is-building-africas-tech-ecosystem), Senior Product Manager at Andela. “One use case we tried was testing knowledge and behavioral reinforcements by continuously testing our developers on important use cases like certain types of testing or debugging. We wanted to make sure that developers are consistently being tested throughout our training program on those things. We saw that Qualified helped with knowledge retention, which was really promising.” \n\n## Give coding school grads opportunities to immediately contribute to your code base\nNobody wants to make it to the big leagues only to sit on the bench—the same is true of software engineers! After completing coding school, students are eager to get to work and put their new programming skills to work—it’s your job to harness that excitement and continue to build on it.\n\nWhile it’s common for junior engineers to start off by focusing on squashing bugs, look to provide opportunities for new hires to contribute new code to your code base as well. It’s probably not going to be your company’s next major new feature, but seeing your first code push go live and seeing customers actually interact with functionality that you built is a high for most engineers that are just getting started. Celebrating small contributions is a requisite step in reaching higher level contributions.\n\n## Encourage new hires to work on side projects\nThis one may sound strange at first blush, but one of the best things you can do for a junior level engineer is encourage them to work on side projects. While they’re beginning to contribute to your company’s pre-existing code base, encouraging coding school graduates to build a side project has a plethora of benefits.\n\nFirst off, it gives them additional experience outside of working with your code base. They can build a project based on their personal interests, and in addition to writing code will gain valuable experience in requirements gathering and designing a software product from the ground up. They may even choose to build their side project in an entirely different or complementary technology to your own, further diversifying their skill set.\n\nEncourage new hires to share their side projects with their mentor or with other engineers on your team during 1-on-1’s or team lunches, or leverage communities like [IndieHackers](https://www.indiehackers.com/) to share their side projects with other developers to get feedback and celebrate milestones. You’re trying to stoke the embers of your new hires’ excitement for programming, and shouldn’t view side projects as being in conflict with their primary role at your company. If you’ve followed the guidance outlined in this guide, your new hire will be appreciative of these opportunities and loyal.\n\n# 20,000+ coding school grads are looking for jobs… now go get ‘em!\nAs the number of coding school graduates continue to increase, so does the opportunity that your company has to turn these programs into a valuable source of new engineering talent. Going to coding school is an investment each student chose to make in themselves—it’s your job to continue to invest in these individuals so you avoid any failure-to-launch type of scenarios. \n\nPair students that demonstrate basic skills and a genuine passion for coding with a clear professional development path and who knows—your next CTO might just be enrolling in a coding school today.\n","richBody":null,"description":"A step-by-step playbook to successfully hire coding school graduates and set them up for success within your engineering team. ","hideHero":true,"publishDate":"2019-09-03T00:00-07:00"},{"prettyDate":"Aug 19, 2019","title":"Introducing Project Code Challenges","href":"https://www.qualified.io/blog/posts/introducing-project-code-challenges","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/23s03wDB3gv76xYGfz4hLX/2559775730e4700232f796f3de15c472/Screen_Shot_2019-07-22_at_11.10.03_AM.png?w=100&q=1","length":"3 min read","excerpt":"Our latest product update is our biggest strike yet in our war against synthetic coding challenges that test only algorithmic skills.\nLearn how Project Code Challenges can help your company better assess front-end development skills as well as candidates for mid to senior level engineering roles.\n","collection":"Qualified","slug":"introducing-project-code-challenges","author":"Geoff Roberts","htmlContent":"<h2>Our latest product update is our biggest strike yet in our war against synthetic coding challenges that test only algorithmic skills.</h2>\n<p>Existing Qualified customers are well aware that the core of our product is made up of <a href=\"https://www.qualified.io/blog/posts/what-is-the-difference-between-an-assessment-and-a-challenge\">challenges (specific coding tasks) and assessments (a set of challenges)</a> to be solved by a student or job candidate. Using this format, Qualified customers can pull together a series of challenges relevant to any given role and deliver them to candidates as a fully tied together assessment.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/5Lpgq7QiClptr8npVkfneQ/3de4febebf9681831232a3aa112ca0c0/QualifiedDifferenceHero.png\" alt=\"QualifiedDifferenceHero\"></p>\n<p>While this format has served us well, we’re thrilled to announce the launch of <strong>Project Code Challenges</strong>. This is more than a new feature—it’s really a set of new functionality that will form the foundation of our challenges and assessments going forward. Here’s why we’re so excited about it.</p>\n<h1>Move from “can you code” to “how well do you code?”</h1>\n<p>Qualified’s success has always been driven by a simple idea—deliver coding skills assessments that better reflect real world programming, which in turn better surfaces candidates with the skills needed to deliver on-the-job. But most coding challenges have always been a bit restricted, typically asking candidates to complete a coding task while working with a single file that they can edit. These tests are easy to deliver, but that’s simply not how you write programs.</p>\n<p>Our project code challenges support the use of multiple files, allowing us to mimic actual programming projects that much better and allowing candidates to structure programs the way that they would naturally do it. Companies can also control what files candidates can see and edit as they work through challenges in their browser.</p>\n<p>Ultimately this functionality gives candidates the ability to really show off their skills and distinguish themselves in a way that they simply couldn’t with a single file coding test. This also gives companies a lot more versatility in terms of how they assess job candidates, really moving the conversation from “can you code” to “how do you code?”</p>\n<p>This transition provides a much deeper level of insight into how candidates think and solve problems, making project code challenges a great fit for assessing more mid to senior level developers.</p>\n<img src=\"//images.ctfassets.net/4ol5sgskowtw/7JRoyrqtweL9WUD1DMmWS2/f232a56c73e8f2a91b2e2f189d59dcd5/project_challenges_features.png\" class=\"full-width\">\n<h1>Use previews and code playback to watch an application visually evolve</h1>\n<p>Project code challenges also provide much better support for assessing front-end development skills, giving candidates the ability to write complete programs directly within their browser.</p>\n<p>Our web preview functionality shows candidates the visual front-end output of what they’ve built as they are building it, so that they can see the progression of their app or program in real-time. Companies can then use code playback to watch the progression of the app as it was built, again providing a deeper level of insight into a developer’s thought process and problem solving ability.</p>\n<img src=\"//images.ctfassets.net/4ol5sgskowtw/2nYiuDhD1mNoingH7shFE0/ee906733798f72356d6a2aca0767b0df/project_challenges_review_features.png\" class=\"full-width\">\n<h1>Key Use Cases for Project Code Challenges</h1>\n<p>Project code challenges allow multiple files to be used when completing an assessment and enable an advanced set of configuration options for which files the candidate can see, edit and add. Here are three specific use cases that these challenges better support:</p>\n<ol>\n<li>Hiring mid to senior level developers</li>\n<li>Assessing front-end development skills</li>\n<li>Testing languages like Java and C# that are difficult to test in single file format</li>\n</ol>\n<h1>New Assessments For Project Challenges</h1>\n<p>We have added a number of new challenges, and some new pre-built assessments, to go along with this release. Their use-cases range from front-end developer pre-screens to full-blown take homes that will give you a deep dive into a developer's skillset.</p>\n<img src=\"//images.ctfassets.net/4ol5sgskowtw/GqW4d1wjaC3hfGaIAgWdm/ce2f973c483578d539e745c369e7c7cc/python-node-react-vue.png\" class=\"float-left-desktop\" style=\"max-width: 500px;margin-bottom: 70px;\">\n<ul>\n<li><strong>Node:</strong> Advanced File Handling</li>\n<li><strong>Python:</strong> Advanced Take Home</li>\n<li><strong>React:</strong> Pre-Screen</li>\n<li><strong>React:</strong> Fundamentals</li>\n<li><strong>React:</strong> Intermediate</li>\n<li><strong>React:</strong> Forms and Sanitizing</li>\n<li><strong>React:</strong> Advanced Take-Home</li>\n<li><strong>Vue:</strong> Intermediate</li>\n</ul>\n<hr>\n<p>Interested in learning more about how your team can best leverage project code challenges? Email us at <a href=\"/cdn-cgi/l/email-protection#413524202c013034202d28272824256f282e\"><span class=\"__cf_email__\" data-cfemail=\"3c48595d517c4d495d50555a555958125553\">[email&nbsp;protected]</span></a> to setup a 1-on-1 consultation with a Qualified product expert or <a href=\"https://my.demio.com/ref/s9OAls22aqTK547v\"><strong>join us on Thursday, August 29 at 11:00am PT for a live webinar introducing Project Code Challenges with Qualified CTO Jake Hoffner</strong></a>.</p>\n<p>Register today!</p>\n","tags":null,"body":"## Our latest product update is our biggest strike yet in our war against synthetic coding challenges that test only algorithmic skills.\n\nExisting Qualified customers are well aware that the core of our product is made up of [challenges (specific coding tasks) and assessments (a set of challenges)](https://www.qualified.io/blog/posts/what-is-the-difference-between-an-assessment-and-a-challenge) to be solved by a student or job candidate. Using this format, Qualified customers can pull together a series of challenges relevant to any given role and deliver them to candidates as a fully tied together assessment.\n\n![QualifiedDifferenceHero](//images.ctfassets.net/4ol5sgskowtw/5Lpgq7QiClptr8npVkfneQ/3de4febebf9681831232a3aa112ca0c0/QualifiedDifferenceHero.png)\n\nWhile this format has served us well, we’re thrilled to announce the launch of __Project Code Challenges__. This is more than a new feature—it’s really a set of new functionality that will form the foundation of our challenges and assessments going forward. Here’s why we’re so excited about it.\n\n# Move from “can you code” to “how well do you code?”\nQualified’s success has always been driven by a simple idea—deliver coding skills assessments that better reflect real world programming, which in turn better surfaces candidates with the skills needed to deliver on-the-job. But most coding challenges have always been a bit restricted, typically asking candidates to complete a coding task while working with a single file that they can edit. These tests are easy to deliver, but that’s simply not how you write programs.\n\nOur project code challenges support the use of multiple files, allowing us to mimic actual programming projects that much better and allowing candidates to structure programs the way that they would naturally do it. Companies can also control what files candidates can see and edit as they work through challenges in their browser.\n\nUltimately this functionality gives candidates the ability to really show off their skills and distinguish themselves in a way that they simply couldn’t with a single file coding test. This also gives companies a lot more versatility in terms of how they assess job candidates, really moving the conversation from “can you code” to “how do you code?” \n\nThis transition provides a much deeper level of insight into how candidates think and solve problems, making project code challenges a great fit for assessing more mid to senior level developers. \n\n<img src=\"//images.ctfassets.net/4ol5sgskowtw/7JRoyrqtweL9WUD1DMmWS2/f232a56c73e8f2a91b2e2f189d59dcd5/project_challenges_features.png\" class=\"full-width\" />\n\n# Use previews and code playback to watch an application visually evolve\nProject code challenges also provide much better support for assessing front-end development skills, giving candidates the ability to write complete programs directly within their browser. \n\nOur web preview functionality shows candidates the visual front-end output of what they’ve built as they are building it, so that they can see the progression of their app or program in real-time. Companies can then use code playback to watch the progression of the app as it was built, again providing a deeper level of insight into a developer’s thought process and problem solving ability. \n\n\n<img src=\"//images.ctfassets.net/4ol5sgskowtw/2nYiuDhD1mNoingH7shFE0/ee906733798f72356d6a2aca0767b0df/project_challenges_review_features.png\" class=\"full-width\" />\n\n# Key Use Cases for Project Code Challenges\nProject code challenges allow multiple files to be used when completing an assessment and enable an advanced set of configuration options for which files the candidate can see, edit and add. Here are three specific use cases that these challenges better support:\n\n1. Hiring mid to senior level developers\n2. Assessing front-end development skills\n3. Testing languages like Java and C# that are difficult to test in single file format\n\n# New Assessments For Project Challenges\n\nWe have added a number of new challenges, and some new pre-built assessments, to go along with this release. Their use-cases range from front-end developer pre-screens to full-blown take homes that will give you a deep dive into a developer's skillset. \n\n<img src=\"//images.ctfassets.net/4ol5sgskowtw/GqW4d1wjaC3hfGaIAgWdm/ce2f973c483578d539e745c369e7c7cc/python-node-react-vue.png\" class=\"float-left-desktop\" style=\"max-width: 500px;margin-bottom: 70px;\" />\n\n- __Node:__ Advanced File Handling\n- __Python:__ Advanced Take Home\n- __React:__ Pre-Screen\n- __React:__ Fundamentals\n- __React:__ Intermediate\n- __React:__ Forms and Sanitizing\n- __React:__ Advanced Take-Home\n- __Vue:__ Intermediate\n\n------\n\nInterested in learning more about how your team can best leverage project code challenges? Email us at team@qualified.io to setup a 1-on-1 consultation with a Qualified product expert or [__join us on Thursday, August 29 at 11:00am PT for a live webinar introducing Project Code Challenges with Qualified CTO Jake Hoffner__](https://my.demio.com/ref/s9OAls22aqTK547v).\n\n\nRegister today! ","richBody":null,"description":"Our latest product update is our biggest strike yet in our war against synthetic coding challenges that test only algorithmic skills.\n\nLearn how Project Code Challenges can help your company better assess front-end development skills as well as candidates for mid to senior level engineering roles.","hideHero":true,"publishDate":"2019-08-19T00:00-07:00"},{"prettyDate":"Jul 18, 2019","title":"Andela Is Building Africa’s Tech Ecosystem—And Companies Like Microsoft Are Following Suit","href":"https://www.qualified.io/blog/posts/andela-is-building-africas-tech-ecosystem","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/2Y6jSlXKDXsJgc7c9k5Od9/198fc5cced9b2b4c88bf940bd35c8b55/Screen_Shot_2019-07-12_at_1.34.47_PM.png?w=100&q=1","length":"9 min read","excerpt":"Andela is working to build technology ecosystems throughout Africa—a challenge that starts with processing over 130,000 applications from aspiring software engineers. When it comes to assessing the programming ability of a continent, Andela has turned to Qualfied's developer assessment platform.\n","collection":"Hiring","slug":"andela-is-building-africas-tech-ecosystem","author":"Geoff Roberts","htmlContent":"<p>It’s still dark out when my alarm rings at 5:00am and I begin the familiar shuffle down the hall to the kitchen and the coffee machine. I pour a steaming cup as my computer boots up, the steam mixing with the early morning fog that’s spilling in through an open window.</p>\n<p>Headphones on, Zoom meeting link located, and I’m still rubbing the sleep out of my eyes as I connect to the call. But almost as soon as I begin chatting with Maya Neria, Senior Product Manager at <a href=\"https://andela.com/\">Andela</a>, the inflection in her voice stirs me to life.</p>\n<p>“What our founders realized is that brilliance is evenly distributed in the world,” says Neria. “And Africa has the fastest growing market of people entering employability age.”</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/2Y6jSlXKDXsJgc7c9k5Od9/198fc5cced9b2b4c88bf940bd35c8b55/Screen_Shot_2019-07-12_at_1.34.47_PM.png\" alt=\"Screen Shot 2019-07-12 at 1.34.47 PM\"></p>\n<p>Neria is talking to me from Nairobi, Kenya, a city nicknamed “Silicon Savannah” where she’s lived for the past two and a half years. “You have a national park that has lions in the middle of the city and you have booming skyscrapers, development everywhere,” says Neria. “There are tech hubs and co-working spaces of all shapes and sizes. You see really vibrant tech meet-ups across different technologies, anywhere from JavaScript to blockchain.”</p>\n<p>Nairobi has quickly become one of Africa’s leading tech hubs, along with Lagos, Cairo, Johannesburg, and Dar es Salaam. But it’s the people rather than the geography that led Neria to leave the US and relocate to Kenya.</p>\n<p>“I don’t know how to say it in less cliché words, but the people I’ve met here are the most driven I’ve ever met,” she says. “I met a fisherman who had virtually nothing and taught himself to code on his Android phone before he found Andela and I just thought to myself, ‘This is incredible.’”</p>\n<h1>Meet Andela</h1>\n<p>While most of our tech news feeds are jammed up with stories of Facebook’s most recent privacy scandal, stories like Andela’s far too often slip under the radar. But companies that you know—Gusto, Invision, GitHub, and Skillshare among them—are already building their products using Andela software engineers. And tech giants like Microsoft have taken notice, moving into Nairobi as the global competition for software engineering talent continues to heat up faster than a Sub-Saharan morning.</p>\n<p>Founded in <a href=\"https://www.businessinsider.com/github-ceo-nat-friedman-says-nigerian-developer-community-growing-fast-2019-6\">Nigeria</a> in 2014, Andela was built around a simple idea—identify high potential software developers, invest in their training, then place them on global engineering teams where they begin to contribute and continue to grow. The company handles talent assessment, on-boarding, and continuous improvement of the software developers accepted into their program, supporting their mission of “catalyzing the growth of tech ecosystems across Africa.” The company has hired software developers in 17 African countries to date and <a href=\"https://techcrunch.com/2019/01/23/connecting-african-software-developers-with-top-tech-companies-nets-andela-100-million/\">recently raised a $100M series D investment</a>. Andela’s investors include Google Ventures, Salesforce Ventures, and the Chan Zuckerberg Foundation amongst others.</p>\n<p>Aspiring Andela engineers must first apply to the program, where they’re screened for basic technical skills, general aptitude, and learning velocity. The company has received over 130,000 applications to date, leading to the hire of more than 1,300 software engineers.</p>\n<p>Once accepted into the program Andela engineers work for six months in simulated product environments similar to what they would encounter on global engineering teams. They build real products, contribute to code standups, learn agile methodology, and also have team skill sessions where they work on developing confidence, public speaking, and learn best practices associated with being a distributed team member.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/6IHqLD3Xad9UbzhJIqItdP/2f5c67119e616d17c25f584e46e5dd3e/AndelaNairobi.jpeg\" alt=\"AndelaNairobi\"></p>\n<p>“A lot of developers that are coming out of Andela are interested in reinvesting in Africa—they aren't being pulled out of Africa,” says Neria. “They’ve gotten broad experience in international companies, but they stayed locally the entire time so all of that money is being reinvested into the local ecosystem. They're founding startups here. They're able to mentor here, locally. And we're seeing a huge boom in the startup scene here in Nairobi.”</p>\n<h1>Searching for a partner to help assess the technical skills of a continent</h1>\n<p>While Andela’s mission is an easy one to get behind, the logistics of their operation include a wide myriad of challenges. The challenges of growing tech ecosystems in the developing world aside, Andela’s success is directly tied to a challenge much more familiar to even the best funded tech companies in Silicon Valley—the company needed to find a repeatable way to identify, assess, and hire engineering talent at scale. Sorting through more than 130,000 applications for their fellowship program was only the beginning.</p>\n<p>In the early days, Andela relied on a combination of psychometric tests and a technical assessment tool that their internal team hacked together.</p>\n<p>“The issue was the internal tool was always buggy, and it assessed knowledge way more than application of knowledge,” says Neria. “I also noticed that we didn't really have a framework for hiring that was consistent throughout our entire recruitment model, so we set out to create that framework.”</p>\n<p>The recruitment model that Andela landed on seeks to assess developer candidates on three dimensions:</p>\n<ol>\n<li>Values alignment and cultural fit</li>\n<li>Output quality (the degree of excellence in which people are showing skills and producing work)</li>\n<li>Learning velocity and ability to incorporate feedback</li>\n</ol>\n<p>“I did a big industry review of over 100 tools, both for values fit, technical skills, and psychometric evaluations,” says Neria. “We looked at software like Codility, HackerRank, and GapJumpers and I was really trying to see whether or not they'd give us more than just the standard technical knowledge testing. The big thing that I was looking for was also if candidates were getting feedback.”</p>\n<blockquote>\n<h1>What we saw with Qualified is that you guys are taking a really, really interesting approach in terms of your dedication to mimicking a real work environment. So many technical tools out there basically don't—they only test theory and algorithms.\"</h1>\n<p>Maya Neria, Senior Product Manager, Andela</p>\n</blockquote>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/6PuMy1TPRiRFUaDl3jveQL/926d23bf5f5b7471d70ca8da6ab781b7/Andela-logo-landscape-blue.png\" alt=\"Andela-logo-landscape-blue\"></p>\n<p>\"Qualified gave us a deeper level of insight into each applicant by providing insights into things like ‘How are you applying and thinking through technical questions? And based on the curriculum that we provide, how are you applying that knowledge to answer coding challenges?’”</p>\n<p>“A lot of our developers were self-taught and so their in-depth understanding of algorithms wasn't necessarily that high—but they could still build great products, were still mathematical, and could apply the concept of an algorithm to the way that they were building products.\"</p>\n<blockquote>\n<h1>That's what really drove us to use Qualified—it was a combination of a push to be more rigorous in the data that we collect from our applicants and Qualified's dedication to having people showcase the work that they would do in a real product environment. Your technical skills assessments are really aligned with the real work environment which we were hoping for in order to better predict on-the-job performance.”</h1>\n</blockquote>\n<h1>Learning to find, assess, and hire software developers at scale</h1>\n<p>With Qualified identified as a strategic partner to help Andela assess technical output and predict on-the-job performance, Neria’s team set out to build a consistent recruitment process capable of scaling alongside Andela’s lofty ambitions. While the process continues to be refined and improved, talent acquisition and engineering leaders would be wise to borrow from Andela’s approach.</p>\n<ol>\n<li><strong>Home study materials</strong>—All applicants are provided home study materials that cover computer science basics using either Python or Javascript.</li>\n<li><strong>Initial screen</strong>—After applicants receive their home study materials, they’re asked to complete an initial screening that’s delivered via Google Forms. This first cut in their recruiting funnel is used to help sort through the sheer volume of applications that they receive, by testing an applicant’s understanding of the home study materials as well as their cultural and values fit.</li>\n<li><strong>Qualified assessment</strong>—Applicants that pass the Google Forms assessment are then invited to take a Qualified assessment, which is designed to test their technical skills and ability to incorporate real world feedback. Currently about 15% of students who complete the Qualified assessment are ultimately hired. “Our goal is to continuously bump that up and make Qualified even more predictive,” says Neria. “Right now we’re assessing junior developers, and I think for them technical skills are less indicative of quality and it’s more about cognitive ability and learning. I think the predictive power of Qualified could be much higher for developers that have more experience.”</li>\n<li><strong>Six months of paid training</strong>—Applicants who are accepted into the program continue to be trained for six months, during which Andela captures thousands of data points on their relative strengths and weaknesses.</li>\n<li><strong>Paired with a global engineering team</strong>—After training is completed, Andela developers become a member of a global engineering team. Their skills continue to be assessed and the company invests heavily in mid-to-senior level developers that provide ongoing mentorship to junior developers.</li>\n</ol>\n<p>When I asked Neria about the benefits Andela has realized since injecting Qualified assessments into the recruiting funnel, she’s quick to cite the scalability of the process.</p>\n<p>“I think one of the things Qualified does really well is you offer the entire package of ‘How do you assess software developers at scale?’ It’s not only the technology around automated assessments and customization; it’s also the pre-loaded database of questions that you can work through that are tagged and easily searchable. The keyword here is ‘at scale’ for me. When you have 4,000 developers per month applying to your program you need a system where you can pull questions, easily change or customize assessments, and see the results over time.\"</p>\n<blockquote>\n<h1>Our recruitment team has definitely grown less exponentially than our candidate pipeline has and a big part of that is thanks to Qualified assessments. We’ve been able to keep our overhead costs down with Qualified as a growth partner. It’s a very holistic package—I’ve seen software products that provide one piece of the puzzle, and I see Qualified as really being the full thing.”</h1>\n</blockquote>\n<h1>What’s next for Andela… and Qualified</h1>\n<p>While Neria’s search for a technical screening methodology that predicts on the job performance was undertaken with the recruitment process in mind, Andela has also begun experimenting with <a href=\"https://www.qualified.io/for-education\">Qualified Educate</a> to upskill their existing engineers.</p>\n<p>“For internal leveling, the platform allows us to test learners multiple times,” says Neria. “One use case we tried was testing knowledge and behavioral reinforcements by continuously testing our developers on important use cases like certain types of testing or debugging. We wanted to make sure that developers are consistently being tested throughout our training program on those things. We saw that Qualified helped with knowledge retention, which was really promising.”</p>\n<p>Neria also sees Qualified playing a significant role in benchmarking developers of different skill levels objectively—a need of increasing importance as the prevalence of remote work continues to grow.</p>\n<p>“The fact that Qualified provides so much data from their community on how developers across the globe perform on different technical questions is huge. I would say that's a really big asset for anyone looking to hire more senior talent.”</p>\n<p>Andela’s team is now nearly 2,000 strong, but their work in developing tech ecosystems across Africa is just getting started. I know it’s only a matter of time before I find myself chatting with an Andela engineer on my next early morning conference call.</p>\n","tags":null,"body":"It’s still dark out when my alarm rings at 5:00am and I begin the familiar shuffle down the hall to the kitchen and the coffee machine. I pour a steaming cup as my computer boots up, the steam mixing with the early morning fog that’s spilling in through an open window. \n \nHeadphones on, Zoom meeting link located, and I’m still rubbing the sleep out of my eyes as I connect to the call. But almost as soon as I begin chatting with Maya Neria, Senior Product Manager at [Andela](https://andela.com/), the inflection in her voice stirs me to life.\n \n“What our founders realized is that brilliance is evenly distributed in the world,” says Neria. “And Africa has the fastest growing market of people entering employability age.”\n\n![Screen Shot 2019-07-12 at 1.34.47 PM](//images.ctfassets.net/4ol5sgskowtw/2Y6jSlXKDXsJgc7c9k5Od9/198fc5cced9b2b4c88bf940bd35c8b55/Screen_Shot_2019-07-12_at_1.34.47_PM.png)\n \nNeria is talking to me from Nairobi, Kenya, a city nicknamed “Silicon Savannah” where she’s lived for the past two and a half years. “You have a national park that has lions in the middle of the city and you have booming skyscrapers, development everywhere,” says Neria. “There are tech hubs and co-working spaces of all shapes and sizes. You see really vibrant tech meet-ups across different technologies, anywhere from JavaScript to blockchain.” \n \nNairobi has quickly become one of Africa’s leading tech hubs, along with Lagos, Cairo, Johannesburg, and Dar es Salaam. But it’s the people rather than the geography that led Neria to leave the US and relocate to Kenya.\n \n“I don’t know how to say it in less cliché words, but the people I’ve met here are the most driven I’ve ever met,” she says. “I met a fisherman who had virtually nothing and taught himself to code on his Android phone before he found Andela and I just thought to myself, ‘This is incredible.’”  \n\n# Meet Andela\nWhile most of our tech news feeds are jammed up with stories of Facebook’s most recent privacy scandal, stories like Andela’s far too often slip under the radar. But companies that you know—Gusto, Invision, GitHub, and Skillshare among them—are already building their products using Andela software engineers. And tech giants like Microsoft have taken notice, moving into Nairobi as the global competition for software engineering talent continues to heat up faster than a Sub-Saharan morning.\n \nFounded in [Nigeria](https://www.businessinsider.com/github-ceo-nat-friedman-says-nigerian-developer-community-growing-fast-2019-6) in 2014, Andela was built around a simple idea—identify high potential software developers, invest in their training, then place them on global engineering teams where they begin to contribute and continue to grow. The company handles talent assessment, on-boarding, and continuous improvement of the software developers accepted into their program, supporting their mission of “catalyzing the growth of tech ecosystems across Africa.” The company has hired software developers in 17 African countries to date and [recently raised a $100M series D investment](https://techcrunch.com/2019/01/23/connecting-african-software-developers-with-top-tech-companies-nets-andela-100-million/). Andela’s investors include Google Ventures, Salesforce Ventures, and the Chan Zuckerberg Foundation amongst others.\n\nAspiring Andela engineers must first apply to the program, where they’re screened for basic technical skills, general aptitude, and learning velocity. The company has received over 130,000 applications to date, leading to the hire of more than 1,300 software engineers. \n \nOnce accepted into the program Andela engineers work for six months in simulated product environments similar to what they would encounter on global engineering teams. They build real products, contribute to code standups, learn agile methodology, and also have team skill sessions where they work on developing confidence, public speaking, and learn best practices associated with being a distributed team member.\n\n![AndelaNairobi](//images.ctfassets.net/4ol5sgskowtw/6IHqLD3Xad9UbzhJIqItdP/2f5c67119e616d17c25f584e46e5dd3e/AndelaNairobi.jpeg)\n \n“A lot of developers that are coming out of Andela are interested in reinvesting in Africa—they aren't being pulled out of Africa,” says Neria. “They’ve gotten broad experience in international companies, but they stayed locally the entire time so all of that money is being reinvested into the local ecosystem. They're founding startups here. They're able to mentor here, locally. And we're seeing a huge boom in the startup scene here in Nairobi.”\n\n# Searching for a partner to help assess the technical skills of a continent\nWhile Andela’s mission is an easy one to get behind, the logistics of their operation include a wide myriad of challenges. The challenges of growing tech ecosystems in the developing world aside, Andela’s success is directly tied to a challenge much more familiar to even the best funded tech companies in Silicon Valley—the company needed to find a repeatable way to identify, assess, and hire engineering talent at scale. Sorting through more than 130,000 applications for their fellowship program was only the beginning.\n \nIn the early days, Andela relied on a combination of psychometric tests and a technical assessment tool that their internal team hacked together. \n \n“The issue was the internal tool was always buggy, and it assessed knowledge way more than application of knowledge,” says Neria. “I also noticed that we didn't really have a framework for hiring that was consistent throughout our entire recruitment model, so we set out to create that framework.”\n \nThe recruitment model that Andela landed on seeks to assess developer candidates on three dimensions:\n\n1. Values alignment and cultural fit\n2. Output quality (the degree of excellence in which people are showing skills and producing work)\n3. Learning velocity and ability to incorporate feedback\n \n“I did a big industry review of over 100 tools, both for values fit, technical skills, and psychometric evaluations,” says Neria. “We looked at software like Codility, HackerRank, and GapJumpers and I was really trying to see whether or not they'd give us more than just the standard technical knowledge testing. The big thing that I was looking for was also if candidates were getting feedback.”\n\n> # What we saw with Qualified is that you guys are taking a really, really interesting approach in terms of your dedication to mimicking a real work environment. So many technical tools out there basically don't—they only test theory and algorithms.\"\n> Maya Neria, Senior Product Manager, Andela\n\n![Andela-logo-landscape-blue](//images.ctfassets.net/4ol5sgskowtw/6PuMy1TPRiRFUaDl3jveQL/926d23bf5f5b7471d70ca8da6ab781b7/Andela-logo-landscape-blue.png)\n\n\"Qualified gave us a deeper level of insight into each applicant by providing insights into things like ‘How are you applying and thinking through technical questions? And based on the curriculum that we provide, how are you applying that knowledge to answer coding challenges?’”\n \n“A lot of our developers were self-taught and so their in-depth understanding of algorithms wasn't necessarily that high—but they could still build great products, were still mathematical, and could apply the concept of an algorithm to the way that they were building products.\"\n\n> # That's what really drove us to use Qualified—it was a combination of a push to be more rigorous in the data that we collect from our applicants and Qualified's dedication to having people showcase the work that they would do in a real product environment. Your technical skills assessments are really aligned with the real work environment which we were hoping for in order to better predict on-the-job performance.”\n\n\n# Learning to find, assess, and hire software developers at scale\nWith Qualified identified as a strategic partner to help Andela assess technical output and predict on-the-job performance, Neria’s team set out to build a consistent recruitment process capable of scaling alongside Andela’s lofty ambitions. While the process continues to be refined and improved, talent acquisition and engineering leaders would be wise to borrow from Andela’s approach.\n\n\n1. __Home study materials__—All applicants are provided home study materials that cover computer science basics using either Python or Javascript.\n2. __Initial screen__—After applicants receive their home study materials, they’re asked to complete an initial screening that’s delivered via Google Forms. This first cut in their recruiting funnel is used to help sort through the sheer volume of applications that they receive, by testing an applicant’s understanding of the home study materials as well as their cultural and values fit.\n3. __Qualified assessment__—Applicants that pass the Google Forms assessment are then invited to take a Qualified assessment, which is designed to test their technical skills and ability to incorporate real world feedback. Currently about 15% of students who complete the Qualified assessment are ultimately hired. “Our goal is to continuously bump that up and make Qualified even more predictive,” says Neria. “Right now we’re assessing junior developers, and I think for them technical skills are less indicative of quality and it’s more about cognitive ability and learning. I think the predictive power of Qualified could be much higher for developers that have more experience.” \n4. __Six months of paid training__—Applicants who are accepted into the program continue to be trained for six months, during which Andela captures thousands of data points on their relative strengths and weaknesses.\n5. __Paired with a global engineering team__—After training is completed, Andela developers become a member of a global engineering team. Their skills continue to be assessed and the company invests heavily in mid-to-senior level developers that provide ongoing mentorship to junior developers.\n \nWhen I asked Neria about the benefits Andela has realized since injecting Qualified assessments into the recruiting funnel, she’s quick to cite the scalability of the process.\n \n“I think one of the things Qualified does really well is you offer the entire package of ‘How do you assess software developers at scale?’ It’s not only the technology around automated assessments and customization; it’s also the pre-loaded database of questions that you can work through that are tagged and easily searchable. The keyword here is ‘at scale’ for me. When you have 4,000 developers per month applying to your program you need a system where you can pull questions, easily change or customize assessments, and see the results over time.\" \n\n> # Our recruitment team has definitely grown less exponentially than our candidate pipeline has and a big part of that is thanks to Qualified assessments. We’ve been able to keep our overhead costs down with Qualified as a growth partner. It’s a very holistic package—I’ve seen software products that provide one piece of the puzzle, and I see Qualified as really being the full thing.”\n \n# What’s next for Andela… and Qualified\nWhile Neria’s search for a technical screening methodology that predicts on the job performance was undertaken with the recruitment process in mind, Andela has also begun experimenting with [Qualified Educate](https://www.qualified.io/for-education) to upskill their existing engineers. \n \n“For internal leveling, the platform allows us to test learners multiple times,” says Neria. “One use case we tried was testing knowledge and behavioral reinforcements by continuously testing our developers on important use cases like certain types of testing or debugging. We wanted to make sure that developers are consistently being tested throughout our training program on those things. We saw that Qualified helped with knowledge retention, which was really promising.”\n \nNeria also sees Qualified playing a significant role in benchmarking developers of different skill levels objectively—a need of increasing importance as the prevalence of remote work continues to grow.\n \n“The fact that Qualified provides so much data from their community on how developers across the globe perform on different technical questions is huge. I would say that's a really big asset for anyone looking to hire more senior talent.”\n\nAndela’s team is now nearly 2,000 strong, but their work in developing tech ecosystems across Africa is just getting started. I know it’s only a matter of time before I find myself chatting with an Andela engineer on my next early morning conference call.\n","richBody":null,"description":"Andela is working to build technology ecosystems throughout Africa—a challenge that starts with processing over 130,000 applications from aspiring software engineers. When it comes to assessing the programming ability of a continent, Andela has turned to Qualfied's developer assessment platform.","hideHero":true,"publishDate":"2019-07-18T00:00-07:00"},{"prettyDate":"Jul 10, 2019","title":"Why Some Developers Hate Coding Skills Tests (And What Hiring Managers Can Do To Change That) ","href":"https://www.qualified.io/blog/posts/why-developers-hate-coding-skills-tests","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/3emFkZ8sqDJAjBD9is9Y62/b18daddd7849ab728fdad0fb626a9eb2/YouTube-channels-to-learn-programming.jpg?w=100&q=1","length":"16 min read","excerpt":"Not all software engineers appreciate coding skills tests—and with good reason. But if wielded intelligently coding assessments actually represent an opportunity to build your employer brand, build credibility, and give candidates a flavor of the culture they'll encounter within your engineering team.\n","collection":"Hiring","slug":"why-developers-hate-coding-skills-tests","author":"Geoff Roberts","htmlContent":"<p>When I signed on to join the team at Qualified last month, I ran the company through the diligence process that I use to assess opportunities at technology start-ups. Great product? Check. Strong growth trajectory? Check. Awesome customers? Check. A team I'm excited to be a part of? Check.</p>\n<p>But beyond this list of important criteria my decision came down to a feeling that I couldn’t shake—one that my intuition told me was worth listening to above all else.</p>\n<p><strong>In 10 years of working with high growth technology start-ups, I’ve never come across a company that’s <em>too good</em> at hiring software developers. <em>Everybody</em> struggles with finding great software engineers.</strong></p>\n<p>I’ve sat in countless board meetings, leadership off-sites, and all-hands gathering where the story is largely the same—”We had 10+ open job reqs for development positions at the beginning of the year. We’ve filled three. One hire didn’t work out.” Queue the thumb-twiddling and downward glances.</p>\n<p>Expensive employee referral programs ensue. Contracted recruiters come in to help. But all the subsequent efforts aside the common denominator is clear—there’s a shortage of software engineering talent and companies need to find better ways to identify, attract, and retain developers.</p>\n<p>When I looked at the opportunity at Qualified the marketer in me saw a very real pain point and a market opportunity worth attacking; followed shortly thereafter by a lot of controversy surrounding the tools that are available to help companies assess software engineers.</p>\n<h1>The controversy surrounding coding skills tests</h1>\n<p>Any Google search or discussion with software engineers about the developer hiring process quickly surfaces a myriad of opinions on how coding skills tests are used in the recruiting process. You’ll find lengthy debates on this topic in <a href=\"https://news.ycombinator.com/item?id=11420563\">HackerNews threads</a> as well as not-so-subtle articles with titles like <a href=\"https://www.brandonsavage.net/why-coding-tests-are-a-bad-interview-technique/\">Why Coding Tests Are A Bad Interview Technique</a>.</p>\n<p>At first blush these sentiments should have deterred me from joining a company that makes a developer assessment platform, right? But I saw that the market for these products is exploding and I decided to dig in—a process that began by asking my former boss Dimitris Georgakopulous, Co-founder of <a href=\"https://www.buildium.com\">Buildium</a> and <a href=\"https://www.outseta.com\">Outseta</a>, for his take on coding skills tests.</p>\n<blockquote>\n<p>“There’s absolutely a market and need for tools like this,” Dimitris said. “You simply can’t assess and hire developers without asking them to write some actual code.”</p>\n</blockquote>\n<p>Joel Spolsky, CEO of Stack Overflow and Co-founder of Trello, provided further backing of this perspective with a simple analogy.</p>\n<blockquote>\n<p>“Would you hire a magician without asking them to show you some magic tricks? Of course not. Would you hire a caterer for your wedding without tasting their food? I doubt it. Do whatever you want during interviews, but make the candidate <em>write some code</em>,” <a href=\"https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/\">writes Spolsky</a>.</p>\n</blockquote>\n<p>Encouraged by this feedback, I turned the question on the development team at Qualified. “Why <em>do</em> so many developers dislike coding skills tests?” Their answers surprised (and built credibility with) me.</p>\n<blockquote>\n<p>“I've heard the complaint that interview tests are awful, pointless, and demeaning a lot— especially on social media,” said Phil DeJarnett, a Senior Front-End Developer at Qualified. “It's frustrating at best because it's clear that developers are looking at it from an (understandably) selfish perspective. ‘<em>I'm a good developer, why do I have to prove this to someone I don't even know</em>?’”</p>\n</blockquote>\n<p>Jake Hoffner, Qualified’s Co-founder and CTO, took it one step further.</p>\n<blockquote>\n<p>“As a senior developer I’d be hesitant to take most coding assessments if I was looking for a new job,” Hoffner says. “I feel like I’ve built products and have a professional network that should preclude me from needing to do that.”</p>\n</blockquote>\n<p>Prior to Co-founding Qualified Jake built <a href=\"https://www.codewars.com\">Codewars</a>—he’s definitely a person that I’d describe as a “developer’s developer.” But coming from a guy that’s now spending his professional life building a developer assessment platform, I was taken aback by hearing this level of empathy for the anti-coding tests sentiment.</p>\n<p>“What’s this guy doing building a developer assessment platform then?” I wondered to myself.</p>\n<p>I’ve spent the last few weeks talking to HR and engineering leaders to dig into this question in the greatest amount of depth possible. I’ve since resurfaced with strong conviction and evidence that there are companies using coding skills assessments in not only a developer friendly manner, but also in a way that directly leads to them finding and hiring the type of developers that immediately begin delivering on-the-job.</p>\n<p><strong>In fact, if wielded properly coding skills assessments can even help companies build credibility and excitement with developers throughout the hiring process. This is yet another aspect of your employer brand that can be optimized—and perhaps the one that speaks most directly to what it’s like to work on your company’s engineering team.</strong></p>\n<p>Shane Shown, a Talent Acquisition expert who has built engineering teams at companies like Facebook and Zillow, <a href=\"https://www.shaneshown.com/post/i-failed-my-effing-coding-interview\">says it best</a>.</p>\n<blockquote>\n<p>“When a candidate does run into an interview that represents real-world problems that would need to be solved in the day-to-day of the actual position it’s MIND-BLOWING. I have had candidates leave an interview with a coding assignment that they were actually excited to complete, because they felt like they would understand the company’s problem and add real value.”</p>\n</blockquote>\n<p>This post will teach you how you can move beyond the negative sentiments and turn your company’s use of coding assessments into a strategic advantage. But let’s start by reviewing some of the reasons developers dislike coding assessments in the first place.</p>\n<h1>The reasons developers often dislike coding tests (and how to change their tune)</h1>\n<p>While developers have expressed disdain for coding assessments for a wide variety of reasons, almost all of them can be overcome. These sentiments almost always come from coding skills tests being used as a blunt instrument to pre-screen developer candidates out of the recruiting funnel. Here’s how your company can intelligently apply coding assessments to flip the script and turn hiring developers into a competitive advantage.</p>\n<h2>Most coding assessments test only algorithmic skills</h2>\n<p>The most common—and credible—reason that coding skills tests get a bad rap is that the vast majority of assessments test algorithmic skills rather than actual programming ability. The tests represent a computer science problem that has little to do with assessing an engineer’s ability to deliver the work they’d actually find themselves doing on a day-to-day basis.</p>\n<p>Glen McCallum, a Senior Software Engineer at INscribe Digital, draws a wonderful analogy between coding and music in his article <a href=\"https://glenmccallum.com/2019/06/25/why-code-challenges-are-bad-practice-for-hiring-senior-developers/\">Why Code Challenges Are Bad Practice For Hiring Senior Developers</a> published just last week. Testing algorithmic skills is a technical exercise akin to learning to play scales in music. While playing scales is important when you’re learning music, it has almost nothing to do with working as a jazz musician.</p>\n<blockquote>\n<p>“This week I was working on a Hackerrank problem for fun,” writes McCallum. “I had to pull out my old text book for data structures and algorithms in order to code up a merge sort from scratch. I felt inadequate, sent a tweet, and then a light bulb turned on in my head.”</p>\n</blockquote>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/2DGqOzlh8pFm4lGxBYLKlK/522838e5f9e55a7c3b6f3e9953d8ddbe/Screen_Shot_2019-07-01_at_10.36.15_AM.png\" alt=\"Screen Shot 2019-07-01 at 10.36.15 AM\"></p>\n<blockquote>\n<p>“We all studied these algorithms in undergraduate computer science classes. But as you gain a lot of professional experience you learn how and when to apply them, then you refresh your memory as needed. I knew exactly what merge sort was for and I knew exactly where to find the reference algorithm. I just didn’t have the details in my head at that moment.”</p>\n</blockquote>\n<p>McCallum continues building his point by returning to his music analogy.</p>\n<blockquote>\n<p>“Does it make you a better professional musician if you can play all scales perfectly at any time? Absolutely not! In fact I’d argue that you’re wasting precious practice time. How silly would it be if you asked a professional musician with a history of outstanding performances to sit down at an audition and play a scale? It’s insulting. Then dismiss them before they even perform because they didn’t do the scale perfectly. The thought makes me sick to my stomach. But in 2019 it happens every day to senior developers applying for jobs.”</p>\n</blockquote>\n<p>Luckily, there are developers out there who have been heavily involved in the hiring process that also understand the objectives of their friends in HR and the importance of pre-screening candidates.</p>\n<blockquote>\n<p>“There's enough programmers in the world who aren't really skilled enough for the job (whatever that job may be) that it becomes necessary to offer some kind of litmus test that a potential job-seeker must pass,” <a href=\"https://www.infoworld.com/article/2611398/why-i-hate-programming-tests.html\">writes Ted Neward</a>, a Guest Lecturer on development at the University of Washington’s iSchool. “I get that and it's not like all the programming tests in the world are created equal. But the ones where the challenge is to implement some algorithmic doodad or other? <em>Shudder</em>.”</p>\n</blockquote>\n<p><strong>How to address the “coding assessments test only algorithmic skills” challenge</strong>\nMost coding assessments are built as generic STDIN/STDOUT tests. Instead of leveraging these tools, look for coding assessments based on unit tests—developers write unit tests on a daily basis. Also look for assessments that use language specific frameworks—preferably the same languages that candidates would be writing code in if hired at your company. Testing for the nuances of each specific language helps to better surface candidates who will deliver clean code on-the-job.</p>\n<h2>Coding skills tests are time consuming</h2>\n<p>Another reason that coding skills assessments are often bad mouthed is simply because they can be time consuming to complete.</p>\n<blockquote>\n<p>“My biggest pet peeve with these types of tests is this: there are a lot of companies out there, and I’m sending out resumes to each one that I can find,” <a href=\"https://www.brandonsavage.net/why-coding-tests-are-a-bad-interview-technique/\">says Brandon Savage</a>, Owner at Tailwinds. “I simply do not have the time to write fifteen code samples a day, just because you want to evaluate me against your coding test. Period.”</p>\n</blockquote>\n<p><strong>How to address the “coding tests are too time consuming” challenge</strong>\nWhile Savage has a point, this objection is far easier to overcome. From the perspective of the hiring company, all it takes is a little self-awareness and empathy for the applicant—make it a point to be mindful and respectful of each applicants’ time.</p>\n<p>I asked Jake Hoffner, Qualified’s CTO, what he’d recommend with this challenge in mind. His answer was simple—for a first cut at a technical screening exercise, share an assessment that should take no longer than an hour to complete and ideally only 20-30 minutes. For a final stage technical assessment, limit the time commitment of the candidate to two hours.</p>\n<p>“Even if they don’t complete the assessment in two hours ask them to stop at that point,” says Hoffner. “You’ll learn a lot from what they were able to accomplish in two hours, and you’ll learn even more from talking to them about where they’re at two hours in and what they’d do next anyways.”</p>\n<p>From the perspective of the applicant, I’d also push back on Savage’s sentiment—if you find yourself needing to write 15 code samples, you need to reassess your job search strategy. This is indicative of a spray-and-pray strategy where you’re firing off a large volume of resumes (and are subsequently asked to take a high number of coding tests).</p>\n<p>Regardless of the position you’re applying for, <a href=\"https://www.themuse.com/advice/how-to-apply-for-fewer-jobs-but-land-more-interviews\">focus instead on applying for a smaller number of positions</a> that you’re most interested in. This way you can devote significantly more time to each, which almost always yields a higher number of job offers.</p>\n<h2>Coding tests don’t reflect the real world programming experience</h2>\n<p>The focus on algorithmic skills aside, software engineers often cite that coding tests don’t reflect the actual experience of writing code as you would on-the-job. For example, many coding tests require developers to build something from scratch.</p>\n<p>While starting from a blank slate is easy, it’s rare that developers would do this very often once hired—more often than not the real world, on-the-job experience would instead dictate that you familiarize yourself with an existing code base and learn to contribute to it effectively.</p>\n<p><strong>How to address the “coding tests don’t reflect actual programming” challenge</strong>\nThere are countless generic coding tests out there because they are easy to create. Instead, look for coding assessment tools that give you access to a database of pre-built assessments in a wide variety of languages, scopes, and challenge types that are as similar to your own code base as possible.</p>\n<p>If you’re hiring for more senior roles, look for a coding assessment platform that allows you to create and administer your own custom, multi-file assessments that directly reflect the process of contributing to your actual code base.</p>\n<h2>Coding assessments take developers out of their comfort zone</h2>\n<p>Developers often question the validity of coding skills tests because they’re asked to perform in an environment that’s not familiar to them. Understandably, they feel like they’re not able to put their best foot forward.</p>\n<p>This complaint is also very legitimate—imagine asking Tiger Woods to play the Masters with somebody else’s golf clubs or asking a violinist to audition by playing the cello. Most developers have an IDE (integrated development environment) that’s been highly customized for their own personal tastes and preferences in a way that’s comfortable, familiar, and allows them to write code as efficiently as possible. How could they possibly perform their best when they’re thrown into an unfamiliar environment that they wouldn’t actually use if hired anyways?</p>\n<p>On top of that many coding assessments are either timed or ask developers to perform on-the-spot while others look on—again contrived circumstances that add to a developer’s anxiety.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/swIXoUkcQ2uJWN5eohwQR/5ada876ccd81c63cbb8395a8161775ab/Editor-Styles.png\" alt=\"Editor-Styles\"></p>\n<p><strong>How to address the “coding tests take developers out of their comfort zone” challenge</strong>\nThis one is simple to address—let developers operate within the confines of their comfort zone. Doing so will help you get the best read possible on how they’ll actually contribute on-the-job.</p>\n<p>Look for coding assessment tools that allow developers to customize their IDE, or better yet <a href=\"https://www.qualified.io/blog/posts/developers-can-now-complete-qualified-assessments-in-their-own-ide\">use their own IDE altogether when completing coding assessments</a>. If you do time restrict assessments, allow developers to work independently then use code playbook tools and pair programming sessions to discuss and expand upon the work they’ve already completed. This will give you a deeper level of insight into their thought process and problem solving ability.</p>\n<h2>Senior developers shouldn’t need to prove themselves</h2>\n<p>Senior developers are sometimes unwilling to complete coding assessments simply because they feel like they shouldn’t need to prove themselves—they’ve been working for years and have countless products and code samples they can instead highlight to showcase their abilities. You wouldn’t try to sign Lebron James by bringing him in for a workout and asking him shoot free throws for the first hour.</p>\n<p>While there’s validity to this point—particularly with the very best engineers—there’s also at least some degree of ego at play here. As someone who has hired a large number of marketers and designers, when I’m confronted with someone who is not willing to deliver a reasonably scoped test project what I’m essentially hearing is, “<em>I have an ego and I don’t want this job that badly</em>.”</p>\n<p>I can tell you with certainty that there’s a lot more risk with a marketer delivering a 90-day growth plan during the interview process than there is with an engineer completing a coding assessment. You’re being asked to share your own, original thinking and there’s nothing to keep the company from taking your own ideas and running with them on their own. There’s inherent risk there and you are being asked to provide value up front.</p>\n<p>But if you are unwilling to do this, what does it say to the company that’s looking to hire you? And if you really check your ego at the door and take a look at this from the perspective of the employer, it’s really not too much to ask. For development jobs the employer is likely committing to paying you well over $100,000, to contributing to your 401k, to bringing on a person that they hope will contribute to their product for a long time to come. The employer is almost always taking on more risk than the applicant—particularly in smaller companies.</p>\n<p><strong>How to address the “I shouldn’t need to prove myself” challenge</strong>\nMake sure that whatever you are asking of senior developers to do, it’s actually providing some insight on how they’d contribute on-the-job—don’t make them jump through hoops for the sake of jumping through hoops!</p>\n<p>If they’re truly a high quality, senior developer you can spend less time assessing their actual programming ability and more time probing on what they’re like to work with and how well they incorporate feedback. Create custom, detailed coding assessments to provide a common structure against which to evaluate senior developers, but purposely limit the amount of time they actually spend on assessments.</p>\n<p>Instead use pair programming sessions or code playback to discuss with senior developers some of the architecture decisions they made or how they might expand a feature further. Rather than using coding problems in isolation, use the assessment as a starting point for a much deeper discussion that gives you insight into how candidates think and what it it would be like to work with them.</p>\n<h2>Automated scoring of code can lead to false rejections</h2>\n<p>Finally, there’s often skepticism or worry about coding skills tests because automated scoring of code can lead to false negatives—applicants getting rejected that shouldn’t necessarily be. Fair enough—for any coding problem there’s almost never a single “right” answer.</p>\n<p>Consider the great works of literature; if assessed against the strict rules of grammar, almost all of them would fail an automated test. James Joyce’s <em>Ulysses</em>, considered one of the great works of English literature, is filled with fragmented sentences, slang, and words that are made up altogether. Joyce himself would fail to get hired at even the local newspaper if they were using an automated language assessment.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/73zavZIbFzWzSSdSsPjwqS/5541cccef547ab4747ee2d2a58a04b71/Screen_Shot_2019-07-05_at_10.57.55_AM.png\" alt=\"Screen Shot 2019-07-05 at 10.57.55 AM\"></p>\n<p><strong>How to address the “fear of false rejections” challenge</strong>\nAutomated assessments are a prerequisite for hiring developers at any sort of scale and save a company’s internal employees from spending a massive amount of time reviewing code submissions—any developer worth their salt will understand and appreciate this.</p>\n<p>What you can do is look for automated assessments that have been informed, validated, and approved by thousands of other developers already through communities like <a href=\"https://www.codewars.com\">Codewars</a> (which forms the basis for all of Qualified’s assessments). Also look to use a developer assessment platform that provides a full suite of feedback tools beyond automated scoring of assessments—look for pair programming functionality, code playback, and tools to manually provide and capture feedback on specific segments of code.</p>\n<h1>Conclusion</h1>\n<p>Developers have voiced many hang-ups with coding skills tests, and many of their criticisms are well founded. But by leveraging the latest technologies in tandem with developer friendly hiring practices, companies can turn their use developer assessment tools into a competitive advantage.</p>\n<p>Your company’s use of coding skills assessments represents a very real opportunity to build your employer brand, give candidates a strong initial impression of your engineering team’s culture, and create a hiring process that developers talk about glowingly (and share with their friends).</p>\n<blockquote>\n<p>“How a company interviews people is a direct correlation with the quality of talent they attract,” says Shane Shown.</p>\n</blockquote>\n<p>What does your developer assessment process say about your company?</p>\n","tags":null,"body":"When I signed on to join the team at Qualified last month, I ran the company through the diligence process that I use to assess opportunities at technology start-ups. Great product? Check. Strong growth trajectory? Check. Awesome customers? Check. A team I'm excited to be a part of? Check.\n\nBut beyond this list of important criteria my decision came down to a feeling that I couldn’t shake—one that my intuition told me was worth listening to above all else.\n\n__In 10 years of working with high growth technology start-ups, I’ve never come across a company that’s *too good* at hiring software developers. *Everybody* struggles with finding great software engineers.__\n\nI’ve sat in countless board meetings, leadership off-sites, and all-hands gathering where the story is largely the same—”We had 10+ open job reqs for development positions at the beginning of the year. We’ve filled three. One hire didn’t work out.” Queue the thumb-twiddling and downward glances.\n\nExpensive employee referral programs ensue. Contracted recruiters come in to help. But all the subsequent efforts aside the common denominator is clear—there’s a shortage of software engineering talent and companies need to find better ways to identify, attract, and retain developers. \n\nWhen I looked at the opportunity at Qualified the marketer in me saw a very real pain point and a market opportunity worth attacking; followed shortly thereafter by a lot of controversy surrounding the tools that are available to help companies assess software engineers.\n\n# The controversy surrounding coding skills tests  \nAny Google search or discussion with software engineers about the developer hiring process quickly surfaces a myriad of opinions on how coding skills tests are used in the recruiting process. You’ll find lengthy debates on this topic in [HackerNews threads](https://news.ycombinator.com/item?id=11420563) as well as not-so-subtle articles with titles like [Why Coding Tests Are A Bad Interview Technique](https://www.brandonsavage.net/why-coding-tests-are-a-bad-interview-technique/). \n\nAt first blush these sentiments should have deterred me from joining a company that makes a developer assessment platform, right? But I saw that the market for these products is exploding and I decided to dig in—a process that began by asking my former boss Dimitris Georgakopulous, Co-founder of [Buildium](https://www.buildium.com) and [Outseta](https://www.outseta.com), for his take on coding skills tests.\n\n> “There’s absolutely a market and need for tools like this,” Dimitris said. “You simply can’t assess and hire developers without asking them to write some actual code.”\n\nJoel Spolsky, CEO of Stack Overflow and Co-founder of Trello, provided further backing of this perspective with a simple analogy.\n\n> “Would you hire a magician without asking them to show you some magic tricks? Of course not. Would you hire a caterer for your wedding without tasting their food? I doubt it. Do whatever you want during interviews, but make the candidate *write some code*,” [writes Spolsky](https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/).\n\nEncouraged by this feedback, I turned the question on the development team at Qualified. “Why *do* so many developers dislike coding skills tests?” Their answers surprised (and built credibility with) me.\n\n> “I've heard the complaint that interview tests are awful, pointless, and demeaning a lot— especially on social media,” said Phil DeJarnett, a Senior Front-End Developer at Qualified. “It's frustrating at best because it's clear that developers are looking at it from an (understandably) selfish perspective. ‘*I'm a good developer, why do I have to prove this to someone I don't even know*?’”\n\nJake Hoffner, Qualified’s Co-founder and CTO, took it one step further.\n\n> “As a senior developer I’d be hesitant to take most coding assessments if I was looking for a new job,” Hoffner says. “I feel like I’ve built products and have a professional network that should preclude me from needing to do that.” \n\nPrior to Co-founding Qualified Jake built [Codewars](https://www.codewars.com)—he’s definitely a person that I’d describe as a “developer’s developer.” But coming from a guy that’s now spending his professional life building a developer assessment platform, I was taken aback by hearing this level of empathy for the anti-coding tests sentiment.\n\n“What’s this guy doing building a developer assessment platform then?” I wondered to myself. \n\nI’ve spent the last few weeks talking to HR and engineering leaders to dig into this question in the greatest amount of depth possible. I’ve since resurfaced with strong conviction and evidence that there are companies using coding skills assessments in not only a developer friendly manner, but also in a way that directly leads to them finding and hiring the type of developers that immediately begin delivering on-the-job. \n\n__In fact, if wielded properly coding skills assessments can even help companies build credibility and excitement with developers throughout the hiring process. This is yet another aspect of your employer brand that can be optimized—and perhaps the one that speaks most directly to what it’s like to work on your company’s engineering team.__\n\nShane Shown, a Talent Acquisition expert who has built engineering teams at companies like Facebook and Zillow, [says it best](https://www.shaneshown.com/post/i-failed-my-effing-coding-interview). \n\n> “When a candidate does run into an interview that represents real-world problems that would need to be solved in the day-to-day of the actual position it’s MIND-BLOWING. I have had candidates leave an interview with a coding assignment that they were actually excited to complete, because they felt like they would understand the company’s problem and add real value.”\n\nThis post will teach you how you can move beyond the negative sentiments and turn your company’s use of coding assessments into a strategic advantage. But let’s start by reviewing some of the reasons developers dislike coding assessments in the first place.\n\n# The reasons developers often dislike coding tests (and how to change their tune)\nWhile developers have expressed disdain for coding assessments for a wide variety of reasons, almost all of them can be overcome. These sentiments almost always come from coding skills tests being used as a blunt instrument to pre-screen developer candidates out of the recruiting funnel. Here’s how your company can intelligently apply coding assessments to flip the script and turn hiring developers into a competitive advantage.\n\n## Most coding assessments test only algorithmic skills\nThe most common—and credible—reason that coding skills tests get a bad rap is that the vast majority of assessments test algorithmic skills rather than actual programming ability. The tests represent a computer science problem that has little to do with assessing an engineer’s ability to deliver the work they’d actually find themselves doing on a day-to-day basis. \n\nGlen McCallum, a Senior Software Engineer at INscribe Digital, draws a wonderful analogy between coding and music in his article [Why Code Challenges Are Bad Practice For Hiring Senior Developers](https://glenmccallum.com/2019/06/25/why-code-challenges-are-bad-practice-for-hiring-senior-developers/) published just last week. Testing algorithmic skills is a technical exercise akin to learning to play scales in music. While playing scales is important when you’re learning music, it has almost nothing to do with working as a jazz musician.\n\n> “This week I was working on a Hackerrank problem for fun,” writes McCallum. “I had to pull out my old text book for data structures and algorithms in order to code up a merge sort from scratch. I felt inadequate, sent a tweet, and then a light bulb turned on in my head.”\n\n![Screen Shot 2019-07-01 at 10.36.15 AM](//images.ctfassets.net/4ol5sgskowtw/2DGqOzlh8pFm4lGxBYLKlK/522838e5f9e55a7c3b6f3e9953d8ddbe/Screen_Shot_2019-07-01_at_10.36.15_AM.png)\n\n> “We all studied these algorithms in undergraduate computer science classes. But as you gain a lot of professional experience you learn how and when to apply them, then you refresh your memory as needed. I knew exactly what merge sort was for and I knew exactly where to find the reference algorithm. I just didn’t have the details in my head at that moment.”\n\nMcCallum continues building his point by returning to his music analogy. \n\n> “Does it make you a better professional musician if you can play all scales perfectly at any time? Absolutely not! In fact I’d argue that you’re wasting precious practice time. How silly would it be if you asked a professional musician with a history of outstanding performances to sit down at an audition and play a scale? It’s insulting. Then dismiss them before they even perform because they didn’t do the scale perfectly. The thought makes me sick to my stomach. But in 2019 it happens every day to senior developers applying for jobs.”\n\nLuckily, there are developers out there who have been heavily involved in the hiring process that also understand the objectives of their friends in HR and the importance of pre-screening candidates.\n\n> “There's enough programmers in the world who aren't really skilled enough for the job (whatever that job may be) that it becomes necessary to offer some kind of litmus test that a potential job-seeker must pass,” [writes Ted Neward](https://www.infoworld.com/article/2611398/why-i-hate-programming-tests.html), a Guest Lecturer on development at the University of Washington’s iSchool. “I get that and it's not like all the programming tests in the world are created equal. But the ones where the challenge is to implement some algorithmic doodad or other? *Shudder*.”\n\n__How to address the “coding assessments test only algorithmic skills” challenge__\nMost coding assessments are built as generic STDIN/STDOUT tests. Instead of leveraging these tools, look for coding assessments based on unit tests—developers write unit tests on a daily basis. Also look for assessments that use language specific frameworks—preferably the same languages that candidates would be writing code in if hired at your company. Testing for the nuances of each specific language helps to better surface candidates who will deliver clean code on-the-job. \n\n## Coding skills tests are time consuming\nAnother reason that coding skills assessments are often bad mouthed is simply because they can be time consuming to complete. \n\n> “My biggest pet peeve with these types of tests is this: there are a lot of companies out there, and I’m sending out resumes to each one that I can find,” [says Brandon Savage](https://www.brandonsavage.net/why-coding-tests-are-a-bad-interview-technique/), Owner at Tailwinds. “I simply do not have the time to write fifteen code samples a day, just because you want to evaluate me against your coding test. Period.”\n\n__How to address the “coding tests are too time consuming” challenge__\nWhile Savage has a point, this objection is far easier to overcome. From the perspective of the hiring company, all it takes is a little self-awareness and empathy for the applicant—make it a point to be mindful and respectful of each applicants’ time.\n\nI asked Jake Hoffner, Qualified’s CTO, what he’d recommend with this challenge in mind. His answer was simple—for a first cut at a technical screening exercise, share an assessment that should take no longer than an hour to complete and ideally only 20-30 minutes. For a final stage technical assessment, limit the time commitment of the candidate to two hours.\n\n“Even if they don’t complete the assessment in two hours ask them to stop at that point,” says Hoffner. “You’ll learn a lot from what they were able to accomplish in two hours, and you’ll learn even more from talking to them about where they’re at two hours in and what they’d do next anyways.”\n\nFrom the perspective of the applicant, I’d also push back on Savage’s sentiment—if you find yourself needing to write 15 code samples, you need to reassess your job search strategy. This is indicative of a spray-and-pray strategy where you’re firing off a large volume of resumes (and are subsequently asked to take a high number of coding tests). \n\nRegardless of the position you’re applying for, [focus instead on applying for a smaller number of positions](https://www.themuse.com/advice/how-to-apply-for-fewer-jobs-but-land-more-interviews) that you’re most interested in. This way you can devote significantly more time to each, which almost always yields a higher number of job offers.\n\n## Coding tests don’t reflect the real world programming experience\nThe focus on algorithmic skills aside, software engineers often cite that coding tests don’t reflect the actual experience of writing code as you would on-the-job. For example, many coding tests require developers to build something from scratch. \n\nWhile starting from a blank slate is easy, it’s rare that developers would do this very often once hired—more often than not the real world, on-the-job experience would instead dictate that you familiarize yourself with an existing code base and learn to contribute to it effectively. \n\n__How to address the “coding tests don’t reflect actual programming” challenge__ \nThere are countless generic coding tests out there because they are easy to create. Instead, look for coding assessment tools that give you access to a database of pre-built assessments in a wide variety of languages, scopes, and challenge types that are as similar to your own code base as possible. \n\nIf you’re hiring for more senior roles, look for a coding assessment platform that allows you to create and administer your own custom, multi-file assessments that directly reflect the process of contributing to your actual code base.\n\n## Coding assessments take developers out of their comfort zone\nDevelopers often question the validity of coding skills tests because they’re asked to perform in an environment that’s not familiar to them. Understandably, they feel like they’re not able to put their best foot forward.\n\nThis complaint is also very legitimate—imagine asking Tiger Woods to play the Masters with somebody else’s golf clubs or asking a violinist to audition by playing the cello. Most developers have an IDE (integrated development environment) that’s been highly customized for their own personal tastes and preferences in a way that’s comfortable, familiar, and allows them to write code as efficiently as possible. How could they possibly perform their best when they’re thrown into an unfamiliar environment that they wouldn’t actually use if hired anyways?\n\nOn top of that many coding assessments are either timed or ask developers to perform on-the-spot while others look on—again contrived circumstances that add to a developer’s anxiety.\n\n![Editor-Styles](//images.ctfassets.net/4ol5sgskowtw/swIXoUkcQ2uJWN5eohwQR/5ada876ccd81c63cbb8395a8161775ab/Editor-Styles.png)\n\n__How to address the “coding tests take developers out of their comfort zone” challenge__\nThis one is simple to address—let developers operate within the confines of their comfort zone. Doing so will help you get the best read possible on how they’ll actually contribute on-the-job.\n\nLook for coding assessment tools that allow developers to customize their IDE, or better yet [use their own IDE altogether when completing coding assessments](https://www.qualified.io/blog/posts/developers-can-now-complete-qualified-assessments-in-their-own-ide). If you do time restrict assessments, allow developers to work independently then use code playbook tools and pair programming sessions to discuss and expand upon the work they’ve already completed. This will give you a deeper level of insight into their thought process and problem solving ability.\n\n## Senior developers shouldn’t need to prove themselves\nSenior developers are sometimes unwilling to complete coding assessments simply because they feel like they shouldn’t need to prove themselves—they’ve been working for years and have countless products and code samples they can instead highlight to showcase their abilities. You wouldn’t try to sign Lebron James by bringing him in for a workout and asking him shoot free throws for the first hour.\n\nWhile there’s validity to this point—particularly with the very best engineers—there’s also at least some degree of ego at play here. As someone who has hired a large number of marketers and designers, when I’m confronted with someone who is not willing to deliver a reasonably scoped test project what I’m essentially hearing is, “*I have an ego and I don’t want this job that badly*.” \n\nI can tell you with certainty that there’s a lot more risk with a marketer delivering a 90-day growth plan during the interview process than there is with an engineer completing a coding assessment. You’re being asked to share your own, original thinking and there’s nothing to keep the company from taking your own ideas and running with them on their own. There’s inherent risk there and you are being asked to provide value up front. \n\nBut if you are unwilling to do this, what does it say to the company that’s looking to hire you? And if you really check your ego at the door and take a look at this from the perspective of the employer, it’s really not too much to ask. For development jobs the employer is likely committing to paying you well over $100,000, to contributing to your 401k, to bringing on a person that they hope will contribute to their product for a long time to come. The employer is almost always taking on more risk than the applicant—particularly in smaller companies. \n\n__How to address the “I shouldn’t need to prove myself” challenge__\nMake sure that whatever you are asking of senior developers to do, it’s actually providing some insight on how they’d contribute on-the-job—don’t make them jump through hoops for the sake of jumping through hoops! \n\nIf they’re truly a high quality, senior developer you can spend less time assessing their actual programming ability and more time probing on what they’re like to work with and how well they incorporate feedback. Create custom, detailed coding assessments to provide a common structure against which to evaluate senior developers, but purposely limit the amount of time they actually spend on assessments. \n\nInstead use pair programming sessions or code playback to discuss with senior developers some of the architecture decisions they made or how they might expand a feature further. Rather than using coding problems in isolation, use the assessment as a starting point for a much deeper discussion that gives you insight into how candidates think and what it it would be like to work with them.  \n\n## Automated scoring of code can lead to false rejections\nFinally, there’s often skepticism or worry about coding skills tests because automated scoring of code can lead to false negatives—applicants getting rejected that shouldn’t necessarily be. Fair enough—for any coding problem there’s almost never a single “right” answer. \n\nConsider the great works of literature; if assessed against the strict rules of grammar, almost all of them would fail an automated test. James Joyce’s *Ulysses*, considered one of the great works of English literature, is filled with fragmented sentences, slang, and words that are made up altogether. Joyce himself would fail to get hired at even the local newspaper if they were using an automated language assessment.\n\n![Screen Shot 2019-07-05 at 10.57.55 AM](//images.ctfassets.net/4ol5sgskowtw/73zavZIbFzWzSSdSsPjwqS/5541cccef547ab4747ee2d2a58a04b71/Screen_Shot_2019-07-05_at_10.57.55_AM.png)\n\n__How to address the “fear of false rejections” challenge__\nAutomated assessments are a prerequisite for hiring developers at any sort of scale and save a company’s internal employees from spending a massive amount of time reviewing code submissions—any developer worth their salt will understand and appreciate this. \n\nWhat you can do is look for automated assessments that have been informed, validated, and approved by thousands of other developers already through communities like [Codewars](https://www.codewars.com) (which forms the basis for all of Qualified’s assessments). Also look to use a developer assessment platform that provides a full suite of feedback tools beyond automated scoring of assessments—look for pair programming functionality, code playback, and tools to manually provide and capture feedback on specific segments of code. \n\n# Conclusion\nDevelopers have voiced many hang-ups with coding skills tests, and many of their criticisms are well founded. But by leveraging the latest technologies in tandem with developer friendly hiring practices, companies can turn their use developer assessment tools into a competitive advantage. \n\nYour company’s use of coding skills assessments represents a very real opportunity to build your employer brand, give candidates a strong initial impression of your engineering team’s culture, and create a hiring process that developers talk about glowingly (and share with their friends).    \n\n> “How a company interviews people is a direct correlation with the quality of talent they attract,” says Shane Shown. \n\nWhat does your developer assessment process say about your company?\n","richBody":null,"description":"Not all software engineers appreciate coding skills tests—and with good reason. But if wielded intelligently coding assessments actually represent an opportunity to build your employer brand, build credibility, and give candidates a flavor of the culture they'll encounter within your engineering team.","hideHero":true,"publishDate":"2019-07-10T00:00-07:00"},{"prettyDate":"May 1, 2019","title":"The Key to Becoming a Great Software Developer","href":"https://www.qualified.io/blog/posts/the-key-to-becoming-a-great-software-developer","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/5MWXAPljEjrAUpXe7UNJOx/9eec6908ae85a2b137f896f61daa9eb4/1_S7qjcICmURmeRDpVNzkFaw.jpeg?w=100&q=1","length":"6 min read","excerpt":"Progressing through the skills needed in software development can be grueling. Use this profoundly simple insight to level up your skills.\n","collection":"Software Engineering","slug":"the-key-to-becoming-a-great-software-developer","author":"Phil DeJarnett","htmlContent":"<p>If you are new to software development, whether starting as a professional or even just learning as a student, you probably find the culture intimidating. The range of skills required to become a “great” developer is vast, with low-level skills that range from a solid sense of mathematics to high-level skills like user-interface design.</p>\n<p>It can be overwhelming trying to balance learning all these skills, especially while trying to keep up with the constantly evolving software industry. What can you do to improve your abilities, to get from where you are to where you want to be?</p>\n<p>In my 20 years of professional experience, reading books and articles and watching videos is not the important step. The most important thing is…</p>\n<h1>Practice!</h1>\n<p>If you are learning how to play an instrument, it’s no question for most people that you can’t get anywhere until you pick up the instrument and try to play it. And it’s not just once in awhile, either. Instrument practice is something most musicians do every day. Even if they are professionals.</p>\n<p>Learning theory and exploring new ideas is, obviously, essential to improving yourself in any discipline. The most important step, though, is turning those concepts into engrained knowledge and muscle memory. In this way, programming is a lot like learning an instrument.</p>\n<p>Until you burn in those core concepts — and you will need to continue to learn these throughout your career — you will struggle with the basic components of programming, for example:</p>\n<ol>\n<li>How to approach a problem</li>\n<li>How to break it down</li>\n<li>How to test and find bugs</li>\n<li>How to quickly narrow down the likely source of a bug</li>\n<li>How to improve performance and maintainability.</li>\n<li>How Do You Practice to be a great Developer?</li>\n</ol>\n<p>On the surface, this seems like a dumb question, but it really isn’t! Practicing an instrument diverges from programming, because you can pick up a piece of music and play that same piece over-and-over until you get better. Programming doesn’t work quite the same way, because once you’ve solved a problem, you can, at best, iterate on that solution to improve it.</p>\n<p>That’s an important step, but to really expand your knowledge, you need to regularly find new challenges.</p>\n<h1>Find Your Own Projects</h1>\n<p>The best way to learn is to find a problem you want to solve, and try to solve it yourself. Maybe you want to automate something, or calculate some value regularly.</p>\n<p>Basically keep your eyes open in your own life for things that you would like to work better, or try to improve on something you already use. Then try to research and see if you can solve it. Don’t get caught up in finding a “perfect” solution, rather see how close you can get in a short amount of time.</p>\n<p>These little exercises will keep your mind fresh and have the benefit of having no fixed goal, so you can have fun with them.</p>\n<h2>Open Source</h2>\n<p>A common recommendation is to look for Open Source projects you can help on. I definitely recommend digging into the FOSS culture, as it will expose you to a wide and varied set of skills and viewpoints.</p>\n<p>Unlike a lot of programmers, I don’t think this works perfectly for someone starting out, simply because jumping into even a small OSS project is overwhelming, as there’s a ton of basic concepts that you are expected to already understand, like code style, language tricks and concepts, and more.</p>\n<h2>Competitive Programming Sites</h2>\n<p>My favorite site for daily programming challenges is Codewars. (Disclaimer: I liked it so much, I now work for them.) Codewars is great for honing your developer skills, as it provides new content all the time, in a wide variety of languages, so you can make sure you flex that programming muscle whenever you get the urge.</p>\n<h2>Make Mistakes Every Day</h2>\n<p>I think this is the most important step, and the most important skill to learn. You need to make mistakes every day. Every time you practice, practice until you make a mistake. Learn from that mistake.</p>\n<p>If you try a new problem and solve it easily, you probably aren’t learning anything new. That is more like reciting a previously learned skill. When you come across a problem you can solve in your head, find a new way to solve that same problem. <strong>Don’t even worry if it’s not the best way</strong>, just expand your skills with new ideas.</p>\n<h1>Great Practice Tips</h1>\n<p>To really accelerate your education, follow these tips:</p>\n<h2>Break Your Code</h2>\n<p>A common mistake very early programmers make is to write it, then only run it once or against the most simple scenario. A great way to deepen your abilities is to purposefully try to break your own code.</p>\n<p>Find unexpected ways to run your code, test on different machines, disable the internet, etc. Ask yourself:</p>\n<ul>\n<li>Does it still work, or does it just crash? (If it crashes, see the next section.)</li>\n<li>If it runs, does it report errors?</li>\n<li>Can you find a way to handle those errors without stopping the program? As an example, if it fails due to the internet being down, maybe you could try the request again later, and only stop if several requests fail.</li>\n</ul>\n<h2>Learn How to Debug</h2>\n<p>This is a deeper topic than can easily be covered here, but every language has some way of debugging. This is another reason why you should make mistakes every day: you want a reason to dive down under the surface of your code and understand what’s happening at a deeper level.</p>\n<p>Most debugging will let you step through your program — jumping deeper into the lower layers and learning what really happens when you call a method, or set a value, or make a network request.</p>\n<p>The goal with debugging — from a learning standpoint — is to build up that muscle memory about how the parts of a program are glued together. The deeper this knowledge, the easier it will be to predict, find, and fix bugs in the future.</p>\n<h2>Don’t Ask Questions…</h2>\n<p>…at least not immediately. Instead, try anything and everything you can think of. This is more important the less comfortable you are with a concept or language.</p>\n<p>When you can’t think of anything on your own, search! The Internet is overflowing with help for learning programmers. Find answers and try them out, but don’t just copy-and-paste and move on. Modify those answers, see if you can understand why they work, adopt them to your code.</p>\n<h2>…But Always Seek Advice</h2>\n<p>When you have tried everything, and preferably after you have a working solution, now is the best time to seek advice. Look to peers and senior developers to review your code.</p>\n<p>Take that advice, apply it and use it in the future. Rewrite what you already did with those suggestions in mind. Ask yourself</p>\n<p>Did they help improve the code? If so, how?\nDid they make it more readable? How can you apply that in the future?\nDid they improve performance? What assumptions did the old code make that were less performant?\nCan you expand on that suggestion? Maybe you can apply the changes in similar ways to other parts of your code.</p>\n<h1>Now, Start Practicing!</h1>\n<p>Now that you have some ideas, get out there and start practicing! The longer you wait, the longer before you’ll feel confident enough to take the next steps in your developer career.</p>\n<p>There’s no time like right now to begin turning that surface knowledge into long-term, deeper skills.</p>\n","tags":null,"body":"If you are new to software development, whether starting as a professional or even just learning as a student, you probably find the culture intimidating. The range of skills required to become a “great” developer is vast, with low-level skills that range from a solid sense of mathematics to high-level skills like user-interface design.\n\nIt can be overwhelming trying to balance learning all these skills, especially while trying to keep up with the constantly evolving software industry. What can you do to improve your abilities, to get from where you are to where you want to be?\n\nIn my 20 years of professional experience, reading books and articles and watching videos is not the important step. The most important thing is…\n\n# Practice!\nIf you are learning how to play an instrument, it’s no question for most people that you can’t get anywhere until you pick up the instrument and try to play it. And it’s not just once in awhile, either. Instrument practice is something most musicians do every day. Even if they are professionals.\n\nLearning theory and exploring new ideas is, obviously, essential to improving yourself in any discipline. The most important step, though, is turning those concepts into engrained knowledge and muscle memory. In this way, programming is a lot like learning an instrument.\n\nUntil you burn in those core concepts — and you will need to continue to learn these throughout your career — you will struggle with the basic components of programming, for example:\n\n1. How to approach a problem\n1. How to break it down\n1. How to test and find bugs\n1. How to quickly narrow down the likely source of a bug\n1. How to improve performance and maintainability.\n1. How Do You Practice to be a great Developer?\n\nOn the surface, this seems like a dumb question, but it really isn’t! Practicing an instrument diverges from programming, because you can pick up a piece of music and play that same piece over-and-over until you get better. Programming doesn’t work quite the same way, because once you’ve solved a problem, you can, at best, iterate on that solution to improve it.\n\nThat’s an important step, but to really expand your knowledge, you need to regularly find new challenges.\n\n# Find Your Own Projects\nThe best way to learn is to find a problem you want to solve, and try to solve it yourself. Maybe you want to automate something, or calculate some value regularly.\n\nBasically keep your eyes open in your own life for things that you would like to work better, or try to improve on something you already use. Then try to research and see if you can solve it. Don’t get caught up in finding a “perfect” solution, rather see how close you can get in a short amount of time.\n\nThese little exercises will keep your mind fresh and have the benefit of having no fixed goal, so you can have fun with them.\n\n## Open Source\nA common recommendation is to look for Open Source projects you can help on. I definitely recommend digging into the FOSS culture, as it will expose you to a wide and varied set of skills and viewpoints.\n\nUnlike a lot of programmers, I don’t think this works perfectly for someone starting out, simply because jumping into even a small OSS project is overwhelming, as there’s a ton of basic concepts that you are expected to already understand, like code style, language tricks and concepts, and more.\n\n## Competitive Programming Sites\nMy favorite site for daily programming challenges is Codewars. (Disclaimer: I liked it so much, I now work for them.) Codewars is great for honing your developer skills, as it provides new content all the time, in a wide variety of languages, so you can make sure you flex that programming muscle whenever you get the urge.\n\n## Make Mistakes Every Day\nI think this is the most important step, and the most important skill to learn. You need to make mistakes every day. Every time you practice, practice until you make a mistake. Learn from that mistake.\n\nIf you try a new problem and solve it easily, you probably aren’t learning anything new. That is more like reciting a previously learned skill. When you come across a problem you can solve in your head, find a new way to solve that same problem. __Don’t even worry if it’s not the best way__, just expand your skills with new ideas.\n\n# Great Practice Tips\nTo really accelerate your education, follow these tips:\n\n## Break Your Code\nA common mistake very early programmers make is to write it, then only run it once or against the most simple scenario. A great way to deepen your abilities is to purposefully try to break your own code.\n\nFind unexpected ways to run your code, test on different machines, disable the internet, etc. Ask yourself:\n\n- Does it still work, or does it just crash? (If it crashes, see the next section.)\n- If it runs, does it report errors?\n- Can you find a way to handle those errors without stopping the program? As an example, if it fails due to the internet being down, maybe you could try the request again later, and only stop if several requests fail.\n\n## Learn How to Debug\nThis is a deeper topic than can easily be covered here, but every language has some way of debugging. This is another reason why you should make mistakes every day: you want a reason to dive down under the surface of your code and understand what’s happening at a deeper level.\n\nMost debugging will let you step through your program — jumping deeper into the lower layers and learning what really happens when you call a method, or set a value, or make a network request.\n\nThe goal with debugging — from a learning standpoint — is to build up that muscle memory about how the parts of a program are glued together. The deeper this knowledge, the easier it will be to predict, find, and fix bugs in the future.\n\n## Don’t Ask Questions…\n…at least not immediately. Instead, try anything and everything you can think of. This is more important the less comfortable you are with a concept or language.\n\nWhen you can’t think of anything on your own, search! The Internet is overflowing with help for learning programmers. Find answers and try them out, but don’t just copy-and-paste and move on. Modify those answers, see if you can understand why they work, adopt them to your code.\n\n## …But Always Seek Advice\nWhen you have tried everything, and preferably after you have a working solution, now is the best time to seek advice. Look to peers and senior developers to review your code.\n\nTake that advice, apply it and use it in the future. Rewrite what you already did with those suggestions in mind. Ask yourself\n\nDid they help improve the code? If so, how?\nDid they make it more readable? How can you apply that in the future?\nDid they improve performance? What assumptions did the old code make that were less performant?\nCan you expand on that suggestion? Maybe you can apply the changes in similar ways to other parts of your code.\n# Now, Start Practicing!\nNow that you have some ideas, get out there and start practicing! The longer you wait, the longer before you’ll feel confident enough to take the next steps in your developer career.\n\nThere’s no time like right now to begin turning that surface knowledge into long-term, deeper skills.\n\n","richBody":null,"description":"Progressing through the skills needed in software development can be grueling. Use this profoundly simple insight to level up your skills.","hideHero":true,"publishDate":"2019-05-01T00:00-04:00"},{"prettyDate":"Mar 4, 2019","title":"Reviewing is Everything: A tool that makes assessing candidates easier","href":"https://www.qualified.io/blog/posts/reviewing-is-everything-a-tool-that-makes-assessing-candidates-easier","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/2EnZThaX4KIskBz8ktwCgI/735840feac9ee6c2a0e43e570d9608fc/0_CStYoCwx193eN9wt?w=100&q=1","length":"2 min read","excerpt":"Check out five of our favorite features that allow you to conduct an in-depth code reviews within Qualified.\n","collection":"Qualified","slug":"reviewing-is-everything-a-tool-that-makes-assessing-candidates-easier","author":"Jake Hoffner","htmlContent":"<p>Here are five of our favorite features (although it was hard to choose) about how you can review a candidate with Qualified:</p>\n<h1>Playback of Candidate’s Code</h1>\n<p>Playback is such a simple but significant feature. When reviewing code, it’s great to “see” how a candidate approaches a problem, makes mistakes, and figures out how to remedy them. You can also do it at the speed that best suits you. Also, the playback includes every output of a candidate attempts at a solution.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/2EnZThaX4KIskBz8ktwCgI/735840feac9ee6c2a0e43e570d9608fc/0_CStYoCwx193eN9wt\" alt=\"Playback and Code Review\"></p>\n<h1>Skip to Key Events</h1>\n<p>Sometimes you just want to check out certain moments of a candidates submission. We get it. Simply checking off a “Key Events” box gives you just that, where you can quickly skip to items like:</p>\n<ul>\n<li>any code run or attempt</li>\n<li>“large” external paste</li>\n<li>code or test resets</li>\n<li>changing of the language.</li>\n</ul>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/4zg3FtyXOF8UrS1yAFAAOG/b2709cad4d7c27dd32497466f553c8fc/0_5nkDIS40YzzQ4mwD\" alt=\"0*5nkDIS40YzzQ4mwD\"></p>\n<h1>Compare Code to Other Candidates, Team Members, or Reference Solution</h1>\n<p>Leaving to another screen ruins a flow, and we never want to do that to you. By simply clicking the “Compare” tab you can view all the submissions for a specific question in order to compare to a candidate answers side by side while you are making your evaluation. You also have the ability to compare the answers to a team member or the reference solution by clicking the bottom left tabs.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/3Uz2w8bW1D3QT0i2V8u5Ia/bd0ecfd6880a689ea82a22c98ccfe422/0_DAlLtR1yMCJK0diF\" alt=\"0*DAlLtR1yMCJK0diF\"></p>\n<h1>Want to check the data? We have that for you.</h1>\n<p>Pass rate, average score, how they executed on timing, and a measure of the complexity of their code is all there for you to quickly see how a candidate stacks up against the rest. Again, all in one review screen so you have everything you need all in one place.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/3e91IWF41KgSMiKLZntYUz/068635b1af9f3b157560a17dcc78cbdb/0_C7X4dEhSEhSyPm6t\" alt=\"0*C7X4dEhSEhSyPm6t\"></p>\n<h1>Lastly, it’s time for you to leave a review</h1>\n<p>You are able to leave your review for each challenge in an assessment. The review page is broken down in three sections: Overall rating, Qualities, and Feedback Notes. Overall rating and Qualities are ways to quickly score a challenge. Qualities range from rating items like “Easy to Read, Hard to Understand” to “Handles Edge Cases, Lacks Defensive Coding Skills.” Feedback Notes is where you can write your review or comments about the candidate’s submission for other teammates to read or to save for later. Overall rating is a quick option that allows you to note if the quality of the submitted challenge was Great, Average, or Poor. Once you are all done, you can go to the next question and have a fresh challenge and page to grade.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/4Jbs0T460gZL9DekHtn09X/b54e8eb76f73f1e7e01b796cd6c5b907/0_tguZI2dtwoA1s0wF\" alt=\"0*tguZI2dtwoA1s0wF\"></p>\n<p>P.S. Although this is not in our review portal, we can’t help but want to shout out the ability to see the objective score of the candidate and the reviews of your team in one glance from your candidate portal. Don’t see a review? Then you know what you need to do 😉.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/1e5d3i6iwM5L0ptyqaa5nG/bfbb803b1bc5e9d71c662be74cb7aa9d/0_EVLizQk4gju41jYV\" alt=\"0*EVLizQk4gju41jYV\"></p>\n","tags":null,"body":"Here are five of our favorite features (although it was hard to choose) about how you can review a candidate with Qualified:\n\n# Playback of Candidate’s Code\n\nPlayback is such a simple but significant feature. When reviewing code, it’s great to “see” how a candidate approaches a problem, makes mistakes, and figures out how to remedy them. You can also do it at the speed that best suits you. Also, the playback includes every output of a candidate attempts at a solution.\n\n![Playback and Code Review](//images.ctfassets.net/4ol5sgskowtw/2EnZThaX4KIskBz8ktwCgI/735840feac9ee6c2a0e43e570d9608fc/0_CStYoCwx193eN9wt)\n\n# Skip to Key Events\n\nSometimes you just want to check out certain moments of a candidates submission. We get it. Simply checking off a “Key Events” box gives you just that, where you can quickly skip to items like:\n\n- any code run or attempt\n- “large” external paste\n- code or test resets\n- changing of the language.\n\n![0*5nkDIS40YzzQ4mwD](//images.ctfassets.net/4ol5sgskowtw/4zg3FtyXOF8UrS1yAFAAOG/b2709cad4d7c27dd32497466f553c8fc/0_5nkDIS40YzzQ4mwD)\n\n# Compare Code to Other Candidates, Team Members, or Reference Solution\n\nLeaving to another screen ruins a flow, and we never want to do that to you. By simply clicking the “Compare” tab you can view all the submissions for a specific question in order to compare to a candidate answers side by side while you are making your evaluation. You also have the ability to compare the answers to a team member or the reference solution by clicking the bottom left tabs.\n\n![0*DAlLtR1yMCJK0diF](//images.ctfassets.net/4ol5sgskowtw/3Uz2w8bW1D3QT0i2V8u5Ia/bd0ecfd6880a689ea82a22c98ccfe422/0_DAlLtR1yMCJK0diF)\n\n# Want to check the data? We have that for you.\n\nPass rate, average score, how they executed on timing, and a measure of the complexity of their code is all there for you to quickly see how a candidate stacks up against the rest. Again, all in one review screen so you have everything you need all in one place.\n\n![0*C7X4dEhSEhSyPm6t](//images.ctfassets.net/4ol5sgskowtw/3e91IWF41KgSMiKLZntYUz/068635b1af9f3b157560a17dcc78cbdb/0_C7X4dEhSEhSyPm6t)\n\n# Lastly, it’s time for you to leave a review\n\nYou are able to leave your review for each challenge in an assessment. The review page is broken down in three sections: Overall rating, Qualities, and Feedback Notes. Overall rating and Qualities are ways to quickly score a challenge. Qualities range from rating items like “Easy to Read, Hard to Understand” to “Handles Edge Cases, Lacks Defensive Coding Skills.” Feedback Notes is where you can write your review or comments about the candidate’s submission for other teammates to read or to save for later. Overall rating is a quick option that allows you to note if the quality of the submitted challenge was Great, Average, or Poor. Once you are all done, you can go to the next question and have a fresh challenge and page to grade.\n\n![0*tguZI2dtwoA1s0wF](//images.ctfassets.net/4ol5sgskowtw/4Jbs0T460gZL9DekHtn09X/b54e8eb76f73f1e7e01b796cd6c5b907/0_tguZI2dtwoA1s0wF)\n\nP.S. Although this is not in our review portal, we can’t help but want to shout out the ability to see the objective score of the candidate and the reviews of your team in one glance from your candidate portal. Don’t see a review? Then you know what you need to do 😉.\n\n![0*EVLizQk4gju41jYV](//images.ctfassets.net/4ol5sgskowtw/1e5d3i6iwM5L0ptyqaa5nG/bfbb803b1bc5e9d71c662be74cb7aa9d/0_EVLizQk4gju41jYV)","richBody":null,"description":"Check out five of our favorite features that allow you to conduct an in-depth code reviews within Qualified.","hideHero":true,"publishDate":"2019-03-04T00:00-04:00"},{"prettyDate":"Feb 25, 2019","title":"The High Cost of Developer Mis-Hire","href":"https://www.qualified.io/blog/posts/the-high-cost-of-developer-mis-hire","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/5JjXbgGQaN1eikSpyXYp64/74a3db8414061e52af99daaae587b2d5/Stock_-_Cash__Mishire_Cost.jpg?w=100&q=1","length":"3 min read","excerpt":"We ran the numbers, and the cost of landing a new developer will set a company back roughly $22,750 — dive into the numbers with us and figure out why.\n","collection":"Hiring","slug":"the-high-cost-of-developer-mis-hire","author":"Jake Hoffner","htmlContent":"<p>We ran the numbers, and the cost of landing a new developer will set a company back roughly $22,750 — the expense associated with the time it takes to review resumes, conduct phone/tech screenings, and perform in-person interviews. It’s no small sum, but worth every penny to add a productive and innovative team member who can help an organization reach its goals. But when a new developer doesn’t work out, the cost of this mis-hire to a company’s bottom line, team morale, and future outlook can be staggering.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/1HzLHUp1y3GKk29hucQx08/cb6f7dd4ffd4f85464486d14ac959c33/1_o0-O95OuGN4i2FIw1R0S-Q.jpeg\" alt=\"Hiring Cost Calculator\"></p>\n<h1>A Six-Figure Mistake</h1>\n<p>Estimates vary on how long it takes for a new hire to reach full productivity, with figures ranging from 29 weeks to 8 months to a full year. For the sake of this exercise, let’s imagine it takes 6 months for a new developer at your organization to reach optimal productivity. If everything goes as intended, the hire will show an output multiplier somewhere between 1.875 and 2.5. That is to say, a new developer making $80k a year will return $150K to $200K in profitable output to the company to cover all-in business costs and help turn a profit.</p>\n<p>The most readily apparent evidence of a bad hire is someone whose output multiplier isn’t helping in achieving profitability, or worse, doesn’t even cover their own salary. So at 6 months, an $80K developer with an output multiplier of only 1 would run the company roughly $40k in salary alone, plus $75K at the low end of missed/unrealized profitable output. Add that to the $22,750 expense of recruitment, and in just half a year a developer mis-hire winds up costing a company about $138,750 — but that’s not all.</p>\n<h1>The Incalculable Ripple Effect</h1>\n<p>Replacing an underperforming developer can be a laborious and challenging affair for HR, management, and engineering departments. From a monetary standpoint, budgets will have to contend with a severance package, possible legal fees, and the cost of having to conduct another months-long round of recruiting to fill the newly vacated position.</p>\n<p>Then there are the incalculable, but no less important, costs related to the effects of bad and fired employees on overall office morale. The negative disruption to the workplace reduces the productivity of other team members, leading to lower output which can impede enterprises from reaching its crucial milestones. When viewing an organization’s 2–5 year outlook, the ripple effect of a developer mis-hire can force stakeholders to shift timelines and redefine success.</p>\n<h1>Reversing the Damage</h1>\n<p>The good news is that the negative effect of a bad hire can be undone by filling the position with a brilliant developer whose incredible output can help recoup lost time and money, putting an enterprise back on track to achieving its goals. Facebook CEO Mark Zuckerberg is quoted in the New York Times, saying, “Someone who is exceptional in their role is not just a little better than someone who is pretty good. They are 100 times better.” The sentiment demonstrates the value top talent brings to a team, and reveals how the derailment caused by a mis-hire can be reversed by a genius developer whose profitable output multiplier is at the high end of the range. Qualifed’s online platform leverages code assessments and pair-programming interviews to streamline the candidate process and help identify brilliant developers. Send us a message to request a free trial.</p>\n","tags":"Hiring","body":"We ran the numbers, and the cost of landing a new developer will set a company back roughly $22,750 — the expense associated with the time it takes to review resumes, conduct phone/tech screenings, and perform in-person interviews. It’s no small sum, but worth every penny to add a productive and innovative team member who can help an organization reach its goals. But when a new developer doesn’t work out, the cost of this mis-hire to a company’s bottom line, team morale, and future outlook can be staggering.\n\n![Hiring Cost Calculator](//images.ctfassets.net/4ol5sgskowtw/1HzLHUp1y3GKk29hucQx08/cb6f7dd4ffd4f85464486d14ac959c33/1_o0-O95OuGN4i2FIw1R0S-Q.jpeg)\n\n# A Six-Figure Mistake\n\nEstimates vary on how long it takes for a new hire to reach full productivity, with figures ranging from 29 weeks to 8 months to a full year. For the sake of this exercise, let’s imagine it takes 6 months for a new developer at your organization to reach optimal productivity. If everything goes as intended, the hire will show an output multiplier somewhere between 1.875 and 2.5. That is to say, a new developer making $80k a year will return $150K to $200K in profitable output to the company to cover all-in business costs and help turn a profit.\n\nThe most readily apparent evidence of a bad hire is someone whose output multiplier isn’t helping in achieving profitability, or worse, doesn’t even cover their own salary. So at 6 months, an $80K developer with an output multiplier of only 1 would run the company roughly $40k in salary alone, plus $75K at the low end of missed/unrealized profitable output. Add that to the $22,750 expense of recruitment, and in just half a year a developer mis-hire winds up costing a company about $138,750 — but that’s not all.\n\n# The Incalculable Ripple Effect\n\nReplacing an underperforming developer can be a laborious and challenging affair for HR, management, and engineering departments. From a monetary standpoint, budgets will have to contend with a severance package, possible legal fees, and the cost of having to conduct another months-long round of recruiting to fill the newly vacated position.\n\nThen there are the incalculable, but no less important, costs related to the effects of bad and fired employees on overall office morale. The negative disruption to the workplace reduces the productivity of other team members, leading to lower output which can impede enterprises from reaching its crucial milestones. When viewing an organization’s 2–5 year outlook, the ripple effect of a developer mis-hire can force stakeholders to shift timelines and redefine success.\n\n# Reversing the Damage\n\nThe good news is that the negative effect of a bad hire can be undone by filling the position with a brilliant developer whose incredible output can help recoup lost time and money, putting an enterprise back on track to achieving its goals. Facebook CEO Mark Zuckerberg is quoted in the New York Times, saying, “Someone who is exceptional in their role is not just a little better than someone who is pretty good. They are 100 times better.” The sentiment demonstrates the value top talent brings to a team, and reveals how the derailment caused by a mis-hire can be reversed by a genius developer whose profitable output multiplier is at the high end of the range. Qualifed’s online platform leverages code assessments and pair-programming interviews to streamline the candidate process and help identify brilliant developers. Send us a message to request a free trial.","richBody":null,"description":"We ran the numbers, and the cost of landing a new developer will set a company back roughly $22,750 — dive into the numbers with us and figure out why.","hideHero":true,"publishDate":"2019-02-25T00:00-07:00"},{"prettyDate":"Jan 14, 2019","title":"First Impressions: Your Candidate Experience is Everything","href":"https://www.qualified.io/blog/posts/first-impressions-your-candidate-experience-is-everything","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/FS7INVbPMYIzhdARKhhxS/4ecc4d4a11970702bb700990a7a1b337/1_zyvFxUdhVysckVhfV0WVIw.jpeg?w=100&q=1","length":"3 min read","excerpt":"For tech organizations, recruiting talented engineers is a time-consuming and often challenging process that can directly impact company goals and the bottom line.\n","collection":"Hiring","slug":"first-impressions-your-candidate-experience-is-everything","author":"Nathan Doctor","htmlContent":"<p>For tech organizations, recruiting talented engineers is a time-consuming and often challenging process that can directly impact company goals and the bottom line. Senior engineers are usually responsible for conducting interviews — siphoning their attention away from their projects. And while company engineers and hiring teams are busy interviewing candidates, they can sometimes forget that the candidate is simultaneously interviewing them.</p>\n<h1>A Positive Experience Yields Lower Costs Per Hire 😊</h1>\n<p>Whether you’re a burgeoning startup or a leading organization with a global presence, it’s critical that you give each potential employee a positive candidate experience. Why? Because a first impression is everything, and delivering an exceptional candidate experience fosters an environment where engineers want to work, aids in talent retention, and helps in recruiting future team members.</p>\n<p>Top engineers are likely fielding multiple offers and competitive compensation packages, but you can give your company a leg up on landing a coveted candidate through a pleasant, frictionless interview process. 83% of talent say a negative interview experience can change their mind about a role or company they once liked, while 87% say a positive interview experience can change their mind about a role or company they once doubted. Bad experiences translate to a longer time in filling key roles and higher costs per hire, just as a positive experience fills positions quickly while saving time and money.</p>\n<h1>The Costly Cycle of an Inefficient Hiring Process 💸</h1>\n<p>Organizations typically understand the impact of negative customer reviews — no one wants a poor Yelp or Amazon rating — and yet, companies make the mistake of ignoring or discounting Glassdoor scores from employees. The scores offer insights into a company’s hiring process. Companies with strong scores (15% negative or less) are reported to offer candidates a great experience while those with poor scores (25% negative or more) indicate a poor interview process largely due to inefficiencies.</p>\n<p>Companies with an inefficient process have no choice but to evaluate a greater number of candidates. But the larger pool overwhelms the hiring department and consumes the time of senior engineers, which leads to greater negative candidate experiences and forcing the company to sift through even more candidates in a costly and lengthy cycle. These companies also face the prospect of top candidates dropping out after considering the offer and positive experience delivered by a competing organization. What’s left is a talent pool of only weaker candidates and an extended position vacancy that can delay a department from reaching critical milestones.</p>\n<h1>Good vs Bad Experiences 👀</h1>\n<p>What separates a good interview process from a bad? According to interviewees, slow response times, as well as a lack of feedback and unknown expectations all rank as top reasons for a negative experience. Unfortunately, slow response times are the result of hiring teams that are overwhelmed due to inefficient processes. Candidates report that receiving preparation materials or detailed interview schedules in advance of the on-site makes for a better experience as it allows candidates to understand and meet expectations.</p>\n<h1>Qualified Optimizes Recruiting ✅</h1>\n<p>The recruiting process should be a positive, uncomplicated experience where engineers can unlock their talent and demonstrate their benefit to a team. Automated technical assessments or coding challenges are critical in evaluating the skills of engineers, and these should likewise be enjoyable, challenging, seamless, and based in real-world context. Qualified is designed to test coding skills using challenges with real-world relevance rather than an artificial setup. The platform effectively prescreens candidates to optimize the hiring process for maximum efficiency. It delivers a smooth user experience with a clean UI and modern integrated IDE, while providing feedback that explains where issues occur within real data.</p>\n<p>Qualified assessments are a candidate’s first touch-point with a company and help generate an indelible, positive first impression which is critical to landing rockstar talent and quickly filling key roles. Send us a message to request a free trial.</p>\n","tags":null,"body":"For tech organizations, recruiting talented engineers is a time-consuming and often challenging process that can directly impact company goals and the bottom line. Senior engineers are usually responsible for conducting interviews — siphoning their attention away from their projects. And while company engineers and hiring teams are busy interviewing candidates, they can sometimes forget that the candidate is simultaneously interviewing them.\n\n# A Positive Experience Yields Lower Costs Per Hire 😊\n\nWhether you’re a burgeoning startup or a leading organization with a global presence, it’s critical that you give each potential employee a positive candidate experience. Why? Because a first impression is everything, and delivering an exceptional candidate experience fosters an environment where engineers want to work, aids in talent retention, and helps in recruiting future team members.\n\nTop engineers are likely fielding multiple offers and competitive compensation packages, but you can give your company a leg up on landing a coveted candidate through a pleasant, frictionless interview process. 83% of talent say a negative interview experience can change their mind about a role or company they once liked, while 87% say a positive interview experience can change their mind about a role or company they once doubted. Bad experiences translate to a longer time in filling key roles and higher costs per hire, just as a positive experience fills positions quickly while saving time and money.\n\n\n# The Costly Cycle of an Inefficient Hiring Process 💸\n\nOrganizations typically understand the impact of negative customer reviews — no one wants a poor Yelp or Amazon rating — and yet, companies make the mistake of ignoring or discounting Glassdoor scores from employees. The scores offer insights into a company’s hiring process. Companies with strong scores (15% negative or less) are reported to offer candidates a great experience while those with poor scores (25% negative or more) indicate a poor interview process largely due to inefficiencies.\n\nCompanies with an inefficient process have no choice but to evaluate a greater number of candidates. But the larger pool overwhelms the hiring department and consumes the time of senior engineers, which leads to greater negative candidate experiences and forcing the company to sift through even more candidates in a costly and lengthy cycle. These companies also face the prospect of top candidates dropping out after considering the offer and positive experience delivered by a competing organization. What’s left is a talent pool of only weaker candidates and an extended position vacancy that can delay a department from reaching critical milestones.\n\n# Good vs Bad Experiences 👀\n\nWhat separates a good interview process from a bad? According to interviewees, slow response times, as well as a lack of feedback and unknown expectations all rank as top reasons for a negative experience. Unfortunately, slow response times are the result of hiring teams that are overwhelmed due to inefficient processes. Candidates report that receiving preparation materials or detailed interview schedules in advance of the on-site makes for a better experience as it allows candidates to understand and meet expectations.\n\n# Qualified Optimizes Recruiting ✅\n\nThe recruiting process should be a positive, uncomplicated experience where engineers can unlock their talent and demonstrate their benefit to a team. Automated technical assessments or coding challenges are critical in evaluating the skills of engineers, and these should likewise be enjoyable, challenging, seamless, and based in real-world context. Qualified is designed to test coding skills using challenges with real-world relevance rather than an artificial setup. The platform effectively prescreens candidates to optimize the hiring process for maximum efficiency. It delivers a smooth user experience with a clean UI and modern integrated IDE, while providing feedback that explains where issues occur within real data.\n\nQualified assessments are a candidate’s first touch-point with a company and help generate an indelible, positive first impression which is critical to landing rockstar talent and quickly filling key roles. Send us a message to request a free trial.","richBody":null,"description":"For tech organizations, recruiting talented engineers is a time-consuming and often challenging process that can directly impact company goals and the bottom line.","hideHero":false,"publishDate":"2019-01-14T00:00-04:00"},{"prettyDate":"Jan 2, 2019","title":"Top Features & Improvements of 2018","href":"https://www.qualified.io/blog/posts/top-features-and-improvements-of-2018","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/64udo9yLUd2Tt8ubY9Hd6T/bedca34012e9e1033fcc46ec46b2daae/QualifiedTop2018Hero.jpeg?w=100&q=1","length":"5 min read","excerpt":"As we at Qualified look forward towards what's to come for 2019, we wanted to share our top 10 favorite features and improvements of 2018.\n","collection":"Qualified","slug":"top-features-and-improvements-of-2018","author":"Jake Hoffner","htmlContent":"<p>As we have now said farewell to 2018, Qualified would like to thank you for being a part of our community. As we at Qualified look forward towards what's to come for 2019, we wanted to share our top 10 favorite features and improvements of 2018. We are happy we get to look back and be able to say we've championed quite a few items that makes it easier to hire Qualified candidates.</p>\n<p><strong>10. Drag and Drop Markdown Images</strong>\nWe made it easier than ever to add example diagrams and other images to your challenge descriptions, notes, reviews, and nearly anywhere else Markdown is used within the Qualified application (this includes candidate notes about their solutions!).</p>\n<p>Just simply drag-and-drop images right into the editor to upload them to our site, and they'll be uploaded and inserted automatically. You can also select files from a file selector, or even use copy-and-paste to add images quickly.</p>\n<p><strong>9. Notification Schemes</strong>\nPreviously notifications would only be sent to team members who were assigned to the candidate. Some teams however, wanted everyone to receive notifications for every candidate, or only team members with certain roles (such as reviewers). Notification schemes to the rescue! We have added various schemes so that you can now configure the notification style that fits your team the best!</p>\n<p>These schemes can be configured at the team level, and overridden on a per assessment basis. By default, we still only notify team members who are assigned to the candidate.</p>\n<p><strong>8. Assessment Review Ratings Column</strong>\nWe believe that augmenting the auto-graded score with manual reviews conducted by your team is the best way to identity the best talent. We aggregate all overall assessment review ratings and show them within the candidates list. This means you can now have not just an overview of how well your candidates are scoring, but an overview of what your team thinks of each candidate.</p>\n<p>To dig a little deeper, you can click on each rating group within a candidate row to display which team members rated the candidate.</p>\n<p><strong>7. Text Questions: Validation Matchers Preview</strong>\nText questions support a rich set of matchers for determining how the answer is scored, including the ability to use multiple regular expressions. Now you can preview what those matchers will match through our new preview tool.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/7s52K0nBpkTaeRKDZ6OHOu/82f8b73ccc35fc04cffb13e6f7692d0d/QualifiedTop20182.png\" alt=\"QualifiedTop20182\"></p>\n<p><strong>6. Preview Edited Challenges</strong>\nWe have updated our platform to allow you to preview the quiz you are editing before it's been saved, so you know what it will look like to the candidate every step of the way. Press Preview on the top left side of the dashboard whenever you want to see what you have edited.</p>\n<p><em>Pro Tip: you can press CTRL/CMD+P to quickly preview a challenge while editing, then press it again to close the preview.</em></p>\n<p><strong>5. Zoomable Quiz Images</strong>\nCandidates can zoom in on large quiz images. This allows you to include images in your quiz questions, such as large diagrams, which candidates can zoom in on to fully understand all of the details. UML diagrams, SQL diagrams, etc are now all easily usable at any size!</p>\n<p><strong>4. Weighted Multiple Choice Questions</strong>\nWeighted multiple choice questions work exactly as normal multiple choice questions from the candidate's point-of-view, but now you can assign different values to each question. The total score for the questions can then be assigned anything you want, such as the sum of all correct answers, the highest correct answer, or any value in-between.</p>\n<p>By allowing choices to be marked as \"more correct\" or \"less wrong\" than others, an entire new set of possibilities opens up! This includes use cases such as aptitude testing, personality testing and job fit surveys.</p>\n<p><strong>3. Timed Quizzes &amp; Timed Questions</strong>\nPlacing a time limit on a quiz can help a candidate better time manage where they place their effort and help the flow of assessment completion move faster. It also gives you the ability to create an assessment that is about speed, such as adding more questions to an assessment than a candidate can answer in a certain amount of time.</p>\n<p>Placing a time limit on a question can be the best way to assess a candidates prior knowledge. It restricts the amount of time a candidate can spend on a specific question, creating a time pressure forces them to think about the answer, instead of giving them time to go look the answer up. There are two variations of this feature: <em>Per Question Time Limit and Per Question Time Limit with Bonus</em>. Time bonuses are a great way of allowing you to give candidates a bit more time to at least get some credit, but rewarding those who answer quickly.</p>\n<p><strong>2. Compare Code Solutions</strong>\nIn addition to being able to compare a candidate's solution to the reference solution for the challenge, you can now also compare their solutions to those of your team members, as well as other candidates who have submitted a solution.</p>\n<p>Reviewing the code quality of submitted solutions is an important step for evaluating a candidate, and now that you can see other solutions, it's much easier to get a relative understanding of how one candidate solves problems compared to others.</p>\n<p><strong>1. Code Similarity (Premium Feature)</strong>\nCode Similarity allows us to constantly compare every solution in the system to determine the similarity between newly submitted solutions and older solutions. This comparison reports back a similarity score, as well as a complexity score.</p>\n<p>While there are many use cases for code similarity, such as simply surfacing similar but not exact solutions when comparing candidate's code to others, the main application of this feature is to detect possible plagiarized solutions. There is no way for Qualified to automatically say for sure that a solution is plagiarized, since the system only determines that code is similar, it doesn't know why the code is similar. However our system will take certain factors into account, such as complexity, to determine a range in which code being similar starts to be considered a risk of being plagiarized. Our system will identity solutions that may be at risk as either \"low\", \"medium\" or \"high\" risk. From there your team can decide if you believe the solutions to in fact be plagiarized.</p>\n<p>That's our top 10 list for this year. Of course we have added many more features and improvements. Head over to our <a href=\"https://www.qualified.io/kb/changes\">Product Updates</a> page to get a full list.</p>\n","tags":null,"body":"As we have now said farewell to 2018, Qualified would like to thank you for being a part of our community. As we at Qualified look forward towards what's to come for 2019, we wanted to share our top 10 favorite features and improvements of 2018. We are happy we get to look back and be able to say we've championed quite a few items that makes it easier to hire Qualified candidates.\n\n__10. Drag and Drop Markdown Images__\nWe made it easier than ever to add example diagrams and other images to your challenge descriptions, notes, reviews, and nearly anywhere else Markdown is used within the Qualified application (this includes candidate notes about their solutions!).\n\nJust simply drag-and-drop images right into the editor to upload them to our site, and they'll be uploaded and inserted automatically. You can also select files from a file selector, or even use copy-and-paste to add images quickly.\n\n__9. Notification Schemes__\nPreviously notifications would only be sent to team members who were assigned to the candidate. Some teams however, wanted everyone to receive notifications for every candidate, or only team members with certain roles (such as reviewers). Notification schemes to the rescue! We have added various schemes so that you can now configure the notification style that fits your team the best!\n\nThese schemes can be configured at the team level, and overridden on a per assessment basis. By default, we still only notify team members who are assigned to the candidate.\n\n__8. Assessment Review Ratings Column__\nWe believe that augmenting the auto-graded score with manual reviews conducted by your team is the best way to identity the best talent. We aggregate all overall assessment review ratings and show them within the candidates list. This means you can now have not just an overview of how well your candidates are scoring, but an overview of what your team thinks of each candidate.\n\nTo dig a little deeper, you can click on each rating group within a candidate row to display which team members rated the candidate.\n\n__7. Text Questions: Validation Matchers Preview__\nText questions support a rich set of matchers for determining how the answer is scored, including the ability to use multiple regular expressions. Now you can preview what those matchers will match through our new preview tool.\n\n![QualifiedTop20182](//images.ctfassets.net/4ol5sgskowtw/7s52K0nBpkTaeRKDZ6OHOu/82f8b73ccc35fc04cffb13e6f7692d0d/QualifiedTop20182.png)\n\n__6. Preview Edited Challenges__\nWe have updated our platform to allow you to preview the quiz you are editing before it's been saved, so you know what it will look like to the candidate every step of the way. Press Preview on the top left side of the dashboard whenever you want to see what you have edited.\n\n*Pro Tip: you can press CTRL/CMD+P to quickly preview a challenge while editing, then press it again to close the preview.*\n\n__5. Zoomable Quiz Images__\nCandidates can zoom in on large quiz images. This allows you to include images in your quiz questions, such as large diagrams, which candidates can zoom in on to fully understand all of the details. UML diagrams, SQL diagrams, etc are now all easily usable at any size!\n\n__4. Weighted Multiple Choice Questions__\nWeighted multiple choice questions work exactly as normal multiple choice questions from the candidate's point-of-view, but now you can assign different values to each question. The total score for the questions can then be assigned anything you want, such as the sum of all correct answers, the highest correct answer, or any value in-between.\n\nBy allowing choices to be marked as \"more correct\" or \"less wrong\" than others, an entire new set of possibilities opens up! This includes use cases such as aptitude testing, personality testing and job fit surveys.\n\n__3. Timed Quizzes & Timed Questions__\nPlacing a time limit on a quiz can help a candidate better time manage where they place their effort and help the flow of assessment completion move faster. It also gives you the ability to create an assessment that is about speed, such as adding more questions to an assessment than a candidate can answer in a certain amount of time.\n\nPlacing a time limit on a question can be the best way to assess a candidates prior knowledge. It restricts the amount of time a candidate can spend on a specific question, creating a time pressure forces them to think about the answer, instead of giving them time to go look the answer up. There are two variations of this feature: *Per Question Time Limit and Per Question Time Limit with Bonus*. Time bonuses are a great way of allowing you to give candidates a bit more time to at least get some credit, but rewarding those who answer quickly.\n\n__2. Compare Code Solutions__\nIn addition to being able to compare a candidate's solution to the reference solution for the challenge, you can now also compare their solutions to those of your team members, as well as other candidates who have submitted a solution.\n\nReviewing the code quality of submitted solutions is an important step for evaluating a candidate, and now that you can see other solutions, it's much easier to get a relative understanding of how one candidate solves problems compared to others.\n\n__1. Code Similarity (Premium Feature)__\nCode Similarity allows us to constantly compare every solution in the system to determine the similarity between newly submitted solutions and older solutions. This comparison reports back a similarity score, as well as a complexity score.\n\nWhile there are many use cases for code similarity, such as simply surfacing similar but not exact solutions when comparing candidate's code to others, the main application of this feature is to detect possible plagiarized solutions. There is no way for Qualified to automatically say for sure that a solution is plagiarized, since the system only determines that code is similar, it doesn't know why the code is similar. However our system will take certain factors into account, such as complexity, to determine a range in which code being similar starts to be considered a risk of being plagiarized. Our system will identity solutions that may be at risk as either \"low\", \"medium\" or \"high\" risk. From there your team can decide if you believe the solutions to in fact be plagiarized.\n\nThat's our top 10 list for this year. Of course we have added many more features and improvements. Head over to our [Product Updates](https://www.qualified.io/kb/changes) page to get a full list.","richBody":null,"description":"As we at Qualified look forward towards what's to come for 2019, we wanted to share our top 10 favorite features and improvements of 2018.","hideHero":true,"publishDate":"2019-01-02T00:00-07:00"},{"prettyDate":"","title":"Beyond Code: How Qualified Builds Great Tools","href":"https://www.qualified.io/blog/posts/beyond-code-how-qualified-builds-great-tools","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/1tKSOFWRrynkwzMUFizoTG/08379e4f47886d5b7c9952894ed2d376/1_3viLnow0Cpzirx-kMsYeKg.jpeg?w=100&q=1","length":"","excerpt":"As one of the leading software tools to use for hiring technical talent, we can’t help but want to talk about what it’s like to be on our team.\n","collection":"Qualified","slug":"beyond-code-how-qualified-builds-great-tools","htmlContent":"<p>As one of the leading software tools to use for hiring technical talent, we can’t help but want to talk about what it’s like to be on our team. So we did a little bit of research, talking, and counting and found out this is what it’s like to work at Qualified.</p>\n<h1>Small Team, High Impact</h1>\n<blockquote>\n<p>“As a small team, each of us have high impact and the work is recognized” — Kaz, Software Engineer at Qualified</p>\n</blockquote>\n<p>When you are lean mean team of 12, every action counts. We solve problems as a team, encouraging everyone to speak up and work together to build a product we’re proud of. We believe when you have the qualified candidate for your team it makes all the difference. Each of us have high impact and the work is recognized.</p>\n<h1>Productively Remote</h1>\n<blockquote>\n<p>“I can work from where I’m most productive in.” — Bianca, Product Manager</p>\n</blockquote>\n<p>All 12 of us work wherever we like, reliable internet access is our only requirement. Spread across 4 time zones in 6 different states, we sign into slack and open our work tools on the schedule that best fits our lives. We communicate asynchronously, work autonomously and take ownership over our work.</p>\n<h1>Collaboration &amp; Camaraderie from afar</h1>\n<blockquote>\n<p>“We solve problems as a team, encouraging everyone to speak up and work together to build a product we’re proud of.” — Phil, Front End Software Engineer</p>\n</blockquote>\n<p>We have camaraderie from afar. Remote work does not stop us from getting to know each other. Daily conversations in chats like #random include topics of film, shows, shared articles, and music. Speaking of music, we even went so far as to have a team Spotify playlist. We use the coveted chat #whoaddedthis to jump on the music finds and we have a weekly optional Virtual Office Hours meeting to pop in and say hi to whoever wants to hang out and chat. We all come together in person once a year for a team retreat, and throughout the year we find special ways of coming together, such as participating in a virtual secret Santa exchange.</p>\n<h1>Driven by our Mission</h1>\n<blockquote>\n<p>“I love working with a team of excellent folks and creating thought-provoking assessments that (hopefully) challenge and entertain candidates.” — Greg, Content Developer</p>\n</blockquote>\n<p>We are on a mission to help everyone make qualified hires. Our leadership team makes profitability and product plans clear. With the autonomy to own your space, you are empowered to work on what interests you and your skills in that area.</p>\n<hr>\n<p>In the end, we are just some people who think interviewing as an engineer should be enjoyable, and we have team that enjoys building a product that does just that.</p>\n","tags":null,"body":"As one of the leading software tools to use for hiring technical talent, we can’t help but want to talk about what it’s like to be on our team. So we did a little bit of research, talking, and counting and found out this is what it’s like to work at Qualified.\n\n# Small Team, High Impact\n\n> “As a small team, each of us have high impact and the work is recognized” — Kaz, Software Engineer at Qualified\n\nWhen you are lean mean team of 12, every action counts. We solve problems as a team, encouraging everyone to speak up and work together to build a product we’re proud of. We believe when you have the qualified candidate for your team it makes all the difference. Each of us have high impact and the work is recognized.\n\n# Productively Remote\n\n> “I can work from where I’m most productive in.” — Bianca, Product Manager\n\nAll 12 of us work wherever we like, reliable internet access is our only requirement. Spread across 4 time zones in 6 different states, we sign into slack and open our work tools on the schedule that best fits our lives. We communicate asynchronously, work autonomously and take ownership over our work.\n\n# Collaboration & Camaraderie from afar\n\n> “We solve problems as a team, encouraging everyone to speak up and work together to build a product we’re proud of.” — Phil, Front End Software Engineer\n\nWe have camaraderie from afar. Remote work does not stop us from getting to know each other. Daily conversations in chats like #random include topics of film, shows, shared articles, and music. Speaking of music, we even went so far as to have a team Spotify playlist. We use the coveted chat #whoaddedthis to jump on the music finds and we have a weekly optional Virtual Office Hours meeting to pop in and say hi to whoever wants to hang out and chat. We all come together in person once a year for a team retreat, and throughout the year we find special ways of coming together, such as participating in a virtual secret Santa exchange.\n\n# Driven by our Mission\n\n> “I love working with a team of excellent folks and creating thought-provoking assessments that (hopefully) challenge and entertain candidates.” — Greg, Content Developer\n\nWe are on a mission to help everyone make qualified hires. Our leadership team makes profitability and product plans clear. With the autonomy to own your space, you are empowered to work on what interests you and your skills in that area.\n\n-----\n\nIn the end, we are just some people who think interviewing as an engineer should be enjoyable, and we have team that enjoys building a product that does just that.\n","richBody":null,"description":"As one of the leading software tools to use for hiring technical talent, we can’t help but want to talk about what it’s like to be on our team.","hideHero":true,"publishDate":"2018-12-26T00:00-04:00"},{"prettyDate":"Dec 6, 2018","title":"A Small Trick to Assess a Developer’s Prior Knowledge: Timed Quiz Questions & Quizzes","href":"https://www.qualified.io/blog/posts/a-small-trick-to-assess-a-developers-prior-knowledge","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/5TmrAIZOflnFfUzUlFN9zq/2f77463996c53e2175c968600f32f738/QualifiedSmallTrickHero.gif?w=100&q=1","length":"3 min read","excerpt":"How do you assess the prior knowledge of a candidate? You know, the type of knowledge they should have without researching the answer. We typically resort to creating general quizzes, but when the submissions roll in, sometimes we can’t help but think — “Did they research this?”\n","collection":"Qualified","slug":"a-small-trick-to-assess-a-developers-prior-knowledge","author":"Jake Hoffner","htmlContent":"<p>How do you assess the prior knowledge of a candidate? You know, the type of knowledge they should have without researching the answer. We typically resort to creating general quizzes, but when the submissions roll in, sometimes we can’t help but think — “Did they research this?”</p>\n<p><em>Well, may we suggest timed quizzes? Or even, timed quiz questions?</em></p>\n<p>Placing a time limit on a question can be the best way to assess a candidate’s prior knowledge. It restricts the amount of time a candidate can spend on a specific question ensuring that their answer is based on their prior knowledge, instead of giving them time to go look the answer up.</p>\n<h1>Per Question Time Limit</h1>\n<p>This allows you to place a time limit on each quiz question. You can choose to make each question the same time limit or make a unique time limit for each question. Not all questions are made equal, the flexibility to change the time limit for each question allows for a unique candidate experience.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/1beJCRfhItTwV4HwZ3pxBE/4475411911c2895c09b832710a5d2675/QualifiedSmallTrick2.gif\" alt=\"QualifiedSmallTrick2\"></p>\n<p><em>What happens if a candidate goes over their time limit?</em></p>\n<p>The answer is entirely up to you. Do you want to push them to the next question without bonus time? You can set that standard or you can allow them some bonus time that will affect their score — the longer they take, the more points deducted from their score.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/5oMNBwrXojdsuxRgLvIBTa/5d47f8c87d25a76d44084aa173141437/QualifiedSmallTrick3.gif\" alt=\"QualifiedSmallTrick3\"></p>\n<p><em>Can candidates see all the questions at once?</em></p>\n<p>No, they are shown one question at a time. This creates a nice clear environment to focus on the question at hand where candidates make their submission and move to the next item.</p>\n<p>*if you want them to see all the questions at once, this is an option if you choose to build a quiz without a time limit.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/497F2smIiDi1O981kuez2c/20284591d877e1e08c38c22af0079081/QualifiedSmallTrick4.gif\" alt=\"QualifiedSmallTrick4\"></p>\n<p><em>Pro tip: Not sure if you are giving the candidate enough time to access their prior knowledge? Have a developer on your team test the assessment for feedback and to gather a baseline.</em></p>\n<h1>Timed Quizzes</h1>\n<p>Maybe when you are making a quiz you don’t want to limit each question but just the quiz overall. We get it. This is best used when you just want a candidate to devote a certain amount of time to the more qualitative part of the exam. At Qualified, sometimes we like to use this feature when we have an intro quiz that has the candidate fill information in about themselves e.g. Have you worked remote? What is a project you loved working on? However, we don’t want the candidate to spend all their time here. We just want the gut response and really want them to sink their teeth into the code assessment. So, we set a timer for the entire quiz. It helps guide the candidate in knowing where we want the real work to be done when we are vetting them.</p>\n<h1>Quick Re-Cap Guide:</h1>\n<p><strong>All the ways to use Timed Quiz Questions:</strong></p>\n<ul>\n<li>Limit time per question to limit ability of candidate to research the answer</li>\n<li>Candidate accesses questions one at a time instead of full access to all quiz questions</li>\n<li>Allow candidate to complete the entire quiz, but be graded on how long it takes them to complete certain questions</li>\n</ul>\n<p><strong>All the ways to use Timed Quizzes:</strong></p>\n<ul>\n<li>Signal to candidate where they should be spending the limited time or the most time</li>\n<li>Make a quiz with more questions than time to answer. Have a candidate answer as many questions as they can for completion.</li>\n<li>Allow the candidate experience to be concise to ensure excellent candidate experience as they complete an assessment</li>\n<li>Create a short “get to know you” quiz that candidates are signaled to fill out quickly but meaningfully</li>\n<li>Have a candidate complete a challenge in a limited time that gives them control on how they will manage their time in completing a challenge (spending more time on one question over another)</li>\n</ul>\n","tags":null,"body":"How do you assess the prior knowledge of a candidate? You know, the type of knowledge they should have without researching the answer. We typically resort to creating general quizzes, but when the submissions roll in, sometimes we can’t help but think — “Did they research this?”\n\n*Well, may we suggest timed quizzes? Or even, timed quiz questions?*\n\nPlacing a time limit on a question can be the best way to assess a candidate’s prior knowledge. It restricts the amount of time a candidate can spend on a specific question ensuring that their answer is based on their prior knowledge, instead of giving them time to go look the answer up.\n\n# Per Question Time Limit\n\nThis allows you to place a time limit on each quiz question. You can choose to make each question the same time limit or make a unique time limit for each question. Not all questions are made equal, the flexibility to change the time limit for each question allows for a unique candidate experience.\n\n![QualifiedSmallTrick2](//images.ctfassets.net/4ol5sgskowtw/1beJCRfhItTwV4HwZ3pxBE/4475411911c2895c09b832710a5d2675/QualifiedSmallTrick2.gif)\n\n*What happens if a candidate goes over their time limit?*\n\nThe answer is entirely up to you. Do you want to push them to the next question without bonus time? You can set that standard or you can allow them some bonus time that will affect their score — the longer they take, the more points deducted from their score.\n\n![QualifiedSmallTrick3](//images.ctfassets.net/4ol5sgskowtw/5oMNBwrXojdsuxRgLvIBTa/5d47f8c87d25a76d44084aa173141437/QualifiedSmallTrick3.gif)\n\n*Can candidates see all the questions at once?*\n\nNo, they are shown one question at a time. This creates a nice clear environment to focus on the question at hand where candidates make their submission and move to the next item.\n\n*if you want them to see all the questions at once, this is an option if you choose to build a quiz without a time limit.\n\n![QualifiedSmallTrick4](//images.ctfassets.net/4ol5sgskowtw/497F2smIiDi1O981kuez2c/20284591d877e1e08c38c22af0079081/QualifiedSmallTrick4.gif)\n\n*Pro tip: Not sure if you are giving the candidate enough time to access their prior knowledge? Have a developer on your team test the assessment for feedback and to gather a baseline.*\n\n# Timed Quizzes\n\nMaybe when you are making a quiz you don’t want to limit each question but just the quiz overall. We get it. This is best used when you just want a candidate to devote a certain amount of time to the more qualitative part of the exam. At Qualified, sometimes we like to use this feature when we have an intro quiz that has the candidate fill information in about themselves e.g. Have you worked remote? What is a project you loved working on? However, we don’t want the candidate to spend all their time here. We just want the gut response and really want them to sink their teeth into the code assessment. So, we set a timer for the entire quiz. It helps guide the candidate in knowing where we want the real work to be done when we are vetting them.\n\n# Quick Re-Cap Guide:\n__All the ways to use Timed Quiz Questions:__\n- Limit time per question to limit ability of candidate to research the answer\n- Candidate accesses questions one at a time instead of full access to all quiz questions\n- Allow candidate to complete the entire quiz, but be graded on how long it takes them to complete certain questions\n\n__All the ways to use Timed Quizzes:__\n- Signal to candidate where they should be spending the limited time or the most time\n- Make a quiz with more questions than time to answer. Have a candidate answer as many questions as they can for completion.\n- Allow the candidate experience to be concise to ensure excellent candidate experience as they complete an assessment\n- Create a short “get to know you” quiz that candidates are signaled to fill out quickly but meaningfully\n- Have a candidate complete a challenge in a limited time that gives them control on how they will manage their time in completing a challenge (spending more time on one question over another)","richBody":null,"description":"How do you assess the prior knowledge of a candidate? You know, the type of knowledge they should have without researching the answer. We typically resort to creating general quizzes, but when the submissions roll in, sometimes we can’t help but think — “Did they research this?”","hideHero":true,"publishDate":"2018-12-06T00:00-07:00"},{"prettyDate":"Jul 17, 2018","title":"How To Create An Effective Coding Challenge","href":"https://www.qualified.io/blog/posts/how-to-create-an-effective-coding-challenge","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/3aH8aKZ0KVgjCHoOrvPvGU/8d8b3e3917ff9443514baa8a7fcda46c/QualifiedChallengeHero.png?w=100&q=1","length":"5 min read","excerpt":"In this guide, we’ll explore general concepts, goals, and tips for creating challenges for the Qualified Candidate Assess system. If you do not know what an Assessment is or how to build one be sure to read over our prior Product Blog Posts.\n","collection":"Qualified","slug":"how-to-create-an-effective-coding-challenge","author":"Jake Hoffner","htmlContent":"<p>In this guide, we’ll explore general concepts, goals, and tips for creating challenges for the Qualified Candidate Assess system. If you do not know what an Assessment is or how to build one be sure to read over our prior Product Blog Posts.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/3aH8aKZ0KVgjCHoOrvPvGU/8d8b3e3917ff9443514baa8a7fcda46c/QualifiedChallengeHero.png\" alt=\"QualifiedChallengeHero\"></p>\n<h1>Creating Great Challenges</h1>\n<p>If you’ve gone through the previous article, you should have a general set of testing goals in mind. Now it’s time to break it up into one or more challenges that can be used to effectively evaluate the candidate.</p>\n<h2>Challenge testing goals</h2>\n<p>For the benefit of the reviewer, each challenge should have a couple of specific testing goals in mind. Using your list of concepts for the overall assessment, you can now try to determine up to four separate challenges that each test a handful of those concepts.</p>\n<p>You’ll want to make sure each core concept is covered by at least one challenge. This will help you know where to emphasize the tests as you define the challenges further.</p>\n<h2>Provide Clear, Precise Instructions</h2>\n<p>Good instructions shouldn’t be a book, but they should be long enough to cover everything needed for a programmer to understand the goal of the tests. They should be easy for the candidate to skim through on the first pass, while having detailed rules where you’d expect them. Whenever possible, provide specific examples.</p>\n<p>Instructions are written in Markdown, which provides a lot of tools for formatting text. Use it judiciously, especially section headers, lists, code delimiters (both inline and blocks), bold for highlighting important terms, etc.</p>\n<h3>Multiple Language Code Blocks</h3>\n<p>The instructions renderer has the ability to render specific code sections based on the currently selected language. If you are using multiple languages, and have code examples, make sure to include the examples in each language, like so:</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/2JGPB0JBCAqlRJIbR52Vlo/f04547f7db775663ae56d86a8b7de02f/Screen_Shot_2019-07-03_at_11.10.56_AM.png\" alt=\"Screen Shot 2019-07-03 at 11.10.56 AM\"></p>\n<h2>On Naming &amp; Formatting</h2>\n<p>It’s easy to simply call everything Challenge or solution(), but using proper naming helps the candidate avoid simple mistakes. Make sure you treat the challenge as if it's real, production code—just as you expect of the candidate.</p>\n<p>This also means that all your examples are properly formatted, so the reviewer can see if the candidate tried to follow the example code formatting.</p>\n<h2>Provide Setup Code</h2>\n<p>In almost all instances, you should have <em>some</em> setup code. If you have a specific method, make sure you include the template for that method. If you are building up something more complex, make sure you provide the basic framework for the candidate.</p>\n<p>This helps reduce the time it takes to get started significantly. When only provided a blank editor and instructions, the candidate has a lot more work to get started than necessary.</p>\n<h2>Cover Testing Goals</h2>\n<p>Once you have a basic challenge built, you need to make sure you have a strong set of tests for that challenge.</p>\n<p>Every challenge should have:</p>\n<ul>\n<li>Thorough coverage of the core concepts. Test different inputs and outputs, with any edge cases you think are important.</li>\n<li>Proper test design. Make sure you use the testing frameworks test grouping, such as describe and it blocks.</li>\n<li>Prefer more individual tests over multiple tests within a block. This gives a more refined score, by providing more overall “points”.</li>\n<li>Use detailed assertions. Whenever possible, make sure to provide both the expected and actual output.</li>\n<li>Whenever possible, make sure tests describe the input and expected output. This is especially important for more complex data, as reviewing (for example) two complex JSON blobs is very tedious.</li>\n<li>Tests should build up in complexity. It’s easier for the candidate to solve the simple cases and then build on edge case handling, allowing them to focus on building up the solution, rather than having to get everything right at once.</li>\n<li>If practical, include a block of randomized tests. Randomized tests help reduce the risk of cheating by simply returning the expected answer based on the input order. Note: these should never replace the standard tests.</li>\n</ul>\n<p>Other good testing hints:</p>\n<p>Use the output to render more complex data in helpful ways. For example, you can generate graphics using <code>&lt;canvas&gt;</code> or render input and output data in ways that can help the candidate find mistakes.\nBe smart about tests — you can write methods to help reduce repetition in your tests.\nYou can use the <em>Preloaded</em> section to lock down the environment, or to provide preloaded code or data to the candidate before their code runs.</p>\n<h2>Provide Candidate Tests</h2>\n<p>Another easy thing to ignore is providing sample tests for the candidate. These are critical, because without some sample tests, it’s often much harder for the candidate to know how to begin setting up those tests.</p>\n<p>Usually you’ll write the full test suite first, then copy them over the sample and remove a portion of them. However, make sure to provide enough sample testing coverage that the candidate can expand upon the setup if they need.</p>\n<h2>Help Interpret the Results</h2>\n<p>As the creator of the challenge, you’ll have the best insight into the goals of the challenge. Once you have the overall challenge complete, make sure you write up a guide for interpreting the results, under the <em>Purpose</em> field.</p>\n<p>This should explain things like:</p>\n<ul>\n<li>What were the overall goals? Be specific in what was being tested, and how.</li>\n<li>What are some things to look out for from stand out candidates?</li>\n<li>What red flags should there be from poor candidates?</li>\n</ul>\n<p>You can avoid overly obvious details (code quality, comments, documentation, etc), unless those are part of the specific testing goals.</p>\n<p>Have more questions? Reach out to us at <a href=\"/cdn-cgi/l/email-protection#cebaabafa38ebfbbafa2a7a8a7abaae0a7a1\"><span class=\"__cf_email__\" data-cfemail=\"b5c1d0d4d8f5c4c0d4d9dcd3dcd0d19bdcda\">[email&nbsp;protected]</span></a></p>\n","tags":null,"body":"In this guide, we’ll explore general concepts, goals, and tips for creating challenges for the Qualified Candidate Assess system. If you do not know what an Assessment is or how to build one be sure to read over our prior Product Blog Posts.\n\n![QualifiedChallengeHero](//images.ctfassets.net/4ol5sgskowtw/3aH8aKZ0KVgjCHoOrvPvGU/8d8b3e3917ff9443514baa8a7fcda46c/QualifiedChallengeHero.png)\n\n# Creating Great Challenges\nIf you’ve gone through the previous article, you should have a general set of testing goals in mind. Now it’s time to break it up into one or more challenges that can be used to effectively evaluate the candidate.\n\n## Challenge testing goals\nFor the benefit of the reviewer, each challenge should have a couple of specific testing goals in mind. Using your list of concepts for the overall assessment, you can now try to determine up to four separate challenges that each test a handful of those concepts.\n\nYou’ll want to make sure each core concept is covered by at least one challenge. This will help you know where to emphasize the tests as you define the challenges further.\n\n## Provide Clear, Precise Instructions\nGood instructions shouldn’t be a book, but they should be long enough to cover everything needed for a programmer to understand the goal of the tests. They should be easy for the candidate to skim through on the first pass, while having detailed rules where you’d expect them. Whenever possible, provide specific examples.\n\nInstructions are written in Markdown, which provides a lot of tools for formatting text. Use it judiciously, especially section headers, lists, code delimiters (both inline and blocks), bold for highlighting important terms, etc.\n\n### Multiple Language Code Blocks\nThe instructions renderer has the ability to render specific code sections based on the currently selected language. If you are using multiple languages, and have code examples, make sure to include the examples in each language, like so:\n\n![Screen Shot 2019-07-03 at 11.10.56 AM](//images.ctfassets.net/4ol5sgskowtw/2JGPB0JBCAqlRJIbR52Vlo/f04547f7db775663ae56d86a8b7de02f/Screen_Shot_2019-07-03_at_11.10.56_AM.png)\n\n## On Naming & Formatting\nIt’s easy to simply call everything Challenge or solution(), but using proper naming helps the candidate avoid simple mistakes. Make sure you treat the challenge as if it's real, production code—just as you expect of the candidate.\n\nThis also means that all your examples are properly formatted, so the reviewer can see if the candidate tried to follow the example code formatting.\n\n## Provide Setup Code\nIn almost all instances, you should have *some* setup code. If you have a specific method, make sure you include the template for that method. If you are building up something more complex, make sure you provide the basic framework for the candidate.\n\nThis helps reduce the time it takes to get started significantly. When only provided a blank editor and instructions, the candidate has a lot more work to get started than necessary.\n\n## Cover Testing Goals\nOnce you have a basic challenge built, you need to make sure you have a strong set of tests for that challenge.\n\nEvery challenge should have:\n\n- Thorough coverage of the core concepts. Test different inputs and outputs, with any edge cases you think are important.\n- Proper test design. Make sure you use the testing frameworks test grouping, such as describe and it blocks.\n- Prefer more individual tests over multiple tests within a block. This gives a more refined score, by providing more overall “points”.\n- Use detailed assertions. Whenever possible, make sure to provide both the expected and actual output.\n- Whenever possible, make sure tests describe the input and expected output. This is especially important for more complex data, as reviewing (for example) two complex JSON blobs is very tedious.\n- Tests should build up in complexity. It’s easier for the candidate to solve the simple cases and then build on edge case handling, allowing them to focus on building up the solution, rather than having to get everything right at once.\n- If practical, include a block of randomized tests. Randomized tests help reduce the risk of cheating by simply returning the expected answer based on the input order. Note: these should never replace the standard tests.\n\nOther good testing hints:\n\nUse the output to render more complex data in helpful ways. For example, you can generate graphics using `<canvas>` or render input and output data in ways that can help the candidate find mistakes.\nBe smart about tests — you can write methods to help reduce repetition in your tests.\nYou can use the *Preloaded* section to lock down the environment, or to provide preloaded code or data to the candidate before their code runs.\n\n## Provide Candidate Tests\nAnother easy thing to ignore is providing sample tests for the candidate. These are critical, because without some sample tests, it’s often much harder for the candidate to know how to begin setting up those tests.\n\nUsually you’ll write the full test suite first, then copy them over the sample and remove a portion of them. However, make sure to provide enough sample testing coverage that the candidate can expand upon the setup if they need.\n\n## Help Interpret the Results\nAs the creator of the challenge, you’ll have the best insight into the goals of the challenge. Once you have the overall challenge complete, make sure you write up a guide for interpreting the results, under the *Purpose* field.\n\nThis should explain things like:\n\n- What were the overall goals? Be specific in what was being tested, and how.\n- What are some things to look out for from stand out candidates?\n- What red flags should there be from poor candidates?\n\nYou can avoid overly obvious details (code quality, comments, documentation, etc), unless those are part of the specific testing goals.\n\nHave more questions? Reach out to us at team@qualified.io","richBody":null,"description":"In this guide, we’ll explore general concepts, goals, and tips for creating challenges for the Qualified Candidate Assess system. If you do not know what an Assessment is or how to build one be sure to read over our prior Product Blog Posts.\n","hideHero":true,"publishDate":"2018-07-17T00:00-07:00"},{"prettyDate":"Jul 12, 2018","title":"How To Build A Great Coding Assessment","href":"https://www.qualified.io/blog/posts/how-to-build-a-great-coding-assessment","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/7ecxNtc09rld0iiLhIyRRd/c666b785bc6f4917e2e7440482b3a074/QualifiedAssessmentHero.png?w=100&q=1","length":"4 min read","excerpt":"In this guide, we'll explore general concepts, goals, and tips for outlining a great assessment for any Qualified Candidate.\n","collection":"Qualified","slug":"how-to-build-a-great-coding-assessment","author":"Jake Hoffner","htmlContent":"<p>In this guide, we'll explore general concepts, goals, and tips for outlining a great assessment for any Qualified Candidate. Last month we outlined the difference between an assessment and challenge. This month we are narrowing in on how to create a great Assessment.</p>\n<p>Great assessments tend to have some similar features. Here is a guide to help you build a sturdy framework for an effective assessment.</p>\n<p>Some assessments are intended for <em>Prescreening</em>, where we simply want to filter out poor performers quickly. Others are intended for deeper exploration of a candidate's skills. A third type is intended for live interviews, where the interviewer is working with the candidate directly.</p>\n<ul>\n<li><strong>Prescreens</strong> should be short and fairly simple. They shouldn't be solvable simply with a Google search, because we actually would prefer to fail the majority of weaker candidates.</li>\n<li><strong>Take Home assessments</strong> are usually longer, and designed to test domain-specific knowledge deeply. They should still contain a strong set of automated testing, but it's OK to rely on some manual reviewing of the solution for final assessing.</li>\n<li><strong>Live Interview tests</strong> are not as common. While any assessment can be used in a live interview, a good live interview would purposefully be built to be a little more open-ended. Traditional algorithm-based assessments do well in live interviews, because there's more back-and-forth between the interviewer and the candidate.</li>\n</ul>\n<h1>Plan Around an Overall Testing&nbsp;Goal</h1>\n<p>Before you begin writing code, it helps to come up with an overall plan. Rather than try to build a test from the bottom up, look at the overall assessment from the top-down. This will help ensure the assessment is doing a good job at testing its intended goal - without missing key functionality or getting overly complex.</p>\n<p>Some examples would be:</p>\n<ul>\n<li>Test a specific framework or technology (e.g., AngularJS or Ruby on Rails)</li>\n<li>Test toward a specific skill level (e.g., Junior vs Senior)</li>\n<li>Test for general knowledge vs domain specific knowledge</li>\n</ul>\n<h1>Determine What Concepts Should be&nbsp;Tested</h1>\n<p>Once you have your overall theme and goals narrowed down, then you should create a list of all the facets that need to be tested. You want to make sure your final assessment does a decent job of testing these features, and doesn't make assumptions or forget to include challenges &amp; tests for key concepts.</p>\n<p>A general flow that might work is:</p>\n<ol>\n<li>\n<p>Write down a decent sized list of everything that could be tested.</p>\n</li>\n<li>\n<p>Organize the concepts</p>\n</li>\n</ol>\n<ul>\n<li>Some concepts will be tested without any extra effort (core to the framework or language being tested)</li>\n<li>Some concepts will need to be called out specifically, because they are either edge cases, or good at highlighting specific skills</li>\n<li>Group similar concepts together when possible, so you can reduce the number of steps</li>\n</ul>\n<ol start=\"3\">\n<li>Reduce the set to something reasonable</li>\n</ol>\n<ul>\n<li>Aim for around a dozen strong concepts, which can reasonably be grouped into 3–4 challenges</li>\n</ul>\n<p>Now you should have a mental model of what you need to test, which can help come up with a theme to build a \"testing story\" around.</p>\n<h1>Make It Feel&nbsp;Real</h1>\n<p>The best assessments make the candidate feel like they are actually accomplishing something. Even if the end result is only a partial product, it's better to have built something that feels like it could be the basis for a real application, than just to work with generic terms.</p>\n<p>Some examples:</p>\n<ul>\n<li>A media library with different types of items in the catalog</li>\n<li>An online store of some kind</li>\n<li>A virtual game lobby</li>\n</ul>\n<p>Things to avoid:</p>\n<ul>\n<li>Using generic terms like Foo or Bar to describe objects</li>\n</ul>\n<p>Overused generic programs can be lame too, such as:</p>\n<ul>\n<li>A ToDo list</li>\n<li>A Chat Room</li>\n<li>A Twitter-like app</li>\n</ul>\n<p>If you want to use these as a base, try to make sure there's enough to it to make it interesting beyond the generic \"example program\" level.</p>\n<h1>Aim For a Comfortable Amount of&nbsp;Time</h1>\n<p>In most cases, the overall assessment should be something that can be completed within a couple of hours max. It depends on the type of assessment you are building, as well. Prescreens usually take between 20 minutes and an hour, while take-home's are usually solvable in 1 to 3 hours.</p>\n<p>Just remember to put yourself in the candidate's shoes. While they are applying for a job, they might not have the time to spend an entire day solving complex tests if they don't feel reasonably confident that they can get the job.</p>\n<h1>Try a Challenge Series</h1>\n<p>In some cases, an assessment can be broken up into a series of challenges where each builds upon the previous. This can create a more satisfying experience for the candidate, as they aren't forced to start each step from scratch.</p>\n<p>This isn't possible for every type of assessment, but when it is, it can enable testing much deeper knowledge, too, as the candidate will need to be able to work with their own code and refactor or expand upon it as the specification grows.</p>\n<p>In sum, we can say creating a great assessment takes a bit of planning before you start to put it all together. We're here to help you do that. Want to know how to create a great challenge? Stay tuned for next week's Product Blog.</p>\n","tags":null,"body":"In this guide, we'll explore general concepts, goals, and tips for outlining a great assessment for any Qualified Candidate. Last month we outlined the difference between an assessment and challenge. This month we are narrowing in on how to create a great Assessment.\n\nGreat assessments tend to have some similar features. Here is a guide to help you build a sturdy framework for an effective assessment.\n\nSome assessments are intended for *Prescreening*, where we simply want to filter out poor performers quickly. Others are intended for deeper exploration of a candidate's skills. A third type is intended for live interviews, where the interviewer is working with the candidate directly.\n\n- __Prescreens__ should be short and fairly simple. They shouldn't be solvable simply with a Google search, because we actually would prefer to fail the majority of weaker candidates.\n- __Take Home assessments__ are usually longer, and designed to test domain-specific knowledge deeply. They should still contain a strong set of automated testing, but it's OK to rely on some manual reviewing of the solution for final assessing.\n- __Live Interview tests__ are not as common. While any assessment can be used in a live interview, a good live interview would purposefully be built to be a little more open-ended. Traditional algorithm-based assessments do well in live interviews, because there's more back-and-forth between the interviewer and the candidate.\n\n# Plan Around an Overall Testing Goal\nBefore you begin writing code, it helps to come up with an overall plan. Rather than try to build a test from the bottom up, look at the overall assessment from the top-down. This will help ensure the assessment is doing a good job at testing its intended goal - without missing key functionality or getting overly complex.\n\nSome examples would be:\n\n- Test a specific framework or technology (e.g., AngularJS or Ruby on Rails)\n- Test toward a specific skill level (e.g., Junior vs Senior)\n- Test for general knowledge vs domain specific knowledge\n\n# Determine What Concepts Should be Tested\nOnce you have your overall theme and goals narrowed down, then you should create a list of all the facets that need to be tested. You want to make sure your final assessment does a decent job of testing these features, and doesn't make assumptions or forget to include challenges & tests for key concepts.\n\nA general flow that might work is:\n\n1. Write down a decent sized list of everything that could be tested.\n\n2. Organize the concepts\n  - Some concepts will be tested without any extra effort (core to the framework or language being tested)\n  - Some concepts will need to be called out specifically, because they are either edge cases, or good at highlighting specific skills\n  - Group similar concepts together when possible, so you can reduce the number of steps\n\n3. Reduce the set to something reasonable\n  - Aim for around a dozen strong concepts, which can reasonably be grouped into 3–4 challenges\n\nNow you should have a mental model of what you need to test, which can help come up with a theme to build a \"testing story\" around.\n\n# Make It Feel Real\nThe best assessments make the candidate feel like they are actually accomplishing something. Even if the end result is only a partial product, it's better to have built something that feels like it could be the basis for a real application, than just to work with generic terms.\n\nSome examples:\n- A media library with different types of items in the catalog\n- An online store of some kind\n- A virtual game lobby\n\nThings to avoid:\n- Using generic terms like Foo or Bar to describe objects\n\nOverused generic programs can be lame too, such as:\n- A ToDo list\n- A Chat Room\n- A Twitter-like app\n\nIf you want to use these as a base, try to make sure there's enough to it to make it interesting beyond the generic \"example program\" level.\n\n# Aim For a Comfortable Amount of Time\nIn most cases, the overall assessment should be something that can be completed within a couple of hours max. It depends on the type of assessment you are building, as well. Prescreens usually take between 20 minutes and an hour, while take-home's are usually solvable in 1 to 3 hours.\n\nJust remember to put yourself in the candidate's shoes. While they are applying for a job, they might not have the time to spend an entire day solving complex tests if they don't feel reasonably confident that they can get the job.\n\n# Try a Challenge Series\nIn some cases, an assessment can be broken up into a series of challenges where each builds upon the previous. This can create a more satisfying experience for the candidate, as they aren't forced to start each step from scratch.\n\nThis isn't possible for every type of assessment, but when it is, it can enable testing much deeper knowledge, too, as the candidate will need to be able to work with their own code and refactor or expand upon it as the specification grows.\n\nIn sum, we can say creating a great assessment takes a bit of planning before you start to put it all together. We're here to help you do that. Want to know how to create a great challenge? Stay tuned for next week's Product Blog.","richBody":null,"description":"In this guide, we'll explore general concepts, goals, and tips for outlining a great assessment for any Qualified Candidate.","hideHero":true,"publishDate":"2018-07-12T00:00-07:00"},{"prettyDate":"May 15, 2018","title":"What Is The Difference Between An Assessment And A Challenge?","href":"https://www.qualified.io/blog/posts/what-is-the-difference-between-an-assessment-and-a-challenge","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/5Lpgq7QiClptr8npVkfneQ/3de4febebf9681831232a3aa112ca0c0/QualifiedDifferenceHero.png?w=100&q=1","length":"2 min read","excerpt":"At the core of our Product, there is the ability to assess a candidates skill. The way that we do this is through the creation of assessments and challenges. This is how we define, structure, and have them work together.\n","collection":"Qualified","slug":"what-is-the-difference-between-an-assessment-and-a-challenge","author":"Jake Hoffner","htmlContent":"<p>At the core of our Product, there is the ability to assess a candidates skill. The way that we do this is through the creation of assessments and challenges. This is how we define, structure, and have them work together.</p>\n<h1>What is an Assessment?</h1>\n<p>An assessment contains a set of challenges to be solved by the candidate. Think of it like a task list. You want your candidates to complete (or at least try to complete) all of the tasks on a list. An assessment is that list.</p>\n<p>Typically assessments are focused on a group of tasks that are related to a specific but broad goal. That goal may be things like \"testing general coding ability\", \"front-end development'\", \"data science\", etc.</p>\n<p>An assessment can optionally be given a time limit, and once a candidate starts the assessment, they must complete it before the time limit is reached.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/5Lpgq7QiClptr8npVkfneQ/3de4febebf9681831232a3aa112ca0c0/QualifiedDifferenceHero.png\" alt=\"QualifiedDifferenceHero\"></p>\n<h1>What is a Challenge?</h1>\n<p>A challenge is a specific task that should be performed within an assessment. Qualified supports multiple types of challenges:</p>\n<ul>\n<li><strong>Code Challenges</strong> - which test a developer's ability to write code, solve problems and follow requirements. These challenges involve writing code. Qualified supports two kinds of coding challenges, <strong>classic</strong> code challenges, and <strong>project</strong> code challenges.</li>\n<li><strong>Q&amp;A Challenges</strong> - which test a developers knowledge, and can also be used to collect information from them, like how you would in a survey. These challenges involve answering one or more questions in the form of multiple choice answers or freely written text.</li>\n</ul>\n<p>A challenge typically has a more specific goal, such as solving a specific problem, or answering questions about a specific focus area, such as CSS related quiz questions of a front-end developer focused assessment.</p>\n<p>Challenges can be given estimated times of completion, but do not have specific time limits themselves.</p>\n<p>Have questions about making your own assessments and challenges? Contact us at <a href=\"/cdn-cgi/l/email-protection#93e7f6f2fed3e2e6f2fffaf5faf6f7bdfafc\"><span class=\"__cf_email__\" data-cfemail=\"7b0f1e1a163b0a0e1a17121d121e1f551214\">[email&nbsp;protected]</span></a> or share a favorite pre-made assessment or challenge below so others can learn from you!</p>\n","tags":null,"body":"At the core of our Product, there is the ability to assess a candidates skill. The way that we do this is through the creation of assessments and challenges. This is how we define, structure, and have them work together.\n\n# What is an Assessment?\nAn assessment contains a set of challenges to be solved by the candidate. Think of it like a task list. You want your candidates to complete (or at least try to complete) all of the tasks on a list. An assessment is that list.\n\nTypically assessments are focused on a group of tasks that are related to a specific but broad goal. That goal may be things like \"testing general coding ability\", \"front-end development'\", \"data science\", etc.\n\nAn assessment can optionally be given a time limit, and once a candidate starts the assessment, they must complete it before the time limit is reached.\n\n![QualifiedDifferenceHero](//images.ctfassets.net/4ol5sgskowtw/5Lpgq7QiClptr8npVkfneQ/3de4febebf9681831232a3aa112ca0c0/QualifiedDifferenceHero.png)\n\n# What is a Challenge?\nA challenge is a specific task that should be performed within an assessment. Qualified supports multiple types of challenges:\n\n- __Code Challenges__ - which test a developer's ability to write code, solve problems and follow requirements. These challenges involve writing code. Qualified supports two kinds of coding challenges, __classic__ code challenges, and __project__ code challenges.\n- __Q&A Challenges__ - which test a developers knowledge, and can also be used to collect information from them, like how you would in a survey. These challenges involve answering one or more questions in the form of multiple choice answers or freely written text.\n\nA challenge typically has a more specific goal, such as solving a specific problem, or answering questions about a specific focus area, such as CSS related quiz questions of a front-end developer focused assessment.\n\nChallenges can be given estimated times of completion, but do not have specific time limits themselves.\n\nHave questions about making your own assessments and challenges? Contact us at team@qualified.io or share a favorite pre-made assessment or challenge below so others can learn from you!","richBody":null,"description":"At the core of our Product, there is the ability to assess a candidates skill. The way that we do this is through the creation of assessments and challenges. This is how we define, structure, and have them work together.","hideHero":true,"publishDate":"2018-05-15T00:00-07:00"},{"prettyDate":"","title":"Hiring Software Developers Cheat Sheet","href":"https://www.qualified.io/blog/posts/hiring-software-developers-cheat-sheet","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/4mZ8W90rI4742slLsEU78j/e5ea8b538a7a14c85c814c3ef93f0caf/1_YtGIlSRx5nxT0B9Sy8lZ0A.jpeg?w=100&q=1","length":"","excerpt":"Now is the best time ever to be a software developer. Check out this cheat sheet to help you identify the best of the best.\n","collection":"Hiring","slug":"hiring-software-developers-cheat-sheet","htmlContent":"<p>Now is the best time ever to be a software developer. With a high base salary of $90K+, great benefits packages, and perks like catered meals, flexible schedules, and remote work opportunities, companies are pulling out all the stops to woo talented developers. Even still, tech organizations both large and small are having trouble filling out their company roster. According to the report State of Software Development 2018 (SSD 2018), of 300+ surveyed industry participants, a whopping 33.55% of managers say that hiring talent is the biggest challenge facing software development — their number one issue by far.</p>\n<p>So how can your company improve its chances in a competitive hiring market? Check out our cheat sheet below for seven tips on landing the best and brightest software developers!</p>\n<h1>The Cheat Sheet</h1>\n<ol>\n<li><strong>Create an enjoyable candidate experience:</strong> Gone are the days of nerve-wracking interviews and stressful hiring processes. Candidates place a premium on the hiring experience as a positive or negative experience can change their opinion of a company for the better or worse. And with 25% of SSD 2018 participants saying employee referrals is the most efficient way of hiring talent (more than any other method), it’s important that your team members have a great candidate experience as they are your company’s strongest ambassadors, helping to fill new positions that open up.</li>\n<li><strong>Establish a smooth interview process:</strong> An extension of tip 1 above, it’s important to implement an efficient and frictionless interview process between the candidate and all stakeholders. Properly prep each candidate for their interviews with expectations so they can be on their A-game, and ensure interviews are timely as candidates are likely under consideration at multiple companies. It’s a job seeker’s market, so by implementing a smooth interview process, you can give your company an edge over competitors.</li>\n<li><strong>Maintain clear communication:</strong> If you were considering multiple companies, would you pick the one that was on the ball about communicating the timeline of the candidate process from start to finish, or the company that left you in the dark? Easy answer. By maintaining clear communication of the process schedule, which assessments will be made and how they will be delivered, which skills will be tested, and conveying what is important to the company and culture, you present your organization as an attractive, well-run machine.</li>\n<li><strong>Reveal the relevance:</strong> The candidate experience is packed with interviews and assessments as the company tries to evaluate each developer under consideration, but are you sure the candidate understands the who/what/why of each step? Get the most out of your candidate by disclosing the relevance of each person they meet and why they’re meeting with them. Likewise, the candidates should understand how the assessments relate to the position they are applying for (Qualified can help!).</li>\n<li><strong>Implement a consistent interview structure:</strong> Your company may see dozens of candidates for each open position, so how do the developers stack up against one another? There’s no way to really know unless you implement an interview structure that is consistent across all candidates by using the same questions and assessments. This standardization will help you compare the strengths and weakness of each candidate so that the hiring team and stakeholders can make a well-informed decision.</li>\n<li><strong>Allow room for flexibility in hiring practices:</strong> Are you looking to hire an entry-level, junior, or senior developer? The demands of the position may require you to tweak your hiring practices in order to court the talent you need. Since positions differ, allow flexibility to adjust your recruiting process so you can find the best match for each open role.</li>\n<li><strong>Understand the culture:</strong> 39.6% of SSD 2018 participants report culture fit as being the most important hiring criterion (second only to willingness to learn at 44.5%). From a company standpoint, it’s critical to know your own dev culture in order to evaluate whether a candidate will make a seamless fit. Even if your company is looking for diverse mindsets, you must have a firm grasp of the culture to help gauge different perspectives. It’s equally as important to set up resources for candidates to learn about your company and culture so that they can determine whether the organization is a place where they can make a positive impact.</li>\n</ol>\n<p>When it comes to assessing developer skills, Qualified can help. Demand for brilliant software developers are outpacing supply. Your company can position itself for a fast, optimized talent recruitment process by implementing the tips from the cheat sheet above- or by making sure you know what competencies you are hiring for (another thing we support). Our online platform streamlines the candidate process by quickly identifying the best technical candidates through code assessments, pair-programming interviews, and personal sessions of outlining candidate competencies. Send us a message to learn more.</p>\n<hr>\n<h3>References:</h3>\n<ul>\n<li><a href=\"https://www.glassdoor.com/Salaries/software-developer-salary-SRCH_KO0,18.htm\">https://www.glassdoor.com/Salaries/software-developer-salary-SRCH_KO0,18.htm</a></li>\n<li><a href=\"https://codingsans.com/uploads/landing/State-of-Software-Development-2018_final.pdf\">https://codingsans.com/uploads/landing/State-of-Software-Development-2018_final.pdf</a></li>\n</ul>\n","tags":null,"body":"Now is the best time ever to be a software developer. With a high base salary of $90K+, great benefits packages, and perks like catered meals, flexible schedules, and remote work opportunities, companies are pulling out all the stops to woo talented developers. Even still, tech organizations both large and small are having trouble filling out their company roster. According to the report State of Software Development 2018 (SSD 2018), of 300+ surveyed industry participants, a whopping 33.55% of managers say that hiring talent is the biggest challenge facing software development — their number one issue by far.\n\nSo how can your company improve its chances in a competitive hiring market? Check out our cheat sheet below for seven tips on landing the best and brightest software developers!\n\n# The Cheat Sheet\n\n1. **Create an enjoyable candidate experience:** Gone are the days of nerve-wracking interviews and stressful hiring processes. Candidates place a premium on the hiring experience as a positive or negative experience can change their opinion of a company for the better or worse. And with 25% of SSD 2018 participants saying employee referrals is the most efficient way of hiring talent (more than any other method), it’s important that your team members have a great candidate experience as they are your company’s strongest ambassadors, helping to fill new positions that open up.\n1. **Establish a smooth interview process:** An extension of tip 1 above, it’s important to implement an efficient and frictionless interview process between the candidate and all stakeholders. Properly prep each candidate for their interviews with expectations so they can be on their A-game, and ensure interviews are timely as candidates are likely under consideration at multiple companies. It’s a job seeker’s market, so by implementing a smooth interview process, you can give your company an edge over competitors.\n1. __Maintain clear communication:__ If you were considering multiple companies, would you pick the one that was on the ball about communicating the timeline of the candidate process from start to finish, or the company that left you in the dark? Easy answer. By maintaining clear communication of the process schedule, which assessments will be made and how they will be delivered, which skills will be tested, and conveying what is important to the company and culture, you present your organization as an attractive, well-run machine.\n1. __Reveal the relevance:__ The candidate experience is packed with interviews and assessments as the company tries to evaluate each developer under consideration, but are you sure the candidate understands the who/what/why of each step? Get the most out of your candidate by disclosing the relevance of each person they meet and why they’re meeting with them. Likewise, the candidates should understand how the assessments relate to the position they are applying for (Qualified can help!).\n1. __Implement a consistent interview structure:__ Your company may see dozens of candidates for each open position, so how do the developers stack up against one another? There’s no way to really know unless you implement an interview structure that is consistent across all candidates by using the same questions and assessments. This standardization will help you compare the strengths and weakness of each candidate so that the hiring team and stakeholders can make a well-informed decision.\n1. __Allow room for flexibility in hiring practices:__ Are you looking to hire an entry-level, junior, or senior developer? The demands of the position may require you to tweak your hiring practices in order to court the talent you need. Since positions differ, allow flexibility to adjust your recruiting process so you can find the best match for each open role.\n1. __Understand the culture:__ 39.6% of SSD 2018 participants report culture fit as being the most important hiring criterion (second only to willingness to learn at 44.5%). From a company standpoint, it’s critical to know your own dev culture in order to evaluate whether a candidate will make a seamless fit. Even if your company is looking for diverse mindsets, you must have a firm grasp of the culture to help gauge different perspectives. It’s equally as important to set up resources for candidates to learn about your company and culture so that they can determine whether the organization is a place where they can make a positive impact.\n\nWhen it comes to assessing developer skills, Qualified can help. Demand for brilliant software developers are outpacing supply. Your company can position itself for a fast, optimized talent recruitment process by implementing the tips from the cheat sheet above- or by making sure you know what competencies you are hiring for (another thing we support). Our online platform streamlines the candidate process by quickly identifying the best technical candidates through code assessments, pair-programming interviews, and personal sessions of outlining candidate competencies. Send us a message to learn more.\n\n___________________________________________________________________\n\n### References:\n\n- https://www.glassdoor.com/Salaries/software-developer-salary-SRCH_KO0,18.htm\n- https://codingsans.com/uploads/landing/State-of-Software-Development-2018_final.pdf","richBody":null,"description":"Now is the best time ever to be a software developer. Check out this cheat sheet to help you identify the best of the best.","hideHero":false,"publishDate":"2018-02-04T00:00-07:00"},{"prettyDate":"Dec 12, 2017","title":"7 Traits To Look For When Hiring Software Developers","href":"https://www.qualified.io/blog/posts/7-traits-to-look-for-when-hiring-software-developers","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/2bH78xNGmrKsd0iH3oxSlY/7f17cff773fc8f08831d73458d86ac14/QualifiedHiringHero.jpeg?w=100&q=1","length":"5 min read","excerpt":"Hiring the right engineer for the job is critical to a company's success. So, how can we ensure that we are finding the perfect person for the position?\n","collection":"Hiring","slug":"7-traits-to-look-for-when-hiring-software-developers","author":"Jake Hoffner","htmlContent":"<p>Hiring the right engineer for the job is critical to a company's success. So, how can we ensure that we are finding the perfect person for the position? While testing a potential hire's coding ability should be primary step in assessing fit, the following seven characteristics will be key in finding your perfect developer beyond the technical skills.</p>\n<h1>Passionate</h1>\n<p>A programmer who is passionate about his or her work will be 10x more effective than someone who is in it just for the paycheck. A passionate programmer may not necessarily consider programming both their job and their hobby, but they often do. They like to explore new technologies and concepts, and are constantly pushing their limits, not because they have to, but because they enjoy the challenge. They will often spend much of their personal time learning technologies they are excited about.</p>\n<h1>Focus - They keep their eye on the ball</h1>\n<p>A programmer who understands why they are doing what they are doing will stay focused and on task. You want them to be generally passionate about their field, but you also want to know they will stay focused on the short and long term goals at hand. You don't want coders who find themselves on tangents, trying to implement the latest and greatest, but unnecessary, technology into the codebase - or trying to over-optimize things they are interested in that aren't a high priority for the team.</p>\n<h1>Fast Self-Learner</h1>\n<p>The state of the art of programming is constantly evolving. Programmers need to demonstrate that they can pick up new technologies, techniques and best practices quickly. Once a developer understands the core concepts of programming, they should be able to build off of that knowledge. If a programmer can't pick up any new programming skills on their own without having someone teach them, they aren't going to last long. Staying up to date with cutting edge technology is pertinent to a company's advancement, innovation and success.</p>\n<h1>(Sub-)Domain Expert</h1>\n<p>Most companies these days are not hiring what you would call \"generalists\". Generalists are developers who have a solid foundation in computer science and a broad knowledge across many different types of technologies, often with one domain that they know best. For example you may have a generalist web developer who can do both front-end (UI) and back-end (business logic) development. While generalists are great utility players, they will often not be as well informed of all of the latest technologies and techniques. Most companies are looking toward more specialized talent. Advances in development are happening so rapidly that it has become increasingly difficult to stay on top of latest develops within a specific domain. Of course, it's still incredibly important for a developer to have solid fundamentals and a strong understanding of their domain, but they should also be an expert on the specific technology sub-domain they are being considered for. A web specialist would likely know much more than a web generalist about front-end development, but little to nothing about back-end development. This is why testing for specific on-the-job skills is vital in hiring a developer who will most effectively contribute to your company's specialized demands.</p>\n<h1>Team Player</h1>\n<p>Programming is a form of reproducible logic/thought, therefore developers will invariably have their own style. You will rarely see two developers come up with the same exact solution, or possibly even the same general approach, to the same complex problem. Programmers need to be able to show that they can adapt to the standards of a team, and write code that takes into account others potentially needing to work on it later. They should write code that makes logical sense to others and isn't overly specific to their own unique style of organization and thought. A new hire needs to understand how an existing codebase works and how to add to the collective work of a team, while keeping concepts consistent. They should write documentation that helps their colleagues understand their work. They should be able to present their thoughts and take constructive feedback without taking it personally. This is why when hiring a new developer, it is vital to be able to watch their process when writing their code in order to get insight into their unique approach and feel into whether it will fit into the existing teams'.</p>\n<h1>Problem Solver</h1>\n<p>Problem solving is at the core of what a programmer does. This involves a few aspects - first, engineers need to be able to prove that they can quickly identify the cause to an issue. Next, they need to show determination and efficiency in solving it. This might be a bug with an existing set of code, a scalability problem regarding how to handle increased demand of a product, a maintainability matter when dealing with increasing complexity of code, etc. Not only does the problem need to be located efficiently, but the developer must also be able to solve it in a clear and concise way.</p>\n<h1>Craftsman</h1>\n<p>Great programmers take pride in their craft. They write efficient code that is well thought out and well tested. They sweat the details, while still aware that they need to deliver on time. Craftsmanship is all about the quality of the product. There is a big difference between simply being skilled, and executing that skill with creativity and dexterity.</p>\n<p>It isn't always easy finding the right developers, but when you know what to look for and to test for, you'll be 10x closer to building your perfect team.</p>\n","tags":null,"body":"Hiring the right engineer for the job is critical to a company's success. So, how can we ensure that we are finding the perfect person for the position? While testing a potential hire's coding ability should be primary step in assessing fit, the following seven characteristics will be key in finding your perfect developer beyond the technical skills.\n\n# Passionate\nA programmer who is passionate about his or her work will be 10x more effective than someone who is in it just for the paycheck. A passionate programmer may not necessarily consider programming both their job and their hobby, but they often do. They like to explore new technologies and concepts, and are constantly pushing their limits, not because they have to, but because they enjoy the challenge. They will often spend much of their personal time learning technologies they are excited about.\n\n# Focus - They keep their eye on the ball\nA programmer who understands why they are doing what they are doing will stay focused and on task. You want them to be generally passionate about their field, but you also want to know they will stay focused on the short and long term goals at hand. You don't want coders who find themselves on tangents, trying to implement the latest and greatest, but unnecessary, technology into the codebase - or trying to over-optimize things they are interested in that aren't a high priority for the team.\n\n# Fast Self-Learner\nThe state of the art of programming is constantly evolving. Programmers need to demonstrate that they can pick up new technologies, techniques and best practices quickly. Once a developer understands the core concepts of programming, they should be able to build off of that knowledge. If a programmer can't pick up any new programming skills on their own without having someone teach them, they aren't going to last long. Staying up to date with cutting edge technology is pertinent to a company's advancement, innovation and success.\n\n# (Sub-)Domain Expert\nMost companies these days are not hiring what you would call \"generalists\". Generalists are developers who have a solid foundation in computer science and a broad knowledge across many different types of technologies, often with one domain that they know best. For example you may have a generalist web developer who can do both front-end (UI) and back-end (business logic) development. While generalists are great utility players, they will often not be as well informed of all of the latest technologies and techniques. Most companies are looking toward more specialized talent. Advances in development are happening so rapidly that it has become increasingly difficult to stay on top of latest develops within a specific domain. Of course, it's still incredibly important for a developer to have solid fundamentals and a strong understanding of their domain, but they should also be an expert on the specific technology sub-domain they are being considered for. A web specialist would likely know much more than a web generalist about front-end development, but little to nothing about back-end development. This is why testing for specific on-the-job skills is vital in hiring a developer who will most effectively contribute to your company's specialized demands.\n\n# Team Player\nProgramming is a form of reproducible logic/thought, therefore developers will invariably have their own style. You will rarely see two developers come up with the same exact solution, or possibly even the same general approach, to the same complex problem. Programmers need to be able to show that they can adapt to the standards of a team, and write code that takes into account others potentially needing to work on it later. They should write code that makes logical sense to others and isn't overly specific to their own unique style of organization and thought. A new hire needs to understand how an existing codebase works and how to add to the collective work of a team, while keeping concepts consistent. They should write documentation that helps their colleagues understand their work. They should be able to present their thoughts and take constructive feedback without taking it personally. This is why when hiring a new developer, it is vital to be able to watch their process when writing their code in order to get insight into their unique approach and feel into whether it will fit into the existing teams'.\n\n# Problem Solver\nProblem solving is at the core of what a programmer does. This involves a few aspects - first, engineers need to be able to prove that they can quickly identify the cause to an issue. Next, they need to show determination and efficiency in solving it. This might be a bug with an existing set of code, a scalability problem regarding how to handle increased demand of a product, a maintainability matter when dealing with increasing complexity of code, etc. Not only does the problem need to be located efficiently, but the developer must also be able to solve it in a clear and concise way.\n\n# Craftsman\nGreat programmers take pride in their craft. They write efficient code that is well thought out and well tested. They sweat the details, while still aware that they need to deliver on time. Craftsmanship is all about the quality of the product. There is a big difference between simply being skilled, and executing that skill with creativity and dexterity.\n\nIt isn't always easy finding the right developers, but when you know what to look for and to test for, you'll be 10x closer to building your perfect team.","richBody":null,"description":"Hiring the right engineer for the job is critical to a company's success. So, how can we ensure that we are finding the perfect person for the position?","hideHero":false,"publishDate":"2017-12-12T00:00-07:00"},{"prettyDate":"","title":"Qualified Featured on Inc. — 4 Ways to Recruit Better Talent","href":"https://www.qualified.io/blog/posts/qualified-featured-on-inc-4-ways-to-recruit-better-talent","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/04hqki2Tw3RoE1IlZtLKw/62d6df93b9bda6d84f8a6a0dd6c271c9/1_buuOX8pmwFculP_3vRoi4A.png?w=100&q=1","length":"","excerpt":"Inc. explores how companies are evolving their hiring process for greater effectiveness. In their article, CEO of Qualified, Nathan Doctor, articulates the importance of testing real-world ability.\n","collection":"Hiring","slug":"qualified-featured-on-inc-4-ways-to-recruit-better-talent","htmlContent":"<p>Inc. explores how companies are evolving their hiring process for greater effectiveness. The article&nbsp;<a href=\"https://www.inc.com/andrew-medal/top-4-ways-companies-can-recruit-better-technical-talent.html\"><b>Top 4 Ways Companies Can Recruit Better Technical Talent</b></a><b>,&nbsp;</b>speaks to the impact of coding assessments and pair-programming on finding the highest quality talent. In it, CEO of Qualified, Nathan Doctor, articulates the importance of testing real-world ability.</p><p>We all know that on-boarding the right technical team is vital to the growth and innovation of operations within a company. Unfortunately, finding this talent has proved challenging and time consuming. Inc takes a look at 4 unique methods executives are applying in order to navigate these problems:</p><ol><li><p>Code Assessments</p></li><li><p>Virtual Interviewing</p></li><li><p>Improved Applicant Tracking Systems</p></li><li><p>Revamped Recruiting Mindsets</p></li></ol><p><a href=\"https://medium.com/@nathandoctor\">Nathan Doctor</a>, CEO of&nbsp;<a href=\"https://medium.com/@qualified\">Qualified</a>, speaks to what is arguably the most essential component in hiring an engineer — testing his or her code.</p><blockquote><p>“Code assessments evaluate candidates based on real software development skills in a modern coding environment, which results in hires with high on-the-job performance. Skills-based hiring implements consistent process and objective standards so companies can make data-driven decisions.”</p></blockquote><p>Qualified’s coding platform is bringing both ease and accuracy to the hiring process, as it is built to assess real-world coding performance. This allows for companies to test for true and accurate technical fit while weeding out any subjective bias inherent in other parts of the hiring process.</p><p>Alongside global virtual interviewing, more sophisticated applicant tracking systems, and evolved recruiting culture — innovative code assessments rank as one of the most valuable investments companies can make in their hiring process.</p>","tags":null,"body":"","richBody":"{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Inc. explores how companies are evolving their hiring process for greater effectiveness. The article \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://www.inc.com/andrew-medal/top-4-ways-companies-can-recruit-better-technical-talent.html\"},\"content\":[{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\"Top 4 Ways Companies Can Recruit Better Technical Talent\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[{\"type\":\"bold\"}],\"value\":\", \",\"nodeType\":\"text\"},{\"data\":{},\"marks\":[],\"value\":\"speaks to the impact of coding assessments and pair-programming on finding the highest quality talent. In it, CEO of Qualified, Nathan Doctor, articulates the importance of testing real-world ability.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"We all know that on-boarding the right technical team is vital to the growth and innovation of operations within a company. Unfortunately, finding this talent has proved challenging and time consuming. Inc takes a look at 4 unique methods executives are applying in order to navigate these problems:\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Code Assessments\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Virtual Interviewing\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Improved Applicant Tracking Systems\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Revamped Recruiting Mindsets\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"list-item\"}],\"nodeType\":\"ordered-list\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"\",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://medium.com/@nathandoctor\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Nathan Doctor\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\", CEO of \",\"nodeType\":\"text\"},{\"data\":{\"uri\":\"https://medium.com/@qualified\"},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Qualified\",\"nodeType\":\"text\"}],\"nodeType\":\"hyperlink\"},{\"data\":{},\"marks\":[],\"value\":\", speaks to what is arguably the most essential component in hiring an engineer — testing his or her code.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"“Code assessments evaluate candidates based on real software development skills in a modern coding environment, which results in hires with high on-the-job performance. Skills-based hiring implements consistent process and objective standards so companies can make data-driven decisions.”\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"blockquote\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Qualified’s coding platform is bringing both ease and accuracy to the hiring process, as it is built to assess real-world coding performance. This allows for companies to test for true and accurate technical fit while weeding out any subjective bias inherent in other parts of the hiring process.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"},{\"data\":{},\"content\":[{\"data\":{},\"marks\":[],\"value\":\"Alongside global virtual interviewing, more sophisticated applicant tracking systems, and evolved recruiting culture — innovative code assessments rank as one of the most valuable investments companies can make in their hiring process.\",\"nodeType\":\"text\"}],\"nodeType\":\"paragraph\"}],\"nodeType\":\"document\"}","description":"Inc. explores how companies are evolving their hiring process for greater effectiveness. In their article, CEO of Qualified, Nathan Doctor, articulates the importance of testing real-world ability.","hideHero":true,"publishDate":"2017-10-10T00:00-07:00"},{"prettyDate":"Mar 15, 2017","title":"Create coding assessments in multiple languages with the push of a button","href":"https://www.qualified.io/blog/posts/create-coding-assessments-in-multiple-languages-with-the-push-of-a-button","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/5aJEMh6HNB2V4wYChBFchv/4438b267119bf342f968c95c944b2efc/1_Q-U6HGECSCrK85wH96Xm8g.png?w=100&q=1","length":"6 min read","excerpt":"Unit test-driven code challenges are powerful and effective, although they need to be translated across programming languages. Now you can create custom challenges and generate multi-language support automatically — introducing the Language Generator.\n","collection":"Qualified","slug":"create-coding-assessments-in-multiple-languages-with-the-push-of-a-button","author":"Dan Nolan","htmlContent":"<p>At Qualified we believe in assessing developers in a modern coding environment and testing their code in an intuitive format. This is why we utilize fully-featured development environments, complete with unit testing, for our code challenges. Our IDE comes with a testing environment that integrates standard unit testing frameworks for each language. These language-specific testing frameworks (ie. Mocha for JavaScript and unittest for Python) allow developers to run in-depth tests and allow our skill assessments to test language and framework-specific abilities.</p>\n<p>This development environment provides developers an intuitive workflow and a familiarity to their favorite local IDE, resulting in immediate productivity and peak performance. The upside of using these powerful testing environments is that developers have more control, just as they would when coding in the workplace. It also allows them to debug the challenge much like they would in their own custom environment. There is no limit to what can be done in the environment since the tests are run inside the environment itself just like regular test specs would be.</p>\n<p>With all of this upside in language-specific testing environments, the power and flexibility also create potential drawbacks. For each coding challenge, test cases need to be written in the specific unit testing framework of the language it’s run in. This makes it time-consuming and difficult to translate challenges into other languages, as each new language needs it’s own set of unit tests. While some challenges, especially framework-specific ones, need to be written in a specific language, there are general algorithmic and computer science challenges that transcend language syntax. These challenges can be created in a language agnostic format simply by defining an entry point, some input and the expected output. Once we know those details, creating a challenge that is supported across every programming language should be as simple as pushing a button. This is why we built the Language Generator for code challenges.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/5aJEMh6HNB2V4wYChBFchv/4438b267119bf342f968c95c944b2efc/1_Q-U6HGECSCrK85wH96Xm8g.png\" alt=\"1*Q-U6HGECSCrK85wH96Xm8g\"></p>\n<h1>What is this Language Generator?</h1>\n<p>The Language Generator is a tool that allows code challenges on Qualified to support multiple programming languages instantly. Instead of writing unit tests for a custom code challenge in each language, simply create the challenge using our Code Challenge Language Generator and generate support across programming languages with the push of a button.</p>\n<h1>How does the Language Generator work?</h1>\n<p>Teams using Qualified can take advantage of the Language Generator to define their challenge in a language agnostic format that is then used to generate unit tests across languages. This format uses a single YAML configuration file to define entry points, return values, and inputs. This configuration file is then used to generate unit tests for the challenge in every language that the generator supports, extending native support for the challenge across languages.</p>\n<p>To use the Language Generator, simply start by designing a code challenge. Without thinking about the configuration, let’s begin by designing the code challenge itself, the problem, description, and what we want to assess. Typically the easiest way is to start designing it in a programming language that we know well.</p>\n<p>To explain the Language Generator let’s break it down through an example. Let’s take a look at one, the “Say Hello” challenge</p>\n<h2>Example: The “Say Hello” challenge</h2>\n<p>For our example let’s create a basic code challenge that requires a developer to write a simple function. We know JavaScript well and decide to start with that. So for our Say Hello challenge we want to have a function called sayHello which takes in a name and returns \"Hello [name]!\".</p>\n<p>So the setup code for the candidate might be:</p>\n<pre><code>function sayHello() {\n}\n</code></pre>\n<p>The test cases in Mocha might look something like this:</p>\n<pre><code>let assert = require(\"chai\").assert;\ndescribe('Challenge', function() {\n  it('says_hello', function() {\n    assert.deepEqual(sayHello(\"Qualified\"), \"Hello, Qualified!\");\n  });\n});\n</code></pre>\n<p>Essentially we’re checking to see if our input of a particular string matches our expected output of another string. We’ve gotten pretty far into designing this challenge, so let’s take a look at how the YAML configuration would be built:</p>\n<pre><code>entry_point: say_hello\nreturn_type: String\nparameters:\n  - name: name\n    type: String\ntest_cases:\n  - it: says_hello\n    assertions:\n      - input_arguments:\n        - type: String\n          value: Qualified\n        expected_output:\n          type: String\n          value: Hello, Qualified!\n  - it: handles_empty_input\n    assertions:\n      - input_arguments:\n        - type: String\n          value:\n        expected_output:\n          type: String\n          value: Hello there!\nexample_test_cases:\n  - it: basic_test\n    assertions:\n      - input_arguments:\n        - type: String\n          value: Qualified\n        expected_output:\n          type: String\n          value: Hello, Qualified!\n</code></pre>\n<p>Let’s break it down quick. So we’ve got our <code>entry_point</code> as <code>say_hello</code>.</p>\n<pre><code>entry_point: say_hello\n</code></pre>\n<p>Since this is translated into multiple languages it’s shown snake-cased here, but it will translate into the appropriate casing for each language. In JavaScript, it would become <code>sayHello</code> automatically.</p>\n<p>Notice we designated a <code>return_type</code> of String</p>\n<pre><code>return_type: String\n</code></pre>\n<p>This must be specified especially when translating into strong-typed languages.</p>\n<p>Next we have our <code>parameters</code></p>\n<pre><code>parameters:\n  - name: name\n    type: String\n</code></pre>\n<p>This is our list of parameters that will be sent to the entry point. Automatically the entry point is setup for the candidate so they understand what kind of parameters to expect and where to expect we’ll be sending them. In the example above we’re sending <code>sayHello</code> our string <code>name</code>.</p>\n<p>Finally we have our <code>test_cases</code> and <code>example_test_cases</code>. Example test cases are the tests available to the candidate immediately for testing. These are used to help the candidate get their feet wet and grow confident with the testing environment which may be new to them. The test cases are the ones they cannot see, but can be designed to send debugging information back to the candidate in order to lead them to the correct solution.</p>\n<p>Let’s take a look at the test_cases</p>\n<pre><code>test_cases:\n  - it: says_hello\n    assertions:\n      - input_arguments:\n        - type: String\n          value: Qualified\n        expected_output:\n          type: String\n          value: Hello, Qualified!\n  - it: handles_empty_input\n    assertions:\n      - input_arguments:\n        - type: String\n          value:\n        expected_output:\n          type: String\n          value: Hello there!\n</code></pre>\n<p>The configuration allows the challenge designer to create multiple it clauses and as many assertions as they would want within each clause. Each assertion can have unlimited input arguments, each with their own particular type and value. Then we can specify, based on those inputs, what the expected output should be.</p>\n<p>In JavaScript this configuration would translate out to:</p>\n<pre><code>let assert = require(\"chai\").assert;\ndescribe('Challenge', function() {\n  it('says_hello', function() {\n    assert.deepEqual(sayHello(\"Qualified\"), \"Hello, Qualified!\");\n  });\n  it('handles_empty_input', function() {\n    assert.deepEqual(sayHello(\"\"), \"Hello there!\");\n  });\n});\n</code></pre>\n<p>With that one configuration file, this challenge can be generated across all supported languages! That wraps it up for our simple “Say Hello” example. Now that we have get the format it’s time for you to try creating your own custom code challenge with the Language Generator.</p>\n<p>If you’re already on Qualified, get started by head to the Challenge section, clicking on “Create a Code Challenge”, and the Language Generator will appear in the sidebar. If you haven’t tried out <a href=\"http://Qualified.io\">Qualified.io</a> yet, head over and claim your free trial to try out creating code challenges with the Language Generator today!</p>\n","tags":null,"body":"At Qualified we believe in assessing developers in a modern coding environment and testing their code in an intuitive format. This is why we utilize fully-featured development environments, complete with unit testing, for our code challenges. Our IDE comes with a testing environment that integrates standard unit testing frameworks for each language. These language-specific testing frameworks (ie. Mocha for JavaScript and unittest for Python) allow developers to run in-depth tests and allow our skill assessments to test language and framework-specific abilities.\n\nThis development environment provides developers an intuitive workflow and a familiarity to their favorite local IDE, resulting in immediate productivity and peak performance. The upside of using these powerful testing environments is that developers have more control, just as they would when coding in the workplace. It also allows them to debug the challenge much like they would in their own custom environment. There is no limit to what can be done in the environment since the tests are run inside the environment itself just like regular test specs would be.\n\nWith all of this upside in language-specific testing environments, the power and flexibility also create potential drawbacks. For each coding challenge, test cases need to be written in the specific unit testing framework of the language it’s run in. This makes it time-consuming and difficult to translate challenges into other languages, as each new language needs it’s own set of unit tests. While some challenges, especially framework-specific ones, need to be written in a specific language, there are general algorithmic and computer science challenges that transcend language syntax. These challenges can be created in a language agnostic format simply by defining an entry point, some input and the expected output. Once we know those details, creating a challenge that is supported across every programming language should be as simple as pushing a button. This is why we built the Language Generator for code challenges.\n\n![1*Q-U6HGECSCrK85wH96Xm8g](//images.ctfassets.net/4ol5sgskowtw/5aJEMh6HNB2V4wYChBFchv/4438b267119bf342f968c95c944b2efc/1_Q-U6HGECSCrK85wH96Xm8g.png)\n\n# What is this Language Generator?\nThe Language Generator is a tool that allows code challenges on Qualified to support multiple programming languages instantly. Instead of writing unit tests for a custom code challenge in each language, simply create the challenge using our Code Challenge Language Generator and generate support across programming languages with the push of a button.\n\n# How does the Language Generator work?\nTeams using Qualified can take advantage of the Language Generator to define their challenge in a language agnostic format that is then used to generate unit tests across languages. This format uses a single YAML configuration file to define entry points, return values, and inputs. This configuration file is then used to generate unit tests for the challenge in every language that the generator supports, extending native support for the challenge across languages.\n\nTo use the Language Generator, simply start by designing a code challenge. Without thinking about the configuration, let’s begin by designing the code challenge itself, the problem, description, and what we want to assess. Typically the easiest way is to start designing it in a programming language that we know well.\n\nTo explain the Language Generator let’s break it down through an example. Let’s take a look at one, the “Say Hello” challenge\n\n## Example: The “Say Hello” challenge\nFor our example let’s create a basic code challenge that requires a developer to write a simple function. We know JavaScript well and decide to start with that. So for our Say Hello challenge we want to have a function called sayHello which takes in a name and returns \"Hello [name]!\".\n\nSo the setup code for the candidate might be:\n```\nfunction sayHello() {\n}\n```\n\nThe test cases in Mocha might look something like this:\n```\nlet assert = require(\"chai\").assert;\ndescribe('Challenge', function() {\n  it('says_hello', function() {\n    assert.deepEqual(sayHello(\"Qualified\"), \"Hello, Qualified!\");\n  });\n});\n```\n\nEssentially we’re checking to see if our input of a particular string matches our expected output of another string. We’ve gotten pretty far into designing this challenge, so let’s take a look at how the YAML configuration would be built:\n\n```\nentry_point: say_hello\nreturn_type: String\nparameters:\n  - name: name\n    type: String\ntest_cases:\n  - it: says_hello\n    assertions:\n      - input_arguments:\n        - type: String\n          value: Qualified\n        expected_output:\n          type: String\n          value: Hello, Qualified!\n  - it: handles_empty_input\n    assertions:\n      - input_arguments:\n        - type: String\n          value:\n        expected_output:\n          type: String\n          value: Hello there!\nexample_test_cases:\n  - it: basic_test\n    assertions:\n      - input_arguments:\n        - type: String\n          value: Qualified\n        expected_output:\n          type: String\n          value: Hello, Qualified!\n```\n\nLet’s break it down quick. So we’ve got our `entry_point` as `say_hello`.\n\n```\nentry_point: say_hello\n```\n\nSince this is translated into multiple languages it’s shown snake-cased here, but it will translate into the appropriate casing for each language. In JavaScript, it would become `sayHello` automatically.\n\nNotice we designated a `return_type` of String\n\n```\nreturn_type: String\n```\n\nThis must be specified especially when translating into strong-typed languages.\n\nNext we have our `parameters`\n\n```\nparameters:\n  - name: name\n    type: String\n```\n\nThis is our list of parameters that will be sent to the entry point. Automatically the entry point is setup for the candidate so they understand what kind of parameters to expect and where to expect we’ll be sending them. In the example above we’re sending `sayHello` our string `name`.\n\nFinally we have our `test_cases` and `example_test_cases`. Example test cases are the tests available to the candidate immediately for testing. These are used to help the candidate get their feet wet and grow confident with the testing environment which may be new to them. The test cases are the ones they cannot see, but can be designed to send debugging information back to the candidate in order to lead them to the correct solution.\n\nLet’s take a look at the test_cases\n\n```\ntest_cases:\n  - it: says_hello\n    assertions:\n      - input_arguments:\n        - type: String\n          value: Qualified\n        expected_output:\n          type: String\n          value: Hello, Qualified!\n  - it: handles_empty_input\n    assertions:\n      - input_arguments:\n        - type: String\n          value:\n        expected_output:\n          type: String\n          value: Hello there!\n```\n\nThe configuration allows the challenge designer to create multiple it clauses and as many assertions as they would want within each clause. Each assertion can have unlimited input arguments, each with their own particular type and value. Then we can specify, based on those inputs, what the expected output should be.\n\nIn JavaScript this configuration would translate out to:\n\n```\nlet assert = require(\"chai\").assert;\ndescribe('Challenge', function() {\n  it('says_hello', function() {\n    assert.deepEqual(sayHello(\"Qualified\"), \"Hello, Qualified!\");\n  });\n  it('handles_empty_input', function() {\n    assert.deepEqual(sayHello(\"\"), \"Hello there!\");\n  });\n});\n```\n\nWith that one configuration file, this challenge can be generated across all supported languages! That wraps it up for our simple “Say Hello” example. Now that we have get the format it’s time for you to try creating your own custom code challenge with the Language Generator.\n\nIf you’re already on Qualified, get started by head to the Challenge section, clicking on “Create a Code Challenge”, and the Language Generator will appear in the sidebar. If you haven’t tried out Qualified.io yet, head over and claim your free trial to try out creating code challenges with the Language Generator today!","richBody":null,"description":"Unit test-driven code challenges are powerful and effective, although they need to be translated across programming languages. Now you can create custom challenges and generate multi-language support automatically — introducing the Language Generator.","hideHero":true,"publishDate":"2017-03-15T00:00-04:00"},{"prettyDate":"Feb 8, 2017","title":"Finding Flow as a Developer","href":"https://www.qualified.io/blog/posts/finding-flow-as-a-developer","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/2bQhdyiijn92oBqBmnmnNS/a069d69e8d6e28fd24026392086f1004/1_ZrB2eXQcpIZaJV-O8G-rwg.jpeg?w=100&q=1","length":"8 min read","excerpt":"Software development is hard. Check out these tips for maximizing productivity while also  preventing burn-out.\n","collection":"Software Engineering","slug":"finding-flow-as-a-developer","author":"Dan Nolan","htmlContent":"<p>Software development is hard. In fact, I suspect one of the biggest reasons many of us enjoy programming is because we know it’s hard. We know it’s hard and yet we enjoy striving for perfection. This kind of enjoyment occurs in software development when we work on a project whose scope is at the edge of our limits or comfort zone, but we still believe we possess the skills to pull through it. Within these conditions come the moments of supreme control, of timelessness, of pure excitement and creativity. We feel brilliant in the moments when we have glimpses of ingenuity among the myriad of setbacks that arise naturally while trying to control the chaos that is developing modern software applications.</p>\n<p>This enjoyment feeling is succinctly captured by Mihaly Csikszentmihalyi in his concept of <a href=\"https://en.wikipedia.org/wiki/Flow_%28psychology%29\">Flow</a>. Flow is what I strive for every day of my programming career, but I don’t always get there. It’s not easy and sometimes I fear it’s beyond my control. There are so many factors both internal and external to the computer that are crucial to developing a product. Many of these factors will remain unknown to us until they inevitably pop up out of nowhere; snapping us out of any semblance of a programming flow. On the best of days we handle these problems with grace and understand how to circumvent, on the worst of the days we fight them head on and get nowhere.</p>\n<blockquote>\n<p><em>So how do we recognize the worst of days? How do we know when to cut our losses and try another approach? How do we maximize the potential for reaching flow in our daily lives as developers?</em></p>\n</blockquote>\n<p>Asking ourselves these questions is the first step. Being introspective and truly honest with one’s self is the quickest way to any real personal progress. There are so many factors that naturally affect our flow; some may be unique to certain developers while others may be more common than we realize. Recognizing the factors that most affect you and your team is paramount to your success in the field.</p>\n<p>From talking to my colleagues and examining these factors within myself, there appears to be some patterns in the things that affect us most. Let’s take a look at some of these factors.</p>\n<h1>Find Challenges that Suit You</h1>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/2bQhdyiijn92oBqBmnmnNS/a069d69e8d6e28fd24026392086f1004/1_ZrB2eXQcpIZaJV-O8G-rwg.jpeg\" alt=\"1*ZrB2eXQcpIZaJV-O8G-rwg\"></p>\n<p>Challenges and goals should never be too easy. You should always be adjusting your trajectory towards ambitions that excite and even scare you a bit. Ideally this is finding an organization whose purpose aligns most with your own objectives. At a minimum this is finding challenges and goals to set within your organization that will intrinsically motivate you.</p>\n<p>Finding these challenges is fairly straightforward when tasked with a new project or exciting new feature. However, there will be times where you will be faced with a long list of simple bugs or mundane tasks. Even within these instances, there are techniques that can be utilized towards setting your own challenge level and achieving flow.</p>\n<h2>For simple bugs, ask yourself:</h2>\n<p>Can you find the root cause of this bug instead of settling for a band-aid solution? Could this bug occur anywhere else in your codebase? What steps can be taken to preventing it from occurring ever again?</p>\n<p>You can choose to see it not just as one bug, but as an instance of a class of bugs. See it as an opportunity to catch something now and determine procedure towards making sure variations of it never occur again. Make it your personal vendetta to extinguish those bugs once and for all.</p>\n<h2>For mundane tasks, ask yourself:</h2>\n<blockquote>\n<p><em>Can you achieve the goal of the task in a more effective manner than proposed? What kind of additional functionality in this space might delight your end-user? If you’ve done this task before, Is there a way to automate it or create a sort of framework or library to encapsulate your solution?</em></p>\n</blockquote>\n<p>Understanding your natural cycle of energy throughout the day is another factor to consider. Perhaps you are somebody who is more adapted towards taking on creative tasks in the morning, while handling the more routine tasks or bug fixes in the evening (or vice versa). Keep a log and examine the days you feel most productive. How were those days structured?</p>\n<h1>Stay Healthy and Alert</h1>\n<p>For most developers, programming is a career and it’s something we intend to be doing for years and years. If you have a habit now that you cannot foresee yourself maintaining for the next 10 years of your life, when will it stop? Will you see the crash coming or will you burn out first?</p>\n<p>We need to maintain our mental and physical well-being every day of our lives to the best of our ability. Doing this will boost not only our longevity in the field, but also our daily productivity. Let’s focus on some things we can do to maintain or physical and mental interests.</p>\n<ul>\n<li><strong>Eat smart</strong> and understand what you’re putting into your body does to your productivity levels. In an effort to maintain productivity into the afternoon I’ve found keeping lighter lunches helps increase productivity. The industrious Benjamin Franklin believed that always being a bit hungry is essential to productivity.</li>\n<li><strong>Sleeping</strong> enough to reach the recommended amount, when possible. When it’s not possible understand what it does to your productivity. You may find that you’re better off crushing quick, easy tasks and bugs when you’re sleep deprived; or maybe it’s documentation. Whatever it is, maybe save it until Friday when you’ve got that late concert Thursday night.</li>\n<li><strong>Meditation</strong> can be effective for both creative purposes and maintaining focus. It can open your mind to allow ideas to flow in or calm your mind to focus on the things that really matter.</li>\n<li><strong>Exercise</strong> will keep you feeling strong, alert and healthy. It’s not necessary that you become an athlete, but our bodies were not meant to stay in one position all day. Make sure you move around a bit, find something that makes you want to stay on your feet for an hour or two.</li>\n<li><strong>Keeping consistent</strong> with your schedule will allow you to find your most productive self. Just as we do with our computers, we’ll want to program our daily lives to be as efficient as possible. Explore the bounds of what your schedule can hold for you and then reign in on the habits that best perpetuate your goals and desires.</li>\n</ul>\n<h1>Know When its Time to Take a Break</h1>\n<p>As important as it is to stay focused and on track, there are times when we push too headstrong into a problem and we need to take a step back and allow our brains to open up and get creative. Taking a break or changing the scenery can help spur new ideas.</p>\n<p>Don’t be afraid to take breaks when you’re not feeling productive. If you have the freedom you can go for a long walk, a bike ride or a long drive in your car. Maybe take a laptop or notebook to a local coffee shop or park and try to write some ideas out there. Often times our minds are still working on tough problems even while we’re not consciously aware of it; when we’re sleeping, showering, or eating. It’s surprising how often we’ll stumble on our most creative solutions the morning after a long night of grinding away at a problem trying to force something to happen.</p>\n<p>It can be especially beneficial to find complimentary training or learning resources that provide you with a break, while still learning concepts that can be applied to the difficult problem you’re stuck on. I was introduced to Codewars three years ago by a co-worker and it’s been a favorite resource of mine for training programming skills ever since (in full disclosure I work at Codewars now). The beautiful thing about the training modules, referred to as Kata, is that they are small, self-contained programming sessions with clear indicators of success and failure. Through the difficulty settings we can pick the challenge level that engages us and work until we have clearly achieved the solution. Incidentally these are the exact conditions necessary for finding flow.</p>\n<h1>Wrap Up</h1>\n<p>We’re lucky as developers to have a craft with the potential to practice and learn to our heart’s content. With only a computer and some decent internet access we can work on our projects and hone our skills through the night. It’s a craft that appeals to those of us with a growth-mindset and the drive to become great at what we do. The only limit to our success is where we choose to spend our time. Regardless of what our personal lives are like, we’re all limited to a certain number of hours that we can put in each week. We may be able to squeeze blood from the stone and pull out some more hours out of our week, but to what end? We must realize that it is not how many hours we put into our craft, but the quality of those hours that really determines our success.</p>\n<p>Let’s recognize that finding flow is paramount to our success as developers. Be sure to ask yourself what factors contribute most to your flow and don’t stop there. Ask other developers, especially those on your team, what contributes to their success and focus. Often times posing these questions will bring up insights and factors you’ve never even considered. Picking up on these factors will continue to make you grow and be productive in ways you could have never imagined.</p>\n<p>How do you find your flow?</p>\n","tags":null,"body":"Software development is hard. In fact, I suspect one of the biggest reasons many of us enjoy programming is because we know it’s hard. We know it’s hard and yet we enjoy striving for perfection. This kind of enjoyment occurs in software development when we work on a project whose scope is at the edge of our limits or comfort zone, but we still believe we possess the skills to pull through it. Within these conditions come the moments of supreme control, of timelessness, of pure excitement and creativity. We feel brilliant in the moments when we have glimpses of ingenuity among the myriad of setbacks that arise naturally while trying to control the chaos that is developing modern software applications.\n\nThis enjoyment feeling is succinctly captured by Mihaly Csikszentmihalyi in his concept of [Flow](https://en.wikipedia.org/wiki/Flow_%28psychology%29). Flow is what I strive for every day of my programming career, but I don’t always get there. It’s not easy and sometimes I fear it’s beyond my control. There are so many factors both internal and external to the computer that are crucial to developing a product. Many of these factors will remain unknown to us until they inevitably pop up out of nowhere; snapping us out of any semblance of a programming flow. On the best of days we handle these problems with grace and understand how to circumvent, on the worst of the days we fight them head on and get nowhere.\n\n> *So how do we recognize the worst of days? How do we know when to cut our losses and try another approach? How do we maximize the potential for reaching flow in our daily lives as developers?*\n\nAsking ourselves these questions is the first step. Being introspective and truly honest with one’s self is the quickest way to any real personal progress. There are so many factors that naturally affect our flow; some may be unique to certain developers while others may be more common than we realize. Recognizing the factors that most affect you and your team is paramount to your success in the field.\n\nFrom talking to my colleagues and examining these factors within myself, there appears to be some patterns in the things that affect us most. Let’s take a look at some of these factors.\n\n# Find Challenges that Suit You\n![1*ZrB2eXQcpIZaJV-O8G-rwg](//images.ctfassets.net/4ol5sgskowtw/2bQhdyiijn92oBqBmnmnNS/a069d69e8d6e28fd24026392086f1004/1_ZrB2eXQcpIZaJV-O8G-rwg.jpeg)\n\nChallenges and goals should never be too easy. You should always be adjusting your trajectory towards ambitions that excite and even scare you a bit. Ideally this is finding an organization whose purpose aligns most with your own objectives. At a minimum this is finding challenges and goals to set within your organization that will intrinsically motivate you.\n\nFinding these challenges is fairly straightforward when tasked with a new project or exciting new feature. However, there will be times where you will be faced with a long list of simple bugs or mundane tasks. Even within these instances, there are techniques that can be utilized towards setting your own challenge level and achieving flow.\n\n## For simple bugs, ask yourself:\nCan you find the root cause of this bug instead of settling for a band-aid solution? Could this bug occur anywhere else in your codebase? What steps can be taken to preventing it from occurring ever again?\n\nYou can choose to see it not just as one bug, but as an instance of a class of bugs. See it as an opportunity to catch something now and determine procedure towards making sure variations of it never occur again. Make it your personal vendetta to extinguish those bugs once and for all.\n\n## For mundane tasks, ask yourself:\n\n> *Can you achieve the goal of the task in a more effective manner than proposed? What kind of additional functionality in this space might delight your end-user? If you’ve done this task before, Is there a way to automate it or create a sort of framework or library to encapsulate your solution?*\n\nUnderstanding your natural cycle of energy throughout the day is another factor to consider. Perhaps you are somebody who is more adapted towards taking on creative tasks in the morning, while handling the more routine tasks or bug fixes in the evening (or vice versa). Keep a log and examine the days you feel most productive. How were those days structured?\n\n# Stay Healthy and Alert\nFor most developers, programming is a career and it’s something we intend to be doing for years and years. If you have a habit now that you cannot foresee yourself maintaining for the next 10 years of your life, when will it stop? Will you see the crash coming or will you burn out first?\n\nWe need to maintain our mental and physical well-being every day of our lives to the best of our ability. Doing this will boost not only our longevity in the field, but also our daily productivity. Let’s focus on some things we can do to maintain or physical and mental interests.\n\n- __Eat smart__ and understand what you’re putting into your body does to your productivity levels. In an effort to maintain productivity into the afternoon I’ve found keeping lighter lunches helps increase productivity. The industrious Benjamin Franklin believed that always being a bit hungry is essential to productivity.\n- __Sleeping__ enough to reach the recommended amount, when possible. When it’s not possible understand what it does to your productivity. You may find that you’re better off crushing quick, easy tasks and bugs when you’re sleep deprived; or maybe it’s documentation. Whatever it is, maybe save it until Friday when you’ve got that late concert Thursday night.\n- __Meditation__ can be effective for both creative purposes and maintaining focus. It can open your mind to allow ideas to flow in or calm your mind to focus on the things that really matter.\n- __Exercise__ will keep you feeling strong, alert and healthy. It’s not necessary that you become an athlete, but our bodies were not meant to stay in one position all day. Make sure you move around a bit, find something that makes you want to stay on your feet for an hour or two.\n- __Keeping consistent__ with your schedule will allow you to find your most productive self. Just as we do with our computers, we’ll want to program our daily lives to be as efficient as possible. Explore the bounds of what your schedule can hold for you and then reign in on the habits that best perpetuate your goals and desires.\n\n# Know When its Time to Take a Break\nAs important as it is to stay focused and on track, there are times when we push too headstrong into a problem and we need to take a step back and allow our brains to open up and get creative. Taking a break or changing the scenery can help spur new ideas.\n\nDon’t be afraid to take breaks when you’re not feeling productive. If you have the freedom you can go for a long walk, a bike ride or a long drive in your car. Maybe take a laptop or notebook to a local coffee shop or park and try to write some ideas out there. Often times our minds are still working on tough problems even while we’re not consciously aware of it; when we’re sleeping, showering, or eating. It’s surprising how often we’ll stumble on our most creative solutions the morning after a long night of grinding away at a problem trying to force something to happen.\n\nIt can be especially beneficial to find complimentary training or learning resources that provide you with a break, while still learning concepts that can be applied to the difficult problem you’re stuck on. I was introduced to Codewars three years ago by a co-worker and it’s been a favorite resource of mine for training programming skills ever since (in full disclosure I work at Codewars now). The beautiful thing about the training modules, referred to as Kata, is that they are small, self-contained programming sessions with clear indicators of success and failure. Through the difficulty settings we can pick the challenge level that engages us and work until we have clearly achieved the solution. Incidentally these are the exact conditions necessary for finding flow.\n\n# Wrap Up\nWe’re lucky as developers to have a craft with the potential to practice and learn to our heart’s content. With only a computer and some decent internet access we can work on our projects and hone our skills through the night. It’s a craft that appeals to those of us with a growth-mindset and the drive to become great at what we do. The only limit to our success is where we choose to spend our time. Regardless of what our personal lives are like, we’re all limited to a certain number of hours that we can put in each week. We may be able to squeeze blood from the stone and pull out some more hours out of our week, but to what end? We must realize that it is not how many hours we put into our craft, but the quality of those hours that really determines our success.\n\nLet’s recognize that finding flow is paramount to our success as developers. Be sure to ask yourself what factors contribute most to your flow and don’t stop there. Ask other developers, especially those on your team, what contributes to their success and focus. Often times posing these questions will bring up insights and factors you’ve never even considered. Picking up on these factors will continue to make you grow and be productive in ways you could have never imagined.\n\nHow do you find your flow?","richBody":null,"description":"Software development is hard. Check out these tips for maximizing productivity while also  preventing burn-out.","hideHero":true,"publishDate":"2017-02-08T00:00-04:00"},{"prettyDate":"Nov 17, 2016","title":"Tips for Assessing Awesome AngularJS Developers","href":"https://www.qualified.io/blog/posts/tips-for-assessing-awesome-angularjs-developers","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/3p26uyp5K257NKoafE7hvw/29bd13d495ebea614149b1c02c679594/angular-JS-online-training-nareshit.jpg?w=100&q=1","length":"7 min read","excerpt":"Looking for these skills will help you select developers with real-world AngularJS experience.\n","collection":"Hiring","slug":"tips-for-assessing-awesome-angularjs-developers","author":"Phil DeJarnett","htmlContent":"<p>Hiring AngularJS developers is, on many levels, no different than hiring any other front-end software developer. You need someone with a good understanding of core programming concepts, good JavaScript fundamentals, in-depth browser skills, and a decent understanding of HTML and CSS.</p>\n<p>Beyond these basic skills, however, AngularJS introduces programming paradigms that haven't been as common in the front-end world, as well as some features that are unique to AngularJS itself. Most of these skills are hard to acquire simply by playing around with the framework, and instead only come naturally after having built an actual product with it.</p>\n<p>When looking to expand your AngularJS team, it's important to make sure you test for these concepts - possibly even more important than testing for traditional algorithm skills.</p>\n<p><em>Note, for this article, I'm focusing on the still highly popular AngularJS 1.x, but many of these concepts will apply to AngularJS 2.x with some adjustment.</em></p>\n<h1>Programming Concepts from the&nbsp;Back-End</h1>\n<p>AngularJS brings several very powerful concepts to the front-end which make it possible to build out larger applications in the browser.</p>\n<h2>Modular Design</h2>\n<p>Medium-to-large AngularJS applications will require a solid understanding of best practices for <a href=\"https://en.wikipedia.org/wiki/Modular_programming\">modularizing their codebase</a>. Not only in using external libraries, but also in breaking apart the core program into reusable and testable concepts.\nTo test for this, you'll want to make sure you provide a large enough challenge to see that the candidate can think about splitting a project into multiple modules.</p>\n<h2>Dependency Injection &amp; Inversion of&nbsp;Control</h2>\n<p>AngularJS brought <a href=\"https://en.wikipedia.org/wiki/Dependency_injection\">Dependency Injection</a> (DI) and <a href=\"https://en.wikipedia.org/wiki/Inversion_of_control\">Inversion of Control</a> (IoC) to the front-end. These two concepts make it easier to build out inter-dependent components without needing each component to \"know\" about how to instantiate the other. AngularJS makes heavy use of DI, and understanding how AngularJS makes this happen is important as the web application grows.</p>\n<p>Testing DI in AngularJS is mostly baked into just providing a challenge more complex than binding data to a form. Once you introduce services, remote API access, and - for best results - testing, you'll have a good sense if the candidate understands how the components work together.</p>\n<h2>Reusability &amp; Separation of&nbsp;Concerns</h2>\n<p>AngularJS makes it easy to build small, reusable components that aren't heavily interdependent, facilitating clean <a href=\"https://en.wikipedia.org/wiki/Separation_of_concerns\">separation of concerns</a> between each service or component. A good developer will be keen on breaking down the parts of your applications into small, reusable components to increase testability and to reduce complexity and interdependence.</p>\n<p>This ties in directly to having the candidate build out something more complex that simple a simple test. If the application is too simplified, it might not have any obvious places to create reusable components.</p>\n<h2>Unit Testing</h2>\n<p>Very few front-end frameworks made <a href=\"https://en.wikipedia.org/wiki/Unit_testing\">unit testing</a> practical (even impossible in some cases). AngularJS brought with it complete tooling for unit testing all aspects of your front-end. You'll want to make sure your developer has at least a basic understanding of automated testing concepts, if not knowledge of testing techniques unique to AngularJS.\nThe best way to ensure a candidate understand front-end testing is to get them to write their own tests. You can either be explicit in your requirements (\"write a test to make sure component A handles action B\"), or you can ask the candidate to come up with their own testing solution.</p>\n<h1>AngularJS-Specific Features</h1>\n<p>AngularJS is a complete framework with some core features that are exclusive to it. Other core features exist in different frameworks, but have functionality exclusive to AngularJS.</p>\n<h2>Directives &amp; Components</h2>\n<p>Of course, the most prominent feature of AngularJS is its vision of UI components, which are achieved through complex <em>Directives,</em> and in v1.5, simpler <em>Components</em>. If you are looking for a developer that can get started quickly, making sure they understand how to build directives is a great way to evaluate their skills.\nPretty much any Angular test will include Directives, but this highlights why it's important to look deeper into your potential candidates than simple algorithm tests. Being comfortable with AngularJS-style components takes time, and a good test will ensure they have had a chance to work with them in the past.</p>\n<h3>The Built-Ins Bonus</h3>\n<p>AngularJS comes with a large set of built-in directives, and having a strong knowledge of which ones to use when, and the differences between them, will often stand as a strong identifier of a candidate's skills.</p>\n<p>Make sure your test gives the candidate a chance to use these built-in directives, especially since many have small edge cases that they probably won't know to account for unless they've implemented them in a real-world product.</p>\n<h2>Promises and&nbsp;$q</h2>\n<p>Although they are becoming much more common in JavaScript programming, <a href=\"https://en.wikipedia.org/wiki/Futures_and_promises\">Promises</a> are still relatively new, and can take some time to wrap your mind around. They make it easier to deal with complex asynchronous function calls, and are critical for building out a modern AngularJS app.</p>\n<p>Make sure your test forces the developer to deal with asynchronous functions. This usually means moving beyond a simple UI test, either adding in animation or delays, or integrating with a remote API (see the next section). You'll also want to make sure your developer can correctly respond to both successful (resolved) and failed (rejected) promises.</p>\n<h2>Working with the $http&nbsp;service</h2>\n<p>Tightly connected to Promises is the AngularJS $http service, which encapsulates and enhances the traditional <a href=\"https://en.wikipedia.org/wiki/Ajax_(programming)\">AJAX</a> request model. This isn't a huge change, but there are enough features you can really explore the depth of a candidate's AngularJS knowledge here.\nYou'll want to make sure your candidate not only understands basic AJAX concepts, but also how $http augments this model through the use of Promises and HTTP interceptors.</p>\n<h2>The $digest&nbsp;cycle</h2>\n<p>Perhaps no feature of AngularJS is more unique than the $digest cycle. A good developer will be aware of how the cycle works, it's limitations, and how to avoid, track down, and fix the dreaded infinite digest error (Error: [$rootScope:infdig] 10 $digest() iterations reached). Being more than just superficially aware of this issue is often the difference between an AngularJS newbie and a proficient developer.</p>\n<p>There are several ways to dig into this knowledge, including asking them if they've experienced the error, and how they dealt with it. You can also quiz them on their understanding of integrating non-AngularJS code into an AngularJS application, and how (and when) to make sure those changes are propagated through the application.</p>\n<h1>Selecting Developers With the Right&nbsp;Skills</h1>\n<p>If you want to make sure you are hiring top talent, you can learn a lot of the information above through one-on-one interviews. For deeper insights, the only way you'll really know if a potential hire has the right skills for your company is to review code written by them. You just won't get a clear enough look into their experience without reviewing real code.</p>\n<p>There are many ways to get this data, including take home tests and in-person whiteboard style interviews. Both will give you deep insight, but both also will require a lot of time, and when you are trying to filter hundreds of candidates, you don't want to have to manually review every candidate.</p>\n<p>Here at Qualified we believe that the most efficient way for your team is to use as much automation as possible.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/5lXGHgKLlc8343MZzx05JN/1b71731ddea3aa42a3abaa95de192b09/QualifiedAngular1.png\" alt=\"QualifiedAngular1\"></p>\n<p>That's why we've taken the time to build a complete, in-depth assessment you can use for screening your AngularJS candidates. Our test covers a large spectrum of the AngularJS framework, while being contained within an automated testing environment. You'll be able to see the results of automated scoring as the candidate is walked through building a complete mini user interface. You'll be able to playback their code to see how they arrived at the final solution, and you'll be able to confidently choose which candidate to move forward with.</p>\n<p><a href=\"https://www.qualified.io\">Setup Qualified's AngularJS assessment</a> today to start testing your AngularJS candidates in just minutes.</p>\n","tags":null,"body":"Hiring AngularJS developers is, on many levels, no different than hiring any other front-end software developer. You need someone with a good understanding of core programming concepts, good JavaScript fundamentals, in-depth browser skills, and a decent understanding of HTML and CSS.\n\nBeyond these basic skills, however, AngularJS introduces programming paradigms that haven't been as common in the front-end world, as well as some features that are unique to AngularJS itself. Most of these skills are hard to acquire simply by playing around with the framework, and instead only come naturally after having built an actual product with it.\n\nWhen looking to expand your AngularJS team, it's important to make sure you test for these concepts - possibly even more important than testing for traditional algorithm skills.\n\n*Note, for this article, I'm focusing on the still highly popular AngularJS 1.x, but many of these concepts will apply to AngularJS 2.x with some adjustment.*\n\n# Programming Concepts from the Back-End\nAngularJS brings several very powerful concepts to the front-end which make it possible to build out larger applications in the browser.\n\n## Modular Design\nMedium-to-large AngularJS applications will require a solid understanding of best practices for [modularizing their codebase](https://en.wikipedia.org/wiki/Modular_programming). Not only in using external libraries, but also in breaking apart the core program into reusable and testable concepts.\nTo test for this, you'll want to make sure you provide a large enough challenge to see that the candidate can think about splitting a project into multiple modules.\n\n## Dependency Injection & Inversion of Control\nAngularJS brought [Dependency Injection](https://en.wikipedia.org/wiki/Dependency_injection) (DI) and [Inversion of Control](https://en.wikipedia.org/wiki/Inversion_of_control) (IoC) to the front-end. These two concepts make it easier to build out inter-dependent components without needing each component to \"know\" about how to instantiate the other. AngularJS makes heavy use of DI, and understanding how AngularJS makes this happen is important as the web application grows.\n\nTesting DI in AngularJS is mostly baked into just providing a challenge more complex than binding data to a form. Once you introduce services, remote API access, and - for best results - testing, you'll have a good sense if the candidate understands how the components work together.\n\n## Reusability & Separation of Concerns\nAngularJS makes it easy to build small, reusable components that aren't heavily interdependent, facilitating clean [separation of concerns](https://en.wikipedia.org/wiki/Separation_of_concerns) between each service or component. A good developer will be keen on breaking down the parts of your applications into small, reusable components to increase testability and to reduce complexity and interdependence.\n\nThis ties in directly to having the candidate build out something more complex that simple a simple test. If the application is too simplified, it might not have any obvious places to create reusable components.\n\n## Unit Testing\nVery few front-end frameworks made [unit testing](https://en.wikipedia.org/wiki/Unit_testing) practical (even impossible in some cases). AngularJS brought with it complete tooling for unit testing all aspects of your front-end. You'll want to make sure your developer has at least a basic understanding of automated testing concepts, if not knowledge of testing techniques unique to AngularJS.\nThe best way to ensure a candidate understand front-end testing is to get them to write their own tests. You can either be explicit in your requirements (\"write a test to make sure component A handles action B\"), or you can ask the candidate to come up with their own testing solution.\n\n# AngularJS-Specific Features\nAngularJS is a complete framework with some core features that are exclusive to it. Other core features exist in different frameworks, but have functionality exclusive to AngularJS.\n\n## Directives & Components\nOf course, the most prominent feature of AngularJS is its vision of UI components, which are achieved through complex *Directives,* and in v1.5, simpler *Components*. If you are looking for a developer that can get started quickly, making sure they understand how to build directives is a great way to evaluate their skills.\nPretty much any Angular test will include Directives, but this highlights why it's important to look deeper into your potential candidates than simple algorithm tests. Being comfortable with AngularJS-style components takes time, and a good test will ensure they have had a chance to work with them in the past.\n\n### The Built-Ins Bonus\nAngularJS comes with a large set of built-in directives, and having a strong knowledge of which ones to use when, and the differences between them, will often stand as a strong identifier of a candidate's skills.\n\nMake sure your test gives the candidate a chance to use these built-in directives, especially since many have small edge cases that they probably won't know to account for unless they've implemented them in a real-world product.\n\n## Promises and $q\nAlthough they are becoming much more common in JavaScript programming, [Promises](https://en.wikipedia.org/wiki/Futures_and_promises) are still relatively new, and can take some time to wrap your mind around. They make it easier to deal with complex asynchronous function calls, and are critical for building out a modern AngularJS app.\n\nMake sure your test forces the developer to deal with asynchronous functions. This usually means moving beyond a simple UI test, either adding in animation or delays, or integrating with a remote API (see the next section). You'll also want to make sure your developer can correctly respond to both successful (resolved) and failed (rejected) promises.\n\n## Working with the $http service\nTightly connected to Promises is the AngularJS $http service, which encapsulates and enhances the traditional [AJAX](https://en.wikipedia.org/wiki/Ajax_(programming)) request model. This isn't a huge change, but there are enough features you can really explore the depth of a candidate's AngularJS knowledge here.\nYou'll want to make sure your candidate not only understands basic AJAX concepts, but also how $http augments this model through the use of Promises and HTTP interceptors.\n\n## The $digest cycle\nPerhaps no feature of AngularJS is more unique than the $digest cycle. A good developer will be aware of how the cycle works, it's limitations, and how to avoid, track down, and fix the dreaded infinite digest error (Error: [$rootScope:infdig] 10 $digest() iterations reached). Being more than just superficially aware of this issue is often the difference between an AngularJS newbie and a proficient developer.\n\nThere are several ways to dig into this knowledge, including asking them if they've experienced the error, and how they dealt with it. You can also quiz them on their understanding of integrating non-AngularJS code into an AngularJS application, and how (and when) to make sure those changes are propagated through the application.\n\n# Selecting Developers With the Right Skills\nIf you want to make sure you are hiring top talent, you can learn a lot of the information above through one-on-one interviews. For deeper insights, the only way you'll really know if a potential hire has the right skills for your company is to review code written by them. You just won't get a clear enough look into their experience without reviewing real code.\n\nThere are many ways to get this data, including take home tests and in-person whiteboard style interviews. Both will give you deep insight, but both also will require a lot of time, and when you are trying to filter hundreds of candidates, you don't want to have to manually review every candidate.\n\nHere at Qualified we believe that the most efficient way for your team is to use as much automation as possible.\n\n![QualifiedAngular1](//images.ctfassets.net/4ol5sgskowtw/5lXGHgKLlc8343MZzx05JN/1b71731ddea3aa42a3abaa95de192b09/QualifiedAngular1.png)\n\nThat's why we've taken the time to build a complete, in-depth assessment you can use for screening your AngularJS candidates. Our test covers a large spectrum of the AngularJS framework, while being contained within an automated testing environment. You'll be able to see the results of automated scoring as the candidate is walked through building a complete mini user interface. You'll be able to playback their code to see how they arrived at the final solution, and you'll be able to confidently choose which candidate to move forward with.\n\n[Setup Qualified's AngularJS assessment](https://www.qualified.io) today to start testing your AngularJS candidates in just minutes.","richBody":null,"description":"Looking for these skills will help you select developers with real-world AngularJS experience.","hideHero":true,"publishDate":"2016-11-17T00:00-07:00"},{"prettyDate":"Nov 3, 2016","title":"The Hidden Cost of Hiring Software Engineers—$22,750/hire","href":"https://www.qualified.io/blog/posts/the-hidden-cost-of-hiring-software-engineers","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/q5o8AlwS2u8uVedtWwi8a/7d891d74792cec216275f05d32fbd69b/QualifiedHiddenHero.jpeg?w=100&q=1","length":"6 min read","excerpt":"The true, hidden cost of hiring - your engineers' time - reduces your company's ability to innovate and could be costing you $22,750 of enterprise value per hire.\n","collection":"Hiring","slug":"the-hidden-cost-of-hiring-software-engineers","author":"Nathan Doctor","htmlContent":"<p>Great companies spend immense resources searching for talented engineers, and even more to bring them onto the team. These recruiting and sourcing costs add up quickly.\nWhile these costs amount to a serious expense, with salary making up the majority of engineering budgets, they don't expose the true cost of hiring to companies. The real cost of hiring engineers is far less apparent. It's hidden in a subtle way, but can seriously drain resources and productivity.</p>\n<p>This hidden cost of hiring is embedded in the hundreds of hours your engineers spend evaluating and assessing candidates. Through resume review, phone screens, technical interviews and extensive on-sites, days worth of time is allocated to candidates, the majority of which don't make it to hire. These talented (and expensive) team members' energies should be focused, as much as possible, on innovating and building product - the tasks that will drive the company forward.</p>\n<p><em>The true, hidden cost of hiring - your engineers' time - reduces your company's ability to innovate and could be costing you $22,750 of enterprise value per hire.</em></p>\n<h1>The Value of your Engineers</h1>\n<p>All of our hiring expenses, both apparent and discrete, go into finding great engineers precisely because of how valuable they are to the organization. Their value stems from their large impact on the product and the technology that drives the business forward.\nTheir skills and talents are cultivated over years of professional experience. These engineers pour their enthusiasm and abilities into writing great software, which is why we bring them onto our teams. Yet engineering teams still carry a heavy burden in the hiring process, the necessity to evaluate and assess potential hires, with countless hours of their time.</p>\n<h1>Inefficient use of Engineering Time</h1>\n<p>All too often a company's hiring process overuses their engineering talent for pre-screens and interviews, many times with candidates who aren't qualified to begin with.\nOn larger teams, engineers are often scheduled out to interview candidates who have only been minimally pre-screened. They spend their time reviewing code samples and projects, running on-site interviews, and holding technical phone screens with candidates who don't even end up making it far in the hiring process.</p>\n<p>In smaller and growing teams, this burden often falls to the already overworked CTO, VP or Director of Engineering. With minimal recruiting infrastructure, or dedicated recruiters, they are forced to field all candidate flow. This becomes a major distraction to their most important duty - leading the existing technical team and ensuring engineering resources are produced effectively.</p>\n<p>Regardless of the spectrum of company size and the seniority of engineers, it is vital that companies find the right balance within the hiring process in order to ensure that valuable engineering hours aren't being wasted.</p>\n<h1>$22,750 in&nbsp;Costs</h1>\n<p>Assume a developer's cost of productivity to the company is roughly $350/hr (far more for team leads and directors). This estimates the value that a software developer's work delivers to your company in the form of product improvements and innovation. These improvements then result in increased growth, improved sales and added business-value. This can be broken down based on the base cost of salary (avg. $120,000/yr for an experienced developer), the 25–50% extra enterprise costs (benefits, healthcare, perks, employer taxes), and the premium of return, the company expects to receive on top of it, about 3x the full cost.</p>\n<p>We then look at the three main tasks that company has to fulfill to review each potential hire - the resume review, a phone screen, and an in-person interview. Typically companies see a large ratio of applicants/interviews/hires, in Marketo's case their 80/8/1 rules, whereby 100 applicants will lead to 10 interviews which results in 1 hire. This number ranges although it's safe to say that companies look at over 60 resumes, get on a phone call or technical screen with 10 of them and will do 5 in-person interviews to find their next engineering hire. This allocation can shift based on roles, if the company has full-time recruiters, how many candidates they send to engineering/tech phone screens, and if the engineering lead is doing resume review. In general, these hours break down to:</p>\n<p>__Resume Review __</p>\n<p>60 resumes * 5 mins = 5 hrs</p>\n<p>__Phone/Tech Screen __</p>\n<p>10 screens * 60 mins = 10 hrs</p>\n<p><strong>In-Person Interview</strong> (day-long, across multiple interviewers)</p>\n<p>5 interviews * 10 hrs = 50 hrs\n&nbsp;\n<strong>65 hrs at $350/hr = $22,750</strong>\n&nbsp;\nThis comes to an average of 65 hours per engineer hired for $22,750 of business costs, and even more for longer processes or more competitive positions. With the importance of engineering innovation and progress, this is not a cost that we want to ignore.</p>\n<h1>Recruiting as a Burden on Developers</h1>\n<p>While the sheer hours that get wasted on ineffective and unnecessary interviews can take a huge toll on productivity, there are even further impacts that result from the energy expense.</p>\n<p><a href=\"https://heeris.id.au/2013/this-is-why-you-shouldnt-interrupt-a-programmer/\">Seemingly small distractions can completely undo hours of work</a>. Interviews, with potentially unqualified candidates, distract engineers from what they were hired to do - use code to solve problems. This requires focus in order to perform optimally, especially when faced with difficult technical demands. Because it takes continuous precise focus to work toward an effective solution, this distraction can actually have a demoralizing effect as it breaks work flow - short-term memory gets loaded with all of the moving parts, leaving engineers to rebuild their mental model and take even more time to simply get back to even. An hour long distraction can actually debase hours of work.</p>\n<p><img src=\"//images.ctfassets.net/4ol5sgskowtw/3izrnZeKtLOUBW7M45HZtw/574b7dfa1280a441e5d766ef76861018/QualifiedHidden1.png\" alt=\"QualifiedHidden1\"></p>\n<h1>Invest Engineering Resources Wisely</h1>\n<p>Now that we've dissected the ways in which engineering teams time and focus can get squandered during recruiting, let's discuss how we can solve this.\nReducing this $22,750/hire cost comes down to improving recruiting process. We want to increase efficiency so that manual technical screens are only done with worthy candidates, and that only viable talent is making it to each on-site interview.</p>\n<p>We must view each engineering interview as an <em>investment</em>. We should only be using an engineering teams' time with candidates that have a high likelihood of being hired. We don't want to scatter these valuable investments with anyone who enters the process, but rather only those who show strong promise of maturing into a full hire.</p>\n<h1>Increasing Process Efficiency</h1>\n<p>The best processes that result in the most efficient use of engineering time often filter candidates beforehand so that coding competency has already been determined. This can be done in a variety of ways, through skill assessments, referral-based hiring, and coding competency tests. This serves to accelerate the process, while simultaneously allowing engineers, CTOs, VPs and Directors of engineering to focus on their main tasks, only investing in a few interviews with promising candidates. In addition, this process is respectful to the candidate's time, as it allows for quick and deliberate decision when an otherwise drawn out process may not lead anywhere.</p>\n<p>This is the reason we built <a href=\"https://www.qualified.io/?utm_source=blog.qualified&amp;utm_medium=blog&amp;utm_campaign=realcost11.3.16\">Qualified.io</a> to save engineering teams time and accelerate their hiring process. In reducing the amount of time engineering teams spend evaluating candidates, we increase process effectiveness and identify great developers faster. This helps eliminate the hidden cost of the hiring process and allows your company to drive forward with every hour of engineering genius that you have.</p>\n","tags":null,"body":"Great companies spend immense resources searching for talented engineers, and even more to bring them onto the team. These recruiting and sourcing costs add up quickly.\nWhile these costs amount to a serious expense, with salary making up the majority of engineering budgets, they don't expose the true cost of hiring to companies. The real cost of hiring engineers is far less apparent. It's hidden in a subtle way, but can seriously drain resources and productivity.\n\nThis hidden cost of hiring is embedded in the hundreds of hours your engineers spend evaluating and assessing candidates. Through resume review, phone screens, technical interviews and extensive on-sites, days worth of time is allocated to candidates, the majority of which don't make it to hire. These talented (and expensive) team members' energies should be focused, as much as possible, on innovating and building product - the tasks that will drive the company forward.\n\n*The true, hidden cost of hiring - your engineers' time - reduces your company's ability to innovate and could be costing you $22,750 of enterprise value per hire.*\n\n# The Value of your Engineers\nAll of our hiring expenses, both apparent and discrete, go into finding great engineers precisely because of how valuable they are to the organization. Their value stems from their large impact on the product and the technology that drives the business forward.\nTheir skills and talents are cultivated over years of professional experience. These engineers pour their enthusiasm and abilities into writing great software, which is why we bring them onto our teams. Yet engineering teams still carry a heavy burden in the hiring process, the necessity to evaluate and assess potential hires, with countless hours of their time.\n\n# Inefficient use of Engineering Time\nAll too often a company's hiring process overuses their engineering talent for pre-screens and interviews, many times with candidates who aren't qualified to begin with.\nOn larger teams, engineers are often scheduled out to interview candidates who have only been minimally pre-screened. They spend their time reviewing code samples and projects, running on-site interviews, and holding technical phone screens with candidates who don't even end up making it far in the hiring process.\n\nIn smaller and growing teams, this burden often falls to the already overworked CTO, VP or Director of Engineering. With minimal recruiting infrastructure, or dedicated recruiters, they are forced to field all candidate flow. This becomes a major distraction to their most important duty - leading the existing technical team and ensuring engineering resources are produced effectively.\n\nRegardless of the spectrum of company size and the seniority of engineers, it is vital that companies find the right balance within the hiring process in order to ensure that valuable engineering hours aren't being wasted.\n\n# $22,750 in Costs\nAssume a developer's cost of productivity to the company is roughly $350/hr (far more for team leads and directors). This estimates the value that a software developer's work delivers to your company in the form of product improvements and innovation. These improvements then result in increased growth, improved sales and added business-value. This can be broken down based on the base cost of salary (avg. $120,000/yr for an experienced developer), the 25–50% extra enterprise costs (benefits, healthcare, perks, employer taxes), and the premium of return, the company expects to receive on top of it, about 3x the full cost.\n\nWe then look at the three main tasks that company has to fulfill to review each potential hire - the resume review, a phone screen, and an in-person interview. Typically companies see a large ratio of applicants/interviews/hires, in Marketo's case their 80/8/1 rules, whereby 100 applicants will lead to 10 interviews which results in 1 hire. This number ranges although it's safe to say that companies look at over 60 resumes, get on a phone call or technical screen with 10 of them and will do 5 in-person interviews to find their next engineering hire. This allocation can shift based on roles, if the company has full-time recruiters, how many candidates they send to engineering/tech phone screens, and if the engineering lead is doing resume review. In general, these hours break down to:\n\n__Resume Review __\n\n60 resumes * 5 mins = 5 hrs\n\n__Phone/Tech Screen __\n\n10 screens * 60 mins = 10 hrs\n\n__In-Person Interview__ (day-long, across multiple interviewers)\n\n5 interviews * 10 hrs = 50 hrs\n \n__65 hrs at $350/hr = $22,750__\n \nThis comes to an average of 65 hours per engineer hired for $22,750 of business costs, and even more for longer processes or more competitive positions. With the importance of engineering innovation and progress, this is not a cost that we want to ignore.\n\n# Recruiting as a Burden on Developers\nWhile the sheer hours that get wasted on ineffective and unnecessary interviews can take a huge toll on productivity, there are even further impacts that result from the energy expense.\n\n[Seemingly small distractions can completely undo hours of work](https://heeris.id.au/2013/this-is-why-you-shouldnt-interrupt-a-programmer/). Interviews, with potentially unqualified candidates, distract engineers from what they were hired to do - use code to solve problems. This requires focus in order to perform optimally, especially when faced with difficult technical demands. Because it takes continuous precise focus to work toward an effective solution, this distraction can actually have a demoralizing effect as it breaks work flow - short-term memory gets loaded with all of the moving parts, leaving engineers to rebuild their mental model and take even more time to simply get back to even. An hour long distraction can actually debase hours of work.\n\n![QualifiedHidden1](//images.ctfassets.net/4ol5sgskowtw/3izrnZeKtLOUBW7M45HZtw/574b7dfa1280a441e5d766ef76861018/QualifiedHidden1.png)\n\n# Invest Engineering Resources Wisely\nNow that we've dissected the ways in which engineering teams time and focus can get squandered during recruiting, let's discuss how we can solve this.\nReducing this $22,750/hire cost comes down to improving recruiting process. We want to increase efficiency so that manual technical screens are only done with worthy candidates, and that only viable talent is making it to each on-site interview.\n\nWe must view each engineering interview as an *investment*. We should only be using an engineering teams' time with candidates that have a high likelihood of being hired. We don't want to scatter these valuable investments with anyone who enters the process, but rather only those who show strong promise of maturing into a full hire.\n\n# Increasing Process Efficiency\nThe best processes that result in the most efficient use of engineering time often filter candidates beforehand so that coding competency has already been determined. This can be done in a variety of ways, through skill assessments, referral-based hiring, and coding competency tests. This serves to accelerate the process, while simultaneously allowing engineers, CTOs, VPs and Directors of engineering to focus on their main tasks, only investing in a few interviews with promising candidates. In addition, this process is respectful to the candidate's time, as it allows for quick and deliberate decision when an otherwise drawn out process may not lead anywhere.\n\nThis is the reason we built [Qualified.io](https://www.qualified.io/?utm_source=blog.qualified&utm_medium=blog&utm_campaign=realcost11.3.16) to save engineering teams time and accelerate their hiring process. In reducing the amount of time engineering teams spend evaluating candidates, we increase process effectiveness and identify great developers faster. This helps eliminate the hidden cost of the hiring process and allows your company to drive forward with every hour of engineering genius that you have.","richBody":null,"description":"The true, hidden cost of hiring - your engineers' time - reduces your company's ability to innovate and could be costing you $22,750 of enterprise value per hire.","hideHero":false,"publishDate":"2016-11-03T00:00-07:00"},{"prettyDate":"Nov 2, 2016","title":"Great Developers Don’t Need To Be “Passionate”","href":"https://www.qualified.io/blog/posts/great-developers-dont-need-to-be-passionate","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/3dvTJ0vmnXxQjK8MuAFmpF/1b51f9fdfe7d634c217d7753dc6b5b95/1_jlNh0O7xuKIhM_wgtgC6RA.jpeg?w=100&q=1","length":"5 min read","excerpt":"Great developers have something better than a desire to work long hours.\n","collection":"Software Engineering","slug":"great-developers-dont-need-to-be-passionate","author":"Phil DeJarnett","htmlContent":"<p>There’s a common expectation when looking for great developers that they need to be “passionate” about coding, which is often equated to coding long hours. It carries the assumption that the best software engineers live, breathe, and sleep code. That great developers should have intensive work weeks, and fill their free-time with coding side-projects. It wants to see prolific Github accounts, tons of open source contributions, and expects great developers can’t wait to get back to writing code.</p>\n<p>In my experience, there are people like that. And they can be great — until they burn out, of course. But while focusing so much time on code can imply that someone is a great developer (though never guarantee it), a lack of after-hours programming does not mean someone will be a worse candidate than someone who does.</p>\n<p>In the end, while there’s a lot that separates great developers from mediocre ones, there are more important traits that make a superior developer.</p>\n<h1>Great Developers Are Problem Solvers</h1>\n<p>All first-class developers share one common skill: they can solve a problem. Though there’s more to it.</p>\n<ul>\n<li>They have the ability to <strong>define the problem</strong> it in a way that makes it possible to solve</li>\n<li>They can take their problem definition and <strong>break it down</strong> to target a solution.</li>\n<li>They are able to <strong>assess it from different directions</strong>, knowing that complex problems have multiple solutions.</li>\n<li>They also know how to <strong>find answers</strong> when they are missing information or experience. This is key, because challenging problems always require growth and learning to solve.</li>\n</ul>\n<p>One thing you might notice is none of this is specifically related to years experience or raw knowledge. Instead, this is a skill set of its own, that’s often innately developed. From junior to senior, great engineers will be able to follow through on these steps, no matter their experience with the problem domain.</p>\n<h1>Great Developers Don’t Give Up</h1>\n<p>I think this is where the misconception that great developers work late comes from. What really is happening is that many amazing developers will get caught up in solving a problem, and want to see it through — or at least get their work to a state where they can take a break without losing their mental model.</p>\n<p>This doesn’t mean that all developers have to work this way. The best developers know to always step away from complex issues, to let their mind rest and make it easier to tackle an issue from a different viewpoint.</p>\n<h1>Great Developers Do Care — About The Quality of Their Work</h1>\n<p>There is an important distinction here. Great developers care a lot, but they care about the work they do. In the right circumstances, this can be misconstrued as being “passionate,” but I feel like it goes deeper than that. Rather than a general, over-arching concern for all-things-programming, they are going to care about specific issues that affect them and how they work.</p>\n<p>For example, a strong developer isn’t always going to accept their first solution. They care about getting the solution right, not just solving it and moving on. This means taking the time to review the solution, looking for edge cases and potential long-term issues. This also means thinking about long-term maintainability — as is appropriate for the problem at hand.</p>\n<h1>Great Developers Don’t Have to Program After Hours</h1>\n<p>This is the core issue. Just because someone doesn’t write code after hours doesn’t mean they aren’t a great developer. There are lots of great reasons that a developer might not work after hours on programming. Even more so maintaining balance is very positive to a developer’s mental well-being and will return large gains in the long-term.</p>\n<ul>\n<li>Many developers have other hobbies, that are often orthogonal to software development. If you are looking to hire someone, talk to them about their hobbies and interests.</li>\n<li>If a developer has a family, don’t expect them to have a lot of extra free time. But don’t discount someone here, either. Having a family might mean they’ll get more satisfaction out of the time they have at their job, to focus on challenging themselves and solving problems with code.</li>\n<li>For employed developers, learning about their current role can give you insight into what they find enjoyable or what they dislike about their current job. It also can open the door to learn about what they would like to be working on.</li>\n</ul>\n<h1>Great Developers Will Stand Out — With the Right Process</h1>\n<p>Hopefully you can agree: great developers are far more than the hours they log. Evaluating a developer solely on their résumés and extracurricular coding, neither of which show the whole picture, is a guaranteed way to lose talent. So how do you find them?</p>\n<p>We’ve found the best way to find great developers is to test their ability to solve problems. Provide them with short, fair, and interesting challenges to solve. The solution to these challenges will give you a lot more insight into how they think and work as a developer.</p>\n<p>Things to look for:</p>\n<ul>\n<li>Are they willing to solve tough problems?</li>\n<li>Are they persistent in solving a difficult challenge?</li>\n<li>Are they able solve the problem in a way that is maintainable, and can be understood by other developers?</li>\n</ul>\n<h1>Choose the Right Process for Your Team</h1>\n<p>When looking for developers to join your team it’s critical to evaluate potential candidates in a way that allows truly great developers to stand out. That’s our mission at Qualified, accelerating talent assessment in a way that saves time, while unearthing true talent. In our next articles, we’ll look at different processes you can use to highlight great developers.</p>\n","tags":null,"body":"There’s a common expectation when looking for great developers that they need to be “passionate” about coding, which is often equated to coding long hours. It carries the assumption that the best software engineers live, breathe, and sleep code. That great developers should have intensive work weeks, and fill their free-time with coding side-projects. It wants to see prolific Github accounts, tons of open source contributions, and expects great developers can’t wait to get back to writing code.\n\nIn my experience, there are people like that. And they can be great — until they burn out, of course. But while focusing so much time on code can imply that someone is a great developer (though never guarantee it), a lack of after-hours programming does not mean someone will be a worse candidate than someone who does.\n\nIn the end, while there’s a lot that separates great developers from mediocre ones, there are more important traits that make a superior developer.\n\n# Great Developers Are Problem Solvers\nAll first-class developers share one common skill: they can solve a problem. Though there’s more to it.\n\n- They have the ability to __define the problem__ it in a way that makes it possible to solve\n- They can take their problem definition and __break it down__ to target a solution.\n- They are able to __assess it from different directions__, knowing that complex problems have multiple solutions.\n- They also know how to __find answers__ when they are missing information or experience. This is key, because challenging problems always require growth and learning to solve.\n\nOne thing you might notice is none of this is specifically related to years experience or raw knowledge. Instead, this is a skill set of its own, that’s often innately developed. From junior to senior, great engineers will be able to follow through on these steps, no matter their experience with the problem domain.\n\n# Great Developers Don’t Give Up\nI think this is where the misconception that great developers work late comes from. What really is happening is that many amazing developers will get caught up in solving a problem, and want to see it through — or at least get their work to a state where they can take a break without losing their mental model.\n\nThis doesn’t mean that all developers have to work this way. The best developers know to always step away from complex issues, to let their mind rest and make it easier to tackle an issue from a different viewpoint.\n\n# Great Developers Do Care — About The Quality of Their Work\nThere is an important distinction here. Great developers care a lot, but they care about the work they do. In the right circumstances, this can be misconstrued as being “passionate,” but I feel like it goes deeper than that. Rather than a general, over-arching concern for all-things-programming, they are going to care about specific issues that affect them and how they work.\n\nFor example, a strong developer isn’t always going to accept their first solution. They care about getting the solution right, not just solving it and moving on. This means taking the time to review the solution, looking for edge cases and potential long-term issues. This also means thinking about long-term maintainability — as is appropriate for the problem at hand.\n\n# Great Developers Don’t Have to Program After Hours\nThis is the core issue. Just because someone doesn’t write code after hours doesn’t mean they aren’t a great developer. There are lots of great reasons that a developer might not work after hours on programming. Even more so maintaining balance is very positive to a developer’s mental well-being and will return large gains in the long-term.\n\n- Many developers have other hobbies, that are often orthogonal to software development. If you are looking to hire someone, talk to them about their hobbies and interests.\n- If a developer has a family, don’t expect them to have a lot of extra free time. But don’t discount someone here, either. Having a family might mean they’ll get more satisfaction out of the time they have at their job, to focus on challenging themselves and solving problems with code.\n- For employed developers, learning about their current role can give you insight into what they find enjoyable or what they dislike about their current job. It also can open the door to learn about what they would like to be working on.\n\n# Great Developers Will Stand Out — With the Right Process\nHopefully you can agree: great developers are far more than the hours they log. Evaluating a developer solely on their résumés and extracurricular coding, neither of which show the whole picture, is a guaranteed way to lose talent. So how do you find them?\n\nWe’ve found the best way to find great developers is to test their ability to solve problems. Provide them with short, fair, and interesting challenges to solve. The solution to these challenges will give you a lot more insight into how they think and work as a developer.\n\nThings to look for:\n\n- Are they willing to solve tough problems?\n- Are they persistent in solving a difficult challenge?\n- Are they able solve the problem in a way that is maintainable, and can be understood by other developers?\n\n# Choose the Right Process for Your Team\nWhen looking for developers to join your team it’s critical to evaluate potential candidates in a way that allows truly great developers to stand out. That’s our mission at Qualified, accelerating talent assessment in a way that saves time, while unearthing true talent. In our next articles, we’ll look at different processes you can use to highlight great developers.","richBody":null,"description":"Great developers have something better than a desire to work long hours.","hideHero":false,"publishDate":"2016-11-02T00:00-04:00"},{"prettyDate":"Sep 12, 2016","title":"Hiring Programmers Is Hard: How to be More Efficient","href":"https://www.qualified.io/blog/posts/hiring-programmers-is-hard-how-to-be-more-efficient","thumbnail":"//images.ctfassets.net/4ol5sgskowtw/5tYBg0pGqvtZBhvBxXwr0E/9273daf1d79d8c3cad2aa662c7b2c538/QualifiedHardHero.jpeg?w=100&q=1","length":"7 min read","excerpt":"Hiring software developers is one of the most important aspects of building a successful business. It's a general truth that a great programmer can be 10 times more productive than a mediocre one.\n","collection":"Hiring","slug":"hiring-programmers-is-hard-how-to-be-more-efficient","author":"Jake Hoffner","htmlContent":"<p>Hiring software developers is one of the most important aspects of building a successful business. It's a general truth that a great programmer can be 10 times more productive than a mediocre one. In fact, hiring a mediocre to poor developer not only adds minimal productivity to your team, but often decreases the team's existing efficiency. This happens as your engineers must now train and continuously coach the weaker developers, taking up their focus, time and patience.</p>\n<p>That's why it's so important to make great hires. You need to keep your team moving at full speed. Bringing on great developers who are fast learners is crucial to keeping your momentum going. However the process of hiring great developers takes time, and that time in itself can be a hit to your productivity. Here are just a few ways that the hiring process can bring engineering productivity to a halt:</p>\n<ul>\n<li>A flood of applications create a backlog of candidates to review.</li>\n<li>Constant interviews distract your software developers.</li>\n<li>Poor performers that make it to on-site interviews drain the engineering team's time.</li>\n<li>Inconsistent technical interview formats create biased and unreliable results.</li>\n<li>Scheduling conflicts can create delays in the hiring process.</li>\n</ul>\n<p>To overcome these issues, code assessments can be leveraged to combat an inefficient hiring process and improve the quality of your technical screens. The idea of code assessments is nothing new. They have been around for a while and are well-known for their usage by companies like Google. Using code assessments for technical screens is possible in a variety of different ways. Some use code assessments to test candidate's real-world programming skills. Many like to see a candidate's thought process through whiteboarding. Others like to use pair-programming tools to work alongside candidates. All of these tactics can go a long way in making your hiring more efficient and effective. To improve the process further, you can use skill assessment software such as <a href=\"https://www.qualified.io/?utm_source=qualified&amp;medium=blog&amp;utm_campaign=hiring-software-developers-testing-efficiency\">Qualified.io</a>. We built <a href=\"http://Qualified.io\">Qualified.io</a> to accelerate the technical hiring process with automated code assessments and pair-programming tools. We believe that when code assessments are done right, you can maximize the impact of your hiring process at identifying the best engineering talent.</p>\n<p>Here are some of the areas where you can use code assessments within your process to improve efficiency:</p>\n<h1>Pre-Screens</h1>\n<p>A pre-screen is a quick coding test you can ask candidates to take before they talk to engineers on your team. If your company is fielding a lot of inbound job applications then this is likely a bottleneck for you. Your first step towards better efficiency is filtering out candidates who can't handle fundamental coding tasks. Ideally, you want to do this without involving your technical team, as it is crucial that they stay focused on their work. You will want to involve them later only after you have found candidates who show promise.</p>\n<p>This is a key area where <a href=\"https://www.qualified.io/?utm_source=qualified&amp;medium=blog&amp;utm_campaign=hiring-software-developers-testing-efficiency\">Qualified's automated coding assessments</a> can make a huge impact. Automation allows you to qualify candidates in a consistent and reproducible manner. An assessment can test defined coding tasks in a familiar coding environment and auto-score the candidate's solutions. It does all of this for your recruiting team without needing to include your engineers to do the scoring. This should be a key take away for improving your pre-screens. You want the process to be efficient and you don't want to have to include your engineers, who need to stay focused on more important things.</p>\n<h1>In-Depth Assignments</h1>\n<p>Implementing pre-screens to filter out poor performing candidates will make a large impact on streamlining your hiring flow. At this point the candidate has gotten through your low-pass filter and it's time to step it up a notch. This is where in-depth code assessments will really improve things. The basic idea is simple. Give the candidate a coding assignment that they can do on their own time. The assessment should be designed to provide you with a more in-depth coverage of their skill sets. Since each candidate will be completing the same assignment, this will give you a consistent set of results to compare.</p>\n<p>There are a few options for giving assignments to candidates. One is a take home project. In this approach the candidate is given a set of requirements and completes a full project. With this approach you will get a great real-world code sample. There are however a few drawbacks to watch out for. First, these projects will be quite intensive, which can be a turn-off for candidates due to the large time investment. Second, you should expect your development team to spend a good amount of time reviewing each submission. To combat these you will want to selectively use these projects to ensure candidate retention and prevent interviewer fatigue. Having your interviewers being familiar with the solution is key to making this process more efficient. You will also want to setup a system for tracking results and making sure everyone has access to the project submissions.</p>\n<p>Another option is to take things a step further and use an automated assessment platform. In this case, you wouldn't give the candidate a full project, but instead one or more in-depth coding assessments to complete. With targeted challenges, you can isolate specific areas that you would like to focus on. Since the system will score the candidates for you, you won't need to worry about testing the code yourself. This allows you to filter candidates effortlessly and focus your time on how the assignment was solved. Taking it even further, <a href=\"http://Qualified.io\">Qualified.io</a> actually utilizes unit tests for automated scoring - the same tests development teams use for testing their own software. This provides a familiar process to candidates and also enables you to test TDD skills. Imagine, you can not only use tests to ensure your development team is producing quality software, you can also use it to ensure you are producing quality technical assessments.</p>\n<p>Regardless of which in-depth assignment approach you take, it will give your candidates an opportunity to reveal their skills in a comfortable environment. This way you can quickly see talent, and well before you invest your engineers time in a whiteboarding or on-site interview.</p>\n<h1>Pair-Programming Interviews</h1>\n<p>OK, so you have pre-screened out all of the poor candidates, and honed in on the high quality candidates using an in-depth assignment. At this point you have done a great job minimizing the amount of time you need to take from your development team. Its now time to get them more hands-on with the interview process.</p>\n<p>The process of interviewing can be incredibly time consuming, but it's an important phase that you don't want to shortcut on. Many companies hold technical phone screens before an on-site interview in a conversational format. These phone screens provide shallow skill insight, while a full on-site can often be very costly - costing your team precious time as well as possible travel expenses. Pair-programming during a phone screen is a great way to allow your interviewers full insight into a candidate's coding skills without increased overhead. They are often so effective they can even replace an on-site interview when necessary.</p>\n<p>A pair-programming interview involves one or more of your engineers meeting with a candidate in a real-time collaborative coding environment, such as Qualified's Live Interview. These pair-programming environments allow developers to remotely code together as they work through a code assessment or whiteboarding problem.\nThis real-time collaboration offers direct insight into a candidate's thought-process and problem-solving approach. With <a href=\"http://Qualified.io\">Qualified.io</a>, you can even record the playback of the pair-programming session so the rest of your team can review the session later. Pair-programming will provide you with a great preview of how well the candidate will integrate into your team.</p>\n<h1>Recap</h1>\n<p>Optimize your hiring flow by using pre-screens to quickly filter out poor performers. Get real world examples from your prospects by using in-depth code assessments. Save your development team from hours of in-person interviews by utilizing pair-programming phone screens. Automate and streamline your process with tools like <a href=\"https://www.qualified.io/?utm_source=qualified&amp;medium=blog&amp;utm_campaign=hiring-software-developers-testing-efficiency\">Qualified.io</a>.</p>\n","tags":null,"body":"Hiring software developers is one of the most important aspects of building a successful business. It's a general truth that a great programmer can be 10 times more productive than a mediocre one. In fact, hiring a mediocre to poor developer not only adds minimal productivity to your team, but often decreases the team's existing efficiency. This happens as your engineers must now train and continuously coach the weaker developers, taking up their focus, time and patience.\n\nThat's why it's so important to make great hires. You need to keep your team moving at full speed. Bringing on great developers who are fast learners is crucial to keeping your momentum going. However the process of hiring great developers takes time, and that time in itself can be a hit to your productivity. Here are just a few ways that the hiring process can bring engineering productivity to a halt:\n \n- A flood of applications create a backlog of candidates to review. \n- Constant interviews distract your software developers. \n- Poor performers that make it to on-site interviews drain the engineering team's time.\n- Inconsistent technical interview formats create biased and unreliable results.\n- Scheduling conflicts can create delays in the hiring process.\n\nTo overcome these issues, code assessments can be leveraged to combat an inefficient hiring process and improve the quality of your technical screens. The idea of code assessments is nothing new. They have been around for a while and are well-known for their usage by companies like Google. Using code assessments for technical screens is possible in a variety of different ways. Some use code assessments to test candidate's real-world programming skills. Many like to see a candidate's thought process through whiteboarding. Others like to use pair-programming tools to work alongside candidates. All of these tactics can go a long way in making your hiring more efficient and effective. To improve the process further, you can use skill assessment software such as [Qualified.io](https://www.qualified.io/?utm_source=qualified&medium=blog&utm_campaign=hiring-software-developers-testing-efficiency). We built Qualified.io to accelerate the technical hiring process with automated code assessments and pair-programming tools. We believe that when code assessments are done right, you can maximize the impact of your hiring process at identifying the best engineering talent.\n\nHere are some of the areas where you can use code assessments within your process to improve efficiency:\n\n# Pre-Screens\nA pre-screen is a quick coding test you can ask candidates to take before they talk to engineers on your team. If your company is fielding a lot of inbound job applications then this is likely a bottleneck for you. Your first step towards better efficiency is filtering out candidates who can't handle fundamental coding tasks. Ideally, you want to do this without involving your technical team, as it is crucial that they stay focused on their work. You will want to involve them later only after you have found candidates who show promise.\n\nThis is a key area where [Qualified's automated coding assessments](https://www.qualified.io/?utm_source=qualified&medium=blog&utm_campaign=hiring-software-developers-testing-efficiency) can make a huge impact. Automation allows you to qualify candidates in a consistent and reproducible manner. An assessment can test defined coding tasks in a familiar coding environment and auto-score the candidate's solutions. It does all of this for your recruiting team without needing to include your engineers to do the scoring. This should be a key take away for improving your pre-screens. You want the process to be efficient and you don't want to have to include your engineers, who need to stay focused on more important things.\n\n# In-Depth Assignments\nImplementing pre-screens to filter out poor performing candidates will make a large impact on streamlining your hiring flow. At this point the candidate has gotten through your low-pass filter and it's time to step it up a notch. This is where in-depth code assessments will really improve things. The basic idea is simple. Give the candidate a coding assignment that they can do on their own time. The assessment should be designed to provide you with a more in-depth coverage of their skill sets. Since each candidate will be completing the same assignment, this will give you a consistent set of results to compare.\n\nThere are a few options for giving assignments to candidates. One is a take home project. In this approach the candidate is given a set of requirements and completes a full project. With this approach you will get a great real-world code sample. There are however a few drawbacks to watch out for. First, these projects will be quite intensive, which can be a turn-off for candidates due to the large time investment. Second, you should expect your development team to spend a good amount of time reviewing each submission. To combat these you will want to selectively use these projects to ensure candidate retention and prevent interviewer fatigue. Having your interviewers being familiar with the solution is key to making this process more efficient. You will also want to setup a system for tracking results and making sure everyone has access to the project submissions.\n\nAnother option is to take things a step further and use an automated assessment platform. In this case, you wouldn't give the candidate a full project, but instead one or more in-depth coding assessments to complete. With targeted challenges, you can isolate specific areas that you would like to focus on. Since the system will score the candidates for you, you won't need to worry about testing the code yourself. This allows you to filter candidates effortlessly and focus your time on how the assignment was solved. Taking it even further, Qualified.io actually utilizes unit tests for automated scoring - the same tests development teams use for testing their own software. This provides a familiar process to candidates and also enables you to test TDD skills. Imagine, you can not only use tests to ensure your development team is producing quality software, you can also use it to ensure you are producing quality technical assessments.\n\nRegardless of which in-depth assignment approach you take, it will give your candidates an opportunity to reveal their skills in a comfortable environment. This way you can quickly see talent, and well before you invest your engineers time in a whiteboarding or on-site interview.\n\n# Pair-Programming Interviews\nOK, so you have pre-screened out all of the poor candidates, and honed in on the high quality candidates using an in-depth assignment. At this point you have done a great job minimizing the amount of time you need to take from your development team. Its now time to get them more hands-on with the interview process.\n\nThe process of interviewing can be incredibly time consuming, but it's an important phase that you don't want to shortcut on. Many companies hold technical phone screens before an on-site interview in a conversational format. These phone screens provide shallow skill insight, while a full on-site can often be very costly - costing your team precious time as well as possible travel expenses. Pair-programming during a phone screen is a great way to allow your interviewers full insight into a candidate's coding skills without increased overhead. They are often so effective they can even replace an on-site interview when necessary.\n\nA pair-programming interview involves one or more of your engineers meeting with a candidate in a real-time collaborative coding environment, such as Qualified's Live Interview. These pair-programming environments allow developers to remotely code together as they work through a code assessment or whiteboarding problem.\nThis real-time collaboration offers direct insight into a candidate's thought-process and problem-solving approach. With Qualified.io, you can even record the playback of the pair-programming session so the rest of your team can review the session later. Pair-programming will provide you with a great preview of how well the candidate will integrate into your team.\n\n# Recap\nOptimize your hiring flow by using pre-screens to quickly filter out poor performers. Get real world examples from your prospects by using in-depth code assessments. Save your development team from hours of in-person interviews by utilizing pair-programming phone screens. Automate and streamline your process with tools like [Qualified.io](https://www.qualified.io/?utm_source=qualified&medium=blog&utm_campaign=hiring-software-developers-testing-efficiency).","richBody":null,"description":"Hiring software developers is one of the most important aspects of building a successful business. It's a general truth that a great programmer can be 10 times more productive than a mediocre one.","hideHero":false,"publishDate":"2016-09-12T00:00-07:00"}]